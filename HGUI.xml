<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HGUIHelper</name>
    </assembly>
    <members>
        <member name="T:SevenZip.LzmaBench">
            <summary>
            LZMA Benchmark
            </summary>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.PosStateBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitContextBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitPosBits" -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="F:huqiang.AudioChannel.UI">
            <summary>
            UI交互的声音
            </summary>
        </member>
        <member name="F:huqiang.AudioChannel.BGM">
            <summary>
            背景声音
            </summary>
        </member>
        <member name="F:huqiang.AudioChannel.GameSound">
            <summary>
            道具或怪物声音
            </summary>
        </member>
        <member name="F:huqiang.AudioChannel.Speech">
            <summary>
            语音聊天
            </summary>
        </member>
        <member name="M:huqiang.AudioManager.AddAudioSource(System.Int32,UnityEngine.AudioSource)">
            <summary>
            添加一个音源通道
            </summary>
            <param name="channel">通道id</param>
            <param name="audio">音源</param>
        </member>
        <member name="M:huqiang.AudioManager.Play(System.Int32,UnityEngine.AudioClip,System.Boolean)">
            <summary>
            使用某个通道播放声音
            </summary>
            <param name="channel">通道id</param>
            <param name="clip">声音片段</param>
            <param name="loop">是否循环</param>
        </member>
        <member name="M:huqiang.AudioManager.Stop(System.Int32)">
            <summary>
            停止某个通道播放声音
            </summary>
            <param name="channel">通道id</param>
        </member>
        <member name="M:huqiang.AudioManager.FindAudioSourc(System.Int32)">
            <summary>
            查询某个通道的所有音源
            </summary>
            <param name="channel">通道id</param>
            <returns>返回音源列表</returns>
        </member>
        <member name="T:huqiang.UIAudioManager">
            <summary>
            ui的音频管理器
            </summary>
        </member>
        <member name="F:huqiang.UIAudioManager.pointerEntry">
            <summary>
            光标进入某个UI区域触发的声音
            </summary>
        </member>
        <member name="F:huqiang.UIAudioManager.pointerLeave">
            <summary>
            光标离开某个区域触发的声音
            </summary>
        </member>
        <member name="F:huqiang.UIAudioManager.pointerDown">
            <summary>
            光标按下触发的声音
            </summary>
        </member>
        <member name="F:huqiang.UIAudioManager.pointerUp">
            <summary>
            光标抬起触发的声音
            </summary>
        </member>
        <member name="F:huqiang.UIAudioManager.onClick">
            <summary>
            光标单击触发的声音
            </summary>
        </member>
        <member name="F:huqiang.UIAudioManager.Open">
            <summary>
            开启或关闭UI声音播放
            </summary>
        </member>
        <member name="M:huqiang.UIAudioManager.Initial(UnityEngine.Transform)">
            <summary>
            初始化UI音频组件
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:huqiang.UIAudioManager.Play(UnityEngine.AudioClip)">
            <summary>
            播放声音
            </summary>
            <param name="clip"></param>
        </member>
        <member name="M:huqiang.UIAudioManager.PointerEntry">
            <summary>
            播放光标进入某个区域的声音
            </summary>
        </member>
        <member name="M:huqiang.UIAudioManager.PointerLeave">
            <summary>
            播放光标离开某个区域的声音
            </summary>
        </member>
        <member name="M:huqiang.UIAudioManager.PointerDown">
            <summary>
            播放光标按下进入某个区域的声音
            </summary>
        </member>
        <member name="M:huqiang.UIAudioManager.PointerUp">
            <summary>
            播放光标弹起某个区域的声音
            </summary>
        </member>
        <member name="M:huqiang.UIAudioManager.OnClick">
            <summary>
            播放光标单击某个区域的声音
            </summary>
        </member>
        <member name="M:huqiang.UIAudioManager.Stop">
            <summary>
            停止播放UI声音
            </summary>
        </member>
        <member name="T:huqiang.BGMAudioManager">
            <summary>
            背景音乐管理器
            </summary>
        </member>
        <member name="F:huqiang.BGMAudioManager.Open">
            <summary>
            开启或关闭背景音乐
            </summary>
        </member>
        <member name="M:huqiang.BGMAudioManager.Initial(UnityEngine.Transform)">
            <summary>
            初始化背景音乐组件
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:huqiang.BGMAudioManager.Play(UnityEngine.AudioClip)">
            <summary>
            播放背景音乐
            </summary>
            <param name="clip"></param>
        </member>
        <member name="M:huqiang.BGMAudioManager.Stop">
            <summary>
            停止播放背景声音
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeHead.Type">
            <summary>
            数据压缩类型
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeHead.MsgID">
            <summary>
            此消息的id
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeHead.CurPart">
            <summary>
            此消息的某个分卷
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeHead.AllPart">
            <summary>
            此消息总计分卷
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeHead.PartLen">
            <summary>
            此消息分卷长度
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeHead.Lenth">
            <summary>
            此此消息总计长度
            </summary>
        </member>
        <member name="T:huqiang.EnvelopeData">
            <summary>
            封包
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeData.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeData.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:huqiang.EnvelopePart">
            <summary>
            封包分卷
            </summary>
        </member>
        <member name="F:huqiang.EnvelopePart.head">
            <summary>
            封包头
            </summary>
        </member>
        <member name="F:huqiang.EnvelopePart.data">
            <summary>
            数据段
            </summary>
        </member>
        <member name="M:huqiang.Envelope.ReadHead(System.Byte[],System.Int32)">
            <summary>
            读取封包头信息
            </summary>
            <param name="buff">数据缓存</param>
            <param name="index">读取位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Envelope.WriteHead(System.Byte[],System.Int32,huqiang.EnvelopeHead)">
            <summary>
            写入封包头
            </summary>
            <param name="buff">数据缓存</param>
            <param name="index">写入位置</param>
            <param name="head">封包头</param>
        </member>
        <member name="M:huqiang.Envelope.UnpackPart(System.Byte[],System.Int32,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="buff">源数据</param>
            <param name="len">数据长度</param>
            <param name="buffer">缓存数据</param>
            <param name="remain"></param>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Envelope.SubVolume(System.Byte[],System.Byte,System.UInt16,System.UInt16)">
            <summary>
            对数据进行分卷, 标头4字节，总长度4字节, 当前分卷2字节，总分卷2字节，当前分卷长度4字节，总计16字节
            </summary>
            <param name="buff">需要打包的数据</param>
            <param name="type">数据类型</param>
            <param name="id">数据包标志</param>
            <param name="fs">每个分卷大小</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Envelope.PackingInt(System.Byte[],System.Byte)">
            <summary>
            包头=255,255,255,255,包尾=255,255,255,254
            </summary>
            <param name="dat"></param>
            <param name="type">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Envelope.EnvlopeDataToPart(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            读取数据的包头,将数据解析成分段数据
            </summary>
            <param name="datas"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Envelope.PackAll(System.Byte[],System.Byte,System.UInt16,System.Int32)">
            <summary>
            当数据量较大,使用分卷
            Tcp每个数据包大小1460字节,Udp每个数据包大小1472字节
            Tcp Part->1460-14=1446,All->1460-8-14=1438.Udp All->1472-8-14=1450
            </summary>
            <param name="dat"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Envelope.PackAll(System.Byte,System.UInt16,System.UInt16)">
            <summary>
            以包头加包尾和封包信息头的方式对数据进行打包
            </summary>
            <param name="type">数据类型</param>
            <param name="msgId">消息id</param>
            <param name="partID">风卷id</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Envelope.Pack(System.Byte[],System.Byte,huqiang.PackType,System.UInt16,System.UInt16)">
            <summary>
            对数据进行打包
            </summary>
            <param name="dat">数据</param>
            <param name="tag">数据类型</param>
            <param name="type">打包方式</param>
            <param name="msgID">消息id</param>
            <param name="fs">分卷长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Envelope.SetChecked(System.Int32[],System.Int32)">
            <summary>
            进行比特位状态设置
            </summary>
            <param name="checks">状态缓存</param>
            <param name="part">分卷id</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Envelope.CopyToBuff(System.Byte[],System.Byte[],System.Int32,huqiang.EnvelopeHead,System.Int32)">
            <summary>
            将数组的内容复制到另一个数组中
            </summary>
            <param name="buff">目标缓存</param>
            <param name="src">数据源</param>
            <param name="start">目标开始位置</param>
            <param name="head">数据源封包头</param>
            <param name="FragmentSize">封包片段大小</param>
        </member>
        <member name="T:huqiang.EnvelopeType">
            <summary>
            封包数据类型,可以自行添加
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.Mate">
            <summary>
            元数据
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.AesMate">
            <summary>
            aes加密的元数据
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.Json">
            <summary>
            Json数据
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.AesJson">
            <summary>
            aes加密的接送数据
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.DataBuffer">
            <summary>
            DataBuffer类型数据
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.AesDataBuffer">
            <summary>
            aes加密过的DataBuffer数据
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.AesString">
            <summary>
            aes加密过的字符串
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.ProtoBuf">
            <summary>
            ProtoBuf数据
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.Lz4AesJson">
            <summary>
            使用Lz4压缩过并用aes加密的Json数据
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.Success">
            <summary>
            这是一个消息成功的回执
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.Failed">
            <summary>
            这是一个失败的消息
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeType.Heart">
            <summary>
            这是一个心跳包
            </summary>
        </member>
        <member name="T:huqiang.SocMsg">
            <summary>
            来自Socket的消息
            </summary>
        </member>
        <member name="F:huqiang.SocMsg.dat">
            <summary>
            数据的指针地址
            </summary>
        </member>
        <member name="F:huqiang.SocMsg.link">
            <summary>
            用户连接
            </summary>
        </member>
        <member name="M:huqiang.SocMsg.Dispose">
            <summary>
            释放指针数据
            </summary>
        </member>
        <member name="T:huqiang.Kcp">
            <summary>
            KCP数据管理
            </summary>
        </member>
        <member name="F:huqiang.Kcp.FragmentSize">
            <summary>
            数据片段尺寸,包头4字节,包尾4字节,数据头21字节,12个节点,每个节点4字节=1399
            </summary>
        </member>
        <member name="F:huqiang.Kcp.MsgTimeOut">
            <summary>
            数据超时时间,单位毫秒，默认值为500,超时没有接收到对方的回执则重新发送
            </summary>
        </member>
        <member name="F:huqiang.Kcp.MinID">
            <summary>
            消息的频段最小id
            </summary>
        </member>
        <member name="F:huqiang.Kcp.MaxID">
            <summary>
            消息的频段最大id
            </summary>
        </member>
        <member name="F:huqiang.Kcp.Buffer">
            <summary>
            块级缓冲区
            </summary>
        </member>
        <member name="F:huqiang.Kcp.statesBuffer">
            <summary>
            状态缓存
            </summary>
        </member>
        <member name="M:huqiang.Kcp.MemoryRequest(System.Int32)">
            <summary>
            申请内存地址
            </summary>
            <param name="len">内存块大小</param>
            <returns>内存指针</returns>
        </member>
        <member name="M:huqiang.Kcp.Run(huqiang.KcpListener,System.Int32)">
            <summary>
            运行,并为每个线程分配状态缓存
            </summary>
            <param name="listener">kcp监听器</param>
            <param name="threadCount">线程数</param>
        </member>
        <member name="M:huqiang.Kcp.ReciveMsg(System.Byte[],System.Int32,huqiang.KcpData)">
            <summary>
            接收消息
            </summary>
            <param name="buf">缓存</param>
            <param name="len">数据长度</param>
            <param name="link">用户连接</param>
        </member>
        <member name="M:huqiang.Kcp.UnPack(System.Int16)">
            <summary>
            解压消息
            </summary>
            <param name="time">当前时间</param>
        </member>
        <member name="M:huqiang.Kcp.SendMsg(huqiang.KcpData,System.Int16)">
            <summary>
            发送用户消息
            </summary>
            <param name="link">用户连接</param>
            <param name="time">当前时间,用于统计时延</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Kcp.Success(huqiang.KcpHead@,huqiang.KcpData)">
            <summary>
            成功发送的消息回执,剔除掉缓存中的消息备份
            </summary>
            <param name="head">消息头</param>
            <param name="link">用户连接</param>
        </member>
        <member name="P:huqiang.Kcp.UsageMemory">
            <summary>
            非托管内存的使用状态
            </summary>
        </member>
        <member name="P:huqiang.Kcp.AllMemory">
            <summary>
            总计申请的非托管内存
            </summary>
        </member>
        <member name="P:huqiang.Kcp.PEMemory">
            <summary>
            pe头占用的非托管内存
            </summary>
        </member>
        <member name="M:huqiang.Kcp.Pack(System.Byte[],System.Byte,System.UInt16,System.Int16)">
            <summary>
            数据封包
            </summary>
            <param name="dat">数据</param>
            <param name="type">数据类型</param>
            <param name="msgId">消息id</param>
            <param name="time">发送时间</param>
            <returns></returns>
        </member>
        <member name="F:huqiang.KcpReturn.Type">
            <summary>
            数据压缩类型
            </summary>
        </member>
        <member name="F:huqiang.KcpReturn.MsgID">
            <summary>
            此消息的id
            </summary>
        </member>
        <member name="F:huqiang.KcpReturn.CurPart">
            <summary>
            此消息的某个分卷
            </summary>
        </member>
        <member name="F:huqiang.KcpReturn.Time">
            <summary>
            此消息发送的时间戳
            </summary>
        </member>
        <member name="F:huqiang.KcpHead.Type">
            <summary>
            数据压缩类型
            </summary>
        </member>
        <member name="F:huqiang.KcpHead.MsgID">
            <summary>
            此消息的id
            </summary>
        </member>
        <member name="F:huqiang.KcpHead.CurPart">
            <summary>
            此消息的某个分卷
            </summary>
        </member>
        <member name="F:huqiang.KcpHead.AllPart">
            <summary>
            此消息总计分卷
            </summary>
        </member>
        <member name="F:huqiang.KcpHead.PartLen">
            <summary>
            此消息分卷长度
            </summary>
        </member>
        <member name="F:huqiang.KcpHead.Lenth">
            <summary>
            此消息总计长度
            </summary>
        </member>
        <member name="F:huqiang.KcpHead.Time">
            <summary>
            此消息发送的时间戳
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo.MsgID">
            <summary>
            此消息的id
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo.CurPart">
            <summary>
            此消息的某个分卷
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo.CreateTime">
            <summary>
            创建的时间
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo.SendTime">
            <summary>
            上一次发送的时间
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo.SendCount">
            <summary>
            发送的次数
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo2.MsgID">
            <summary>
            此消息的id
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo2.CurPart">
            <summary>
            此消息的某个分卷
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo2.CreateTime">
            <summary>
            创建的时间
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo2.SendTime">
            <summary>
            上一次发送的时间
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo2.SendCount">
            <summary>
            发送的次数
            </summary>
        </member>
        <member name="F:huqiang.MsgInfo2.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:huqiang.KcpData.RecvBuffer">
            <summary>
            接收到缓存数据
            </summary>
        </member>
        <member name="F:huqiang.KcpData.recvQueue">
            <summary>
            接收到的解包数据
            </summary>
        </member>
        <member name="F:huqiang.KcpData.sendQueue">
            <summary>
            需要发送的原始数据
            </summary>
        </member>
        <member name="F:huqiang.KcpData.Msgs">
            <summary>
            需要发送的封包数据
            </summary>
        </member>
        <member name="F:huqiang.KcpData.Msgs2">
            <summary>
            需要发送的广播数据
            </summary>
        </member>
        <member name="M:huqiang.KcpData.AddMsgPart(System.Byte[],System.Int32,huqiang.Kcp,System.Int16)">
            <summary>
            添加一个接收到的消息分卷
            </summary>
            <param name="dat"></param>
            <param name="len"></param>
            <param name="kcp"></param>
            <param name="time"></param>
        </member>
        <member name="P:huqiang.KcpData.Delay">
            <summary>
            数据平均时延
            </summary>
        </member>
        <member name="M:huqiang.KcpData.Recive(System.Int64)">
            <summary>
            处理接收缓存中的消息,如果未被重写,则未释放消息内存
            </summary>
            <param name="now"></param>
        </member>
        <member name="M:huqiang.KcpData.Send(System.Byte,System.Byte[])">
            <summary>
            发送一个消息
            </summary>
            <param name="type">数据类型</param>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.KcpData.FreeMemory">
            <summary>
            释放所占用的非托管内存
            </summary>
        </member>
        <member name="M:huqiang.KcpData.Disconnect">
            <summary>
            返回true,则在线程管理中移除,不再参与重连
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.KcpData.AddMsg(huqiang.MsgInfo2[])">
            <summary>
            添加一个公用消息
            </summary>
            <param name="msgs">消息</param>
        </member>
        <member name="F:huqiang.KcpLink.uniId">
            <summary>
            唯一id,可以由客户机传递过来
            </summary>
        </member>
        <member name="F:huqiang.KcpLink.Key">
            <summary>
             随机生成的,用于aes加密的钥匙
            </summary>
        </member>
        <member name="F:huqiang.KcpLink.Iv">
            <summary>
            随机生成的,用于aes加密的钥匙
            </summary>
        </member>
        <member name="F:huqiang.KcpLink.TimeOut">
            <summary>
            连接超时时间 5秒
            </summary>
        </member>
        <member name="F:huqiang.KcpLink.ConnectTime">
            <summary>
            第一次连接时间
            </summary>
        </member>
        <member name="F:huqiang.KcpLink.lastTime">
            <summary>
            最后一次接收到数据的时间
            </summary>
        </member>
        <member name="M:huqiang.KcpLink.Recive(System.Int64)">
            <summary>
            处理接收缓存中的消息
            </summary>
            <param name="now"></param>
        </member>
        <member name="M:huqiang.KcpLink.Awake">
            <summary>
            初次建立连接调用
            </summary>
        </member>
        <member name="M:huqiang.KcpLink.Dispatch(huqiang.Data.BlockInfo{System.Byte},System.Byte)">
            <summary>
            派发接收到的消息
            </summary>
            <param name="dat"></param>
            <param name="tag"></param>
        </member>
        <member name="M:huqiang.KcpLink.Redirect(System.Int32,System.Int32)">
            <summary>
            ip重定向
            </summary>
            <param name="ciP">ip地址</param>
            <param name="cport">端口</param>
        </member>
        <member name="T:huqiang.KcpListener">
            <summary>
            KCP监听器
            </summary>
        </member>
        <member name="F:huqiang.KcpListener.Heart">
            <summary>
            心跳包
            </summary>
        </member>
        <member name="F:huqiang.KcpListener.TimeOut">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="F:huqiang.KcpListener.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="F:huqiang.KcpListener.recvThread">
            <summary>
            处理接收到的消息的线程
            </summary>
        </member>
        <member name="F:huqiang.KcpListener.sendThread">
            <summary>
            处理将要发送的消息的线程
            </summary>
        </member>
        <member name="F:huqiang.KcpListener.running">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="P:huqiang.KcpListener.Port">
            <summary>
            服务器端口
            </summary>
        </member>
        <member name="M:huqiang.KcpListener.Start">
            <summary>
            启动监听服务
            </summary>
        </member>
        <member name="M:huqiang.KcpListener.Sending">
            <summary>
            sendThread
            </summary>
        </member>
        <member name="M:huqiang.KcpListener.SendAll">
            <summary>
            发送所有线程缓存中的消息
            </summary>
        </member>
        <member name="M:huqiang.KcpListener.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:huqiang.KcpListener.Dispatch(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            处理监听到的消息
            </summary>
            <param name="dat"></param>
            <param name="len"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:huqiang.KcpListener.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            向某个地址发送原始消息
            </summary>
            <param name="data"></param>
            <param name="ip"></param>
        </member>
        <member name="M:huqiang.KcpListener.RemoveLink(huqiang.NetworkLink)">
            <summary>
            移除某个用户连接
            </summary>
            <param name="link"></param>
        </member>
        <member name="M:huqiang.KcpListener.Broadcast(System.Byte[],System.Byte)">
            <summary>
            广播消息
            </summary>
            <param name="dat"></param>
            <param name="type"></param>
        </member>
        <member name="M:huqiang.KcpListener.ManageLinks">
            <summary>
            管理用户连接
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:huqiang.KcpListener.PreRecycling(huqiang.NetworkLink)" -->
        <member name="M:huqiang.KcpListener.DisposeRecyclingLinks">
            <summary>
            recvThread 释放链接
            </summary>
            <param name="time"></param>
        </member>
        <member name="T:huqiang.KcpServer`1">
            <summary>
            kcp服务,kcp一个单独的线程用于接收消息
            一个单独得定线程发送消息
            一个单独的线程解析kcp数据包,然后推到每个连接的缓存中
            连接更新线程有多个,检查和处理每个连接中的缓存数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:huqiang.KcpServer`1.MinID">
            <summary>
            用于广播服务的最小消息id
            </summary>
        </member>
        <member name="F:huqiang.KcpServer`1.MaxID">
            <summary>
            用于广播服务的最大消息id
            </summary>
        </member>
        <member name="F:huqiang.KcpServer`1.RejectAutoConnections">
            <summary>
            拒绝外部发起的新连接
            </summary>
        </member>
        <member name="M:huqiang.KcpServer`1.#ctor(System.Int32)">
            <summary>
            kcp服务器
            </summary>
            <param name="port">服务端口,默认为自动端口</param>
        </member>
        <member name="M:huqiang.KcpServer`1.Run(System.Int32,System.Int32)">
            <summary>
            运行服务
            </summary>
            <param name="threadCount">线程数量</param>
            <param name="threadbuff">每个线程的缓存数</param>
        </member>
        <member name="M:huqiang.KcpServer`1.Close">
            <summary>
            关闭Socket
            </summary>
        </member>
        <member name="M:huqiang.KcpServer`1.FindOrCreateLink(System.Net.IPEndPoint)">
            <summary>
            查找或创建一个该地址的用户连接
            </summary>
            <param name="ep"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.KcpServer`1.Dispatch(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            处理监听到的消息
            </summary>
            <param name="dat">缓存</param>
            <param name="len">数据长度</param>
            <param name="ep">远程地址</param>
        </member>
        <member name="M:huqiang.KcpServer`1.RemoveLink(huqiang.NetworkLink)">
            <summary>
            移除某个连接
            </summary>
            <param name="link"></param>
        </member>
        <member name="M:huqiang.KcpServer`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:huqiang.KcpServer`1.FindLink(System.Int64)">
            <summary>
            使用id查询某个用户
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.KcpServer`1.FindLink(System.Int32,System.Int32)">
            <summary>
            使用ip地址查询某个用户
            </summary>
            <param name="ip">ip地址</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.KcpServer`1.OpenHeart">
            <summary>
            开启心跳,防止超时断线
            </summary>
        </member>
        <member name="M:huqiang.KcpServer`1.CloseHeart">
            <summary>
            关闭心跳
            </summary>
        </member>
        <member name="M:huqiang.KcpServer`1.Broadcast(System.Byte[],System.Byte)">
            <summary>
            广播消息
            </summary>
            <param name="dat">数据</param>
            <param name="type">数据类型</param>
        </member>
        <member name="M:huqiang.KcpServer`1.SendAll">
            <summary>
            发送缓存中的消息
            </summary>
        </member>
        <member name="M:huqiang.KcpServer`1.ManageLinks">
            <summary>
            管理当前的用户连接
            </summary>
        </member>
        <member name="T:huqiang.KcpThread`1">
            <summary>
            管理kcp连接的线程
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:huqiang.KcpThread`1.thread">
            <summary>
            本线程任务只负责派发解包后的消息与逻辑，用户的添加和释放由kcpserver的recvThread线程统一管理
            消息的解压包由kcpserver的sendThread线程统一管理
            </summary>
        </member>
        <member name="M:huqiang.KcpThread`1.#ctor(System.Int32)">
            <summary>
            kcp线程用户管理类
            </summary>
            <param name="size">缓存大小,可容纳的最大用户数</param>
        </member>
        <member name="M:huqiang.KcpThread`1.AddMission(System.Action{System.Object},System.Object)">
            <summary>
            添加其它线程委托的任务
            </summary>
            <param name="action"></param>
            <param name="obj"></param>
        </member>
        <member name="M:huqiang.KcpThread`1.SendAll(huqiang.Kcp,System.Int16)">
            <summary>
            发送缓存中的消息
            </summary>
            <param name="kcp">kcp封包器</param>
            <param name="time">时间</param>
        </member>
        <member name="M:huqiang.KcpThread`1.SendAll(System.Net.Sockets.Socket,huqiang.Kcp,System.Int16,System.Byte[])">
            <summary>
            发送缓存中的消息,如果没有则发送一条外部消息,防止超时
            </summary>
            <param name="soc">socket服务</param>
            <param name="kcp">kcp封包器</param>
            <param name="time">时间</param>
            <param name="heart">心跳包</param>
        </member>
        <member name="M:huqiang.KcpThread`1.DeleteTimeOutLink(huqiang.KcpListener,System.Int64)">
            <summary>
            由kcpserver的recvThread线程管理
            </summary>
        </member>
        <member name="T:huqiang.ThreadBuffer`1">
            <summary>
            线程缓存
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:huqiang.ThreadBuffer`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="size">缓存大小,容纳用户最大的连接数</param>
        </member>
        <member name="M:huqiang.ThreadBuffer`1.Find(System.Int32,System.Int32)">
            <summary>
            使用ip地址查询某个用户
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.ThreadBuffer`1.Find(System.Int64)">
            <summary>
            使用id查询某个用户
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.ThreadBuffer`1.Add(`0)">
            <summary>
            添加一个用户连接
            </summary>
            <param name="link"></param>
        </member>
        <member name="M:huqiang.ThreadBuffer`1.Delete(huqiang.NetworkLink)">
            <summary>
            移除某个用户连接
            </summary>
            <param name="link"></param>
        </member>
        <member name="P:huqiang.ThreadBuffer`1.Count">
            <summary>
            当前连接数
            </summary>
        </member>
        <member name="M:huqiang.ThreadBuffer`1.SendAll(System.Net.Sockets.Socket,System.Byte[][])">
            <summary>
            个欸所有连接发送消息
            </summary>
            <param name="soc">Socket</param>
            <param name="data">数据</param>
        </member>
        <member name="M:huqiang.ThreadBuffer`1.AddMsg(huqiang.MsgInfo2[])">
            <summary>
            给所有连接添加要发送的数据
            </summary>
            <param name="msgs"></param>
        </member>
        <member name="M:huqiang.ThreadBuffer`1.Recive">
            <summary>
            处理接收到的消息
            </summary>
        </member>
        <member name="T:huqiang.LinkThread`1">
            <summary>
            用户连接线程
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:huqiang.LinkThread`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="size">缓存大小,容纳用户最大的连接数</param>
        </member>
        <member name="M:huqiang.LinkThread`1.AddMission(System.Action{System.Object},System.Object)">
            <summary>
            添加其它线程委托的任务
            </summary>
            <param name="action"></param>
            <param name="obj"></param>
        </member>
        <member name="T:huqiang.NetworkLink">
            <summary>
            网络连接
            </summary>
        </member>
        <member name="F:huqiang.NetworkLink.ip">
            <summary>
            远程ip地址
            </summary>
        </member>
        <member name="F:huqiang.NetworkLink.port">
            <summary>
            远程端口
            </summary>
        </member>
        <member name="F:huqiang.NetworkLink.Index">
            <summary>
            所在线程中的索引
            </summary>
        </member>
        <member name="F:huqiang.NetworkLink.buffIndex">
            <summary>
            线程的索引
            </summary>
        </member>
        <member name="F:huqiang.NetworkLink.id">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="F:huqiang.NetworkLink.endpPoint">
            <summary>
            远程地址
            </summary>
        </member>
        <member name="F:huqiang.NetworkLink._connect">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="F:huqiang.NetworkLink.RecyclingTime">
            <summary>
            用户触发销毁的时间,由KcpListener统一销毁,防止线程资源冲突
            </summary>
        </member>
        <member name="M:huqiang.NetworkLink.Recive(System.Int64)">
            <summary>
            处理接收到的消息
            </summary>
            <param name="now"></param>
        </member>
        <member name="M:huqiang.NetworkLink.AddMsg(huqiang.MsgInfo2[])">
            <summary>
            添加一个共有消息
            </summary>
            <param name="msgs"></param>
        </member>
        <member name="M:huqiang.NetworkLink.FreeMemory">
            <summary>
            释放非托管内存资源
            </summary>
        </member>
        <member name="M:huqiang.NetworkLink.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeItem.head">
            <summary>
            封包头
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeItem.part">
            <summary>
            分卷
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeItem.rcvLen">
            <summary>
            总计接收到的消息长度
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeItem.buff">
            <summary>
            消息缓存
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeItem.time">
            <summary>
            接收到的消息时间,用来做超时处理
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeItem.checks">
            <summary>
            消息分卷状态
            </summary>
        </member>
        <member name="F:huqiang.EnvelopeItem.done">
            <summary>
            保留一定时效
            </summary>
        </member>
        <member name="F:huqiang.TcpEnvelope.MinID">
            <summary>
            消息的最小id
            </summary>
        </member>
        <member name="F:huqiang.TcpEnvelope.MaxID">
            <summary>
            消息的最大id
            </summary>
        </member>
        <member name="F:huqiang.TcpEnvelope.type">
            <summary>
            封包类型
            </summary>
        </member>
        <member name="F:huqiang.TcpEnvelope.pool">
            <summary>
            封包缓存
            </summary>
        </member>
        <member name="F:huqiang.TcpEnvelope.Fragment">
            <summary>
            封包分卷长度
            </summary>
        </member>
        <member name="F:huqiang.TcpEnvelope.sss">
            <summary>
            Solution Slices Segment
            </summary>
        </member>
        <member name="M:huqiang.TcpEnvelope.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="buffLen">256kb</param>
        </member>
        <member name="M:huqiang.TcpEnvelope.Pack(System.Byte[],System.Byte)">
            <summary>
            数据封包
            </summary>
            <param name="dat">数据</param>
            <param name="tag">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.TcpEnvelope.Unpack(System.Byte[],System.Int32)">
            <summary>
            数据解包
            </summary>
            <param name="dat">缓存</param>
            <param name="len">数据长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.TcpEnvelope.OrganizeSubVolume(System.Collections.Generic.List{huqiang.EnvelopePart},System.Int32)">
            <summary>
            分析合并数据分卷
            </summary>
            <param name="list">数据分卷列表</param>
            <param name="fs">封包分卷长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.TcpEnvelope.ClearTimeout">
            <summary>
            清除超时的消息
            </summary>
        </member>
        <member name="M:huqiang.TcpEnvelope.Clear">
            <summary>
            清除所有消息
            </summary>
        </member>
        <member name="T:huqiang.TcpLink">
            <summary>
            客户端连接
            </summary>
        </member>
        <member name="M:huqiang.TcpLink.SetSocket(System.Net.Sockets.Socket,System.Net.IPEndPoint,huqiang.PackType,System.Int32)">
            <summary>
            设置Socket
            </summary>
            <param name="soc">Socket</param>
            <param name="end">远程ip地址</param>
            <param name="pack">封包类型</param>
            <param name="buffsize">数据缓冲区大小</param>
        </member>
        <member name="M:huqiang.TcpLink.SetPackType(huqiang.PackType)">
            <summary>
            设置封包类型
            </summary>
            <param name="pack">封包类型</param>
        </member>
        <member name="M:huqiang.TcpLink.Send(System.Byte[],System.Byte)">
            <summary>
            发送一条消息
            </summary>
            <param name="data">数据</param>
            <param name="type">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.TcpLink.Send(System.Byte[][])">
            <summary>
            发送一组数据
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.TcpLink.Send(System.String)">
            <summary>
            发送一条字符串数据
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.TcpLink.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:huqiang.TcpLink.Recive(System.Int64)">
            <summary>
            处理接收到的消息
            </summary>
            <param name="time">当前时间</param>
        </member>
        <member name="M:huqiang.TcpLink.Dispatch(System.Byte[],System.Byte)">
            <summary>
            派发解析好的数据
            </summary>
            <param name="dat">数据</param>
            <param name="tag">数据类型</param>
        </member>
        <member name="P:huqiang.TcpSocket.isConnection">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="M:huqiang.TcpSocket.#ctor(System.Int32,huqiang.PackType,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="bs">缓冲区大小</param>
            <param name="type">封包类型</param>
            <param name="es">封包缓冲区大小</param>
        </member>
        <member name="M:huqiang.TcpSocket.SetDispatchMethod(System.Action{System.Byte[],System.Byte,System.Object},System.Boolean)">
            <summary>
            设置消息派发函数
            </summary>
            <param name="DispatchMessage"></param>
            <param name="autodispatch">true由socket本身的线程进行派发，false为手动派发，请使用update函数</param>
            <param name="buff_size">手动派发时，缓存消息的队列大小,默认最小为32</param>
        </member>
        <member name="M:huqiang.TcpSocket.ConnectServer(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            连接到远程服务器
            </summary>
            <param name="remote">远程服务器地址</param>
            <param name="bind">本机地址</param>
        </member>
        <member name="F:huqiang.TcpSocket.SelfAnalytical">
            <summary>
            由子线程解析，请勿访问ui,如果为空则有
            </summary>
        </member>
        <member name="M:huqiang.TcpSocket.Dispatch">
            <summary>
            由其它线程进行消息派发，当异步线程终止时，开启线程
            </summary>
        </member>
        <member name="M:huqiang.TcpSocket.SendMessage(System.Byte[],System.Byte)">
            <summary>
            向服务器发送消息
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:huqiang.TcpSocket.Close">
            <summary>
            关闭服务
            </summary>
        </member>
        <member name="F:huqiang.TcpSocket.Connected">
            <summary>
            当连接成功时,调用此委托
            </summary>
        </member>
        <member name="F:huqiang.TcpSocket.ConnectFaild">
            <summary>
            连接失败时调用此委托
            </summary>
        </member>
        <member name="F:huqiang.TcpSocket.Packaging">
            <summary>
            是否需要封包
            </summary>
        </member>
        <member name="M:huqiang.TcpSocket.Redirect(System.Net.IPEndPoint)">
            <summary>
            重定向
            </summary>
            <param name="iPEnd">重定向IP地址</param>
        </member>
        <member name="T:huqiang.TcpServer`1">
            <summary>
            tcp监听服务器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:huqiang.TcpServer`1.SingleCount">
            <summary>
            每个线程的最大用户连接数
            </summary>
        </member>
        <member name="F:huqiang.TcpServer`1.linkBuff">
            <summary>
            线程缓存
            </summary>
        </member>
        <member name="F:huqiang.TcpServer`1.Instance">
            <summary>
            单例服务器实例
            </summary>
        </member>
        <member name="M:huqiang.TcpServer`1.#ctor(System.String,System.Int32,huqiang.PackType,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="ip">服务器ip地址</param>
            <param name="port">服务器端口</param>
            <param name="type">数据封包类型</param>
            <param name="thread">线程数量</param>
        </member>
        <member name="M:huqiang.TcpServer`1.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:huqiang.TcpServer`1.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:huqiang.TcpServer`1.Heartbeat">
            <summary>
            给用户发送心跳
            </summary>
        </member>
        <member name="M:huqiang.TcpServer`1.Broadcasting(System.Action{`0})">
            <summary>
            广播所有在线用户
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:huqiang.TcpServer`1.FindLink(System.Int32,System.Int32)">
            <summary>
            查询某个用户连接
            </summary>
            <param name="ip">ip地址</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.TcpServer`1.FindLink(System.Int64)">
            <summary>
            查询某个用户连接
            </summary>
            <param name="id">用户id</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.UdpLink">
            <summary>
            udp连接
            </summary>
        </member>
        <member name="F:huqiang.UdpLink.id">
            <summary>
            用户id
            </summary>
        </member>
        <member name="F:huqiang.UdpLink.ip">
            <summary>
            用户ip
            </summary>
        </member>
        <member name="F:huqiang.UdpLink.port">
            <summary>
            用户端口
            </summary>
        </member>
        <member name="F:huqiang.UdpLink.uniId">
            <summary>
            用户id
            </summary>
        </member>
        <member name="F:huqiang.UdpLink.endpPoint">
            <summary>
            用户远程地址
            </summary>
        </member>
        <member name="F:huqiang.UdpLink.envelope">
            <summary>
            udp数据封包器
            </summary>
        </member>
        <member name="F:huqiang.UdpLink.time">
            <summary>
            连接时间
            </summary>
        </member>
        <member name="T:huqiang.UdpServer">
            <summary>
            udp服务器
            </summary>
        </member>
        <member name="F:huqiang.UdpServer.Packaging">
            <summary>
            是否使用封包功能,默认开启
            </summary>
        </member>
        <member name="F:huqiang.UdpServer.packType">
            <summary>
            封包类型
            </summary>
        </member>
        <member name="M:huqiang.UdpServer.#ctor(System.Int32,System.Int32,System.Boolean,huqiang.PackType)">
            <summary>
            构造函数
            </summary>
            <param name="port">端口</param>
            <param name="remote">远程端口</param>
            <param name="subThread">开启子线程分发</param>
            <param name="type">封包类型</param>
        </member>
        <member name="M:huqiang.UdpServer.Send(System.Byte[],System.Net.IPEndPoint,System.Byte)">
            <summary>
            发送一条消息
            </summary>
            <param name="dat">数据</param>
            <param name="ip">远程地址</param>
            <param name="tag">数据类型</param>
        </member>
        <member name="M:huqiang.UdpServer.SendAll(System.Byte[],System.Byte)">
            <summary>
            广播消息
            </summary>
            <param name="dat">数据</param>
            <param name="tag">数据类型</param>
        </member>
        <member name="F:huqiang.UdpServer.MainDispatch">
            <summary>
            如果只能主线程派发则使用此委托
            </summary>
        </member>
        <member name="M:huqiang.UdpServer.Dispatch">
            <summary>
            派发接收到的消息
            </summary>
        </member>
        <member name="M:huqiang.UdpServer.Close">
            <summary>
            关Socket和线程
            </summary>
        </member>
        <member name="F:huqiang.UdpServer.links">
            <summary>
            所有Udp连接
            </summary>
        </member>
        <member name="M:huqiang.UdpServer.ClearUnusedLink">
            <summary>
            移除超过10秒为响应的用户
            </summary>
        </member>
        <member name="F:huqiang.UdpSocket.Packaging">
            <summary>
            是否开启封包功能,默认关闭
            </summary>
        </member>
        <member name="M:huqiang.UdpSocket.#ctor(System.Int32,System.Net.IPEndPoint,System.Boolean,huqiang.PackType,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="port">端口</param>
            <param name="remote">远程ip地址</param>
            <param name="subThread">是否运行子线程派发消息</param>
            <param name="type">封包类型</param>
            <param name="es">封包缓存大小</param>
        </member>
        <member name="F:huqiang.UdpSocket.MainDispatch">
            <summary>
            如果只能主线程派发则使用此委托
            </summary>
        </member>
        <member name="M:huqiang.UdpSocket.Dispatch">
            <summary>
            派发接收到的消息
            </summary>
        </member>
        <member name="M:huqiang.UdpSocket.Close">
            <summary>
            关Socket和线程
            </summary>
        </member>
        <member name="M:huqiang.UdpSocket.Send(System.Byte[],System.Net.IPEndPoint,System.Byte)">
            <summary>
            向远程发送一条消息
            </summary>
            <param name="dat">数据</param>
            <param name="point">远程地址</param>
            <param name="tag">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UdpSocket.Broadcast(System.Byte[],System.Int32,System.Byte)">
            <summary>
            广播消息
            </summary>
            <param name="dat">数据</param>
            <param name="port">端口</param>
            <param name="tag">数据类型</param>
        </member>
        <member name="M:huqiang.UdpSocket.Redirect(System.Net.IPAddress)">
            <summary>
            远程地址重定向
            </summary>
            <param name="address">远程地址</param>
        </member>
        <member name="F:huqiang.Data2D.BoxColliderData.sharedMaterial">
            <summary>
            name
            </summary>
        </member>
        <member name="F:huqiang.Data2D.CapsuleColliderData.sharedMaterial">
            <summary>
            name
            </summary>
        </member>
        <member name="F:huqiang.Data2D.CircleColliderData.sharedMaterial">
            <summary>
            name
            </summary>
        </member>
        <member name="F:huqiang.Data2D.CompositeColliderData.sharedMaterial">
            <summary>
            name
            </summary>
        </member>
        <member name="F:huqiang.Data2D.EdgeColliderData.sharedMaterial">
            <summary>
            name
            </summary>
        </member>
        <member name="M:huqiang.Data2D.ModelManager2D.SavePrefab(UnityEngine.Transform,System.String)">
            <summary>
            将场景内的对象保存到文件
            </summary>
            <param name="uiRoot"></param>
            <param name="path"></param>
        </member>
        <member name="M:huqiang.Data2D.ModelManager2D.FindChild(huqiang.Data.FakeStruct,System.String)">
            <summary>
            查询transform的子物体
            </summary>
            <param name="fake"></param>
            <param name="childName"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data2D.ModelManager2D.GetAllChild(huqiang.Data.FakeStruct)">
            <summary>
            获取transform的所有子物体
            </summary>
            <param name="fake"></param>
            <param name="childName"></param>
            <returns></returns>
        </member>
        <member name="F:huqiang.Data2D.PolygonColliderData.sharedMaterial">
            <summary>
            name
            </summary>
        </member>
        <member name="F:huqiang.Data2D.RigibodyData.sharedMaterial">
            <summary>
            name
            </summary>
        </member>
        <member name="T:huqiang.Data.AuxiliaryLine">
            <summary>
            辅助线
            </summary>
        </member>
        <member name="M:huqiang.Data.AuxiliaryLine.CreateLine(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            创建一条线的网格
            </summary>
            <param name="start">起点</param>
            <param name="end">终点</param>
            <param name="lineWidth">线宽</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.AuxiliaryLine.CreateLine(UnityEngine.Vector3[],System.Int32[],System.Single)">
            <summary>
            创建网格线
            </summary>
            <param name="vert">顶点</param>
            <param name="lines">线的索引</param>
            <param name="lineWidth">线宽</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.AuxiliaryLine.GetLineVert(UnityEngine.Vector3[],System.Collections.Generic.List{UnityEngine.UIVertex},System.Collections.Generic.List{System.Int32},UnityEngine.Color)">
            <summary>
            将网格线的顶点填充到ui的顶点
            </summary>
            <param name="vectors">顶点</param>
            <param name="vert">UI顶点</param>
            <param name="tris">三角形</param>
            <param name="color">颜色</param>
        </member>
        <member name="F:huqiang.Data.AuxiliaryLine.BoxLine">
            <summary>
            盒子线框的三角形
            </summary>
        </member>
        <member name="M:huqiang.Data.AuxiliaryLine.BoxToScreenPoint(UnityEngine.Transform,UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>
            将世界坐标的顶点投射到屏幕坐标
            </summary>
            <param name="transform"></param>
            <param name="camera"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.BlockInfo`1">
            <summary>
            块级内存
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:huqiang.Data.BlockInfo`1.DataCount">
            <summary>
            有效数据长度
            </summary>
        </member>
        <member name="P:huqiang.Data.BlockInfo`1.Addr">
            <summary>
            非托管内存地址
            </summary>
        </member>
        <member name="P:huqiang.Data.BlockInfo`1.Offset">
            <summary>
            主缓存的偏移地址
            </summary>
        </member>
        <member name="P:huqiang.Data.BlockInfo`1.Size">
            <summary>
            缓存大小
            </summary>
        </member>
        <member name="M:huqiang.Data.BlockInfo`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="addr">主缓存索引</param>
            <param name="index">缓存索引</param>
            <param name="len">缓存块长度</param>
            <param name="area">块级大小</param>
        </member>
        <member name="M:huqiang.Data.BlockInfo`1.Release">
            <summary>
            内存释放
            </summary>
        </member>
        <member name="M:huqiang.Data.BlockInfo`1.Zero">
            <summary>
            内存填0
            </summary>
        </member>
        <member name="M:huqiang.Data.BlockInfo`1.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="F:huqiang.Data.BlockBuffer.buffers">
            <summary>
            块级主缓存集合
            </summary>
        </member>
        <member name="M:huqiang.Data.BlockBuffer.Release(System.Int32,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="offset">偏移位置</param>
            <param name="size">尺寸</param>
        </member>
        <member name="M:huqiang.Data.BlockBuffer.Zero(System.Int32,System.Int32)">
            <summary>
            内存填0
            </summary>
            <param name="offset">偏移位置</param>
            <param name="size">尺寸</param>
        </member>
        <member name="P:huqiang.Data.BlockBuffer`1.AllMemory">
            <summary>
            所有非托管内存
            </summary>
        </member>
        <member name="P:huqiang.Data.BlockBuffer`1.UsageMemory">
            <summary>
            当前使用的非托管内存
            </summary>
        </member>
        <member name="P:huqiang.Data.BlockBuffer`1.PEMemory">
            <summary>
            pe信息占用的非托管内存
            </summary>
        </member>
        <member name="P:huqiang.Data.BlockBuffer`1.RemainBlock">
            <summary>
            剩余容量
            </summary>
        </member>
        <member name="M:huqiang.Data.BlockBuffer`1.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="block">每个块的大小</param>
            <param name="len">缓存总长度</param>
        </member>
        <member name="M:huqiang.Data.BlockBuffer`1.RegNew(System.Int32)">
            <summary>
            注册一个非托管内存
            </summary>
            <param name="len">数据长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.BlockBuffer`1.Release(System.Int32,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="offset">偏移位置</param>
            <param name="size">尺寸</param>
        </member>
        <member name="M:huqiang.Data.BlockBuffer`1.Zero(System.Int32,System.Int32)">
            <summary>
            数据填0
            </summary>
            <param name="offset">偏移位置</param>
            <param name="size">尺寸</param>
        </member>
        <member name="M:huqiang.Data.BlockBuffer`1.RegNew(huqiang.Data.BlockInfo{`0}@,System.Int32)">
            <summary>
            注册一个非托管内存
            </summary>
            <param name="blockInfo">接收的数据引用</param>
            <param name="len">数据长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.BlockBuffer`1.Expansion">
            <summary>
            容量不够时扩容
            </summary>
        </member>
        <member name="M:huqiang.Data.BlockBuffer`1.Dispose">
            <summary>
            释放所有内存资源
            </summary>
        </member>
        <member name="F:huqiang.Data.Box.center">
            <summary>
            中心点
            </summary>
        </member>
        <member name="F:huqiang.Data.Box.size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="M:huqiang.Data.Box.Contains(huqiang.Data.Box@,huqiang.Data.Box@)">
            <summary>
            两个盒子是否相撞
            </summary>
            <param name="abox"></param>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.Box.GetCenter(UnityEngine.Vector3[])">
            <summary>
            获取模型顶点的盒子
            </summary>
            <param name="vert"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.Box.MeshGetCenter(huqiang.Data.MeshData)">
            <summary>
            推荐使用GetMeshCenter
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.Box.ReLocation(UnityEngine.Vector3[],UnityEngine.Vector3@)">
            <summary>
            重新定位中心位置
            </summary>
            <param name="vert"></param>
            <param name="location"></param>
        </member>
        <member name="M:huqiang.Data.Box.GetMeshCenter(huqiang.Data.MeshData)">
            <summary>
            推荐使用
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.CharOperation">
            <summary>
            字符操作
            </summary>
        </member>
        <member name="M:huqiang.Data.CharOperation.Validate(huqiang.Data.CharacterValidation,System.String,System.Int32,System.Char)">
            <summary>
            字符串校验
            </summary>
            <param name="validat">校验类型</param>
            <param name="text">输入字符串</param>
            <param name="pos">字符位置</param>
            <param name="ch">插入字符</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.Validate(huqiang.Data.CharacterValidation,System.String,System.Int32)">
            <summary>
            字符串校验
            </summary>
            <param name="validat">校验类型</param>
            <param name="text">输入字符串</param>
            <param name="count">限制长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.ValidateInteger(System.String)">
            <summary>
            校验整数
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.ValidateDecimal(System.String)">
            <summary>
            校验小数
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.ValidateAlphanumeric(System.String)">
            <summary>
            校验字母数组组合
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.ValidateEmailAddress(System.String)">
            <summary>
            校验邮件地址
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetInt(System.String,System.Int32)">
            <summary>
            将字符串做整数矫正
            </summary>
            <param name="str">输入字符串</param>
            <param name="len">整数长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetInt(System.String)">
            <summary>
            将字符串做整数矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetUInt(System.String)">
            <summary>
            将字符串做无符号整数矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.Getlong(System.String)">
            <summary>
            将字符串做长整数矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetUlong(System.String)">
            <summary>
            将字符串做无符号长整数矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetFloat(System.String,System.Int32)">
            <summary>
            将字符串做浮点数矫正
            </summary>
            <param name="str">输入字符串</param>
            <param name="len">浮点长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetFloat(System.String)">
            <summary>
            将字符串做浮点数矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetDouble(System.String)">
            <summary>
            将字符串做双浮点数矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetIntArray(System.String,System.Int32)">
            <summary>
            将字符串做整数数组数矫正
            </summary>
            <param name="str">输入字符串</param>
            <param name="len">整数长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetIntArray(System.String)">
            <summary>
            将字符串做整数数组矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetLongArray(System.String)">
            <summary>
            将字符串做长整数数组数矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetFloatArray(System.String,System.Int32)">
            <summary>
            将字符串做浮点数数组矫正
            </summary>
            <param name="str">输入字符串</param>
            <param name="len">整数长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetFloatArray(System.String)">
            <summary>
            将字符串做浮点数组数矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.CharOperation.GetDoubleArray(System.String)">
            <summary>
            将字符串做双浮点数组数矫正
            </summary>
            <param name="str">输入字符串</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.Container`1">
            <summary>
            泛型容器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:huqiang.Data.Container`1.Count">
            <summary>
            当前容器中的内容数量
            </summary>
        </member>
        <member name="P:huqiang.Data.Container`1.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.Container`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="len"></param>
        </member>
        <member name="M:huqiang.Data.Container`1.Add(`0)">
            <summary>
            添加一个对象
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:huqiang.Data.Container`1.RemoveAt(System.Int32)">
            <summary>
            移除一个对象
            </summary>
            <param name="index">对象索引</param>
        </member>
        <member name="M:huqiang.Data.Container`1.Remove(`0)">
            <summary>
            移除一个对象
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:huqiang.Data.Container`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            根据条件移除一个对象
            </summary>
            <param name="action">委托</param>
        </member>
        <member name="M:huqiang.Data.Container`1.FindIndex(System.Func{`0,System.Boolean})">
            <summary>
            根据条件查询对象的索引
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.Container`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            根据条件查询某个对象
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.Container`1.FindAndSwap(System.Func{`0,System.Boolean},System.Int32)">
            <summary>
            根据条件交换某个对象
            </summary>
            <param name="action"></param>
            <param name="index">交换的目标索引</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.Container`1.Swap(System.Int32,System.Int32)">
            <summary>
            交换两个对象
            </summary>
            <param name="source">源对象索引</param>
            <param name="target">目标对象索引</param>
        </member>
        <member name="M:huqiang.Data.Container`1.Clear">
            <summary>
            清除所有对象
            </summary>
        </member>
        <member name="M:huqiang.Data.Container`1.Sort(System.Func{`0,`0,System.Boolean})">
            <summary>
            根据条件进行排序
            </summary>
            <param name="com">比较a,b返回真则b排在前面</param>
        </member>
        <member name="T:huqiang.Data.DataBuffer">
            <summary>
            C#的这些类型不能被继承：System.ValueType, System.Enum, System.Delegate, System.Array, etc.
            </summary>
        </member>
        <member name="F:huqiang.Data.DataBuffer.ReferenceCount.rc">
            <summary>
            Reference count
            </summary>
        </member>
        <member name="F:huqiang.Data.DataBuffer.ReferenceCount.type">
             <summary>
            byte[], String,FakeStruct,FakeStructArray,int[],float[],double[]
             </summary>
        </member>
        <member name="M:huqiang.Data.DataBuffer.AddData(System.Object)">
            <summary>
            添加一个引用类型的数据
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DataBuffer.AddData(System.Object,System.Int32)">
            <summary>
             添加一个引用类型的数据
            </summary>
            <param name="obj">数据对象</param>
            <param name="type">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DataBuffer.GetData(System.Int32)">
            <summary>
            提取一个对象
            </summary>
            <param name="index">对象索引</param>
            <returns></returns>
        </member>
        <member name="P:huqiang.Data.DataBuffer.Item(System.Int32)">
            <summary>
            提取对象索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DataBuffer.RemoveData(System.Int32)">
            <summary>
            移除某个对象,引用计数减一,当引用计数归0时,真正移除
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:huqiang.Data.DataBuffer.#ctor(System.Int32)">
            <summary>
            创建一个空白的缓存
            </summary>
            <param name="buffCount"></param>
        </member>
        <member name="M:huqiang.Data.DataBuffer.#ctor(System.Byte[])">
            <summary>
            从已有的数据进行恢复
            </summary>
            <param name="dat"></param>
        </member>
        <member name="M:huqiang.Data.DataBuffer.AddressDetection(System.Byte*,System.Int32)">
            <summary>
            检测地址是否合法
            </summary>
            <param name="bp"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DataBuffer.GetBytes(System.Int32)">
            <summary>
            将对象数据转换成byte[]并取出
            </summary>
            <param name="index">对象索引</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DataBuffer.ToBytes">
            <summary>
            将整个DataBuffer中的数据转换成byte[]
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DataBuffer.AddArray``1(``0[])">
            <summary>
            添加一个数组对象,此对象元素类型必须为非托管结构体
            </summary>
            <typeparam name="T">非托管结构体</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DataBuffer.GetArray``1(System.Int32)">
            <summary>
            获取一个数组对象,此对象元素类型必须为非托管结构体
            </summary>
            <typeparam name="T">非托管结构体</typeparam>
            <param name="index">对象索引</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.Initializer">
            <summary>
            DataBuffer存储的预制体初始化器
            </summary>
        </member>
        <member name="M:huqiang.Data.Initializer.Initialiezd(huqiang.Data.FakeStruct,UnityEngine.Component)">
            <summary>
            当预制体创建好时调用此函数
            </summary>
            <param name="fake"></param>
            <param name="com"></param>
        </member>
        <member name="M:huqiang.Data.Initializer.Reset(System.Object)">
            <summary>
            当再次初始化时,先调用此函数重置初始化器
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:huqiang.Data.Initializer.Done">
            <summary>
            初始化完毕
            </summary>
        </member>
        <member name="T:huqiang.Data.DataLoader">
            <summary>
            数据对象载入器
            </summary>
        </member>
        <member name="F:huqiang.Data.DataLoader.gameobjectBuffer">
            <summary>
            游戏对象管理缓存器
            </summary>
        </member>
        <member name="M:huqiang.Data.DataLoader.LoadToComponent(huqiang.Data.FakeStruct,UnityEngine.Component,huqiang.Data.FakeStruct)">
            <summary>
            载入组件数据
            </summary>
            <param name="fake">假结构体</param>
            <param name="com">unity组件</param>
            <param name="main"></param>
        </member>
        <member name="M:huqiang.Data.DataLoader.LoadToObject(huqiang.Data.FakeStruct,UnityEngine.Component,huqiang.Data.Initializer)">
            <summary>
            载入游戏对象数据
            </summary>
            <param name="fake">假结构体</param>
            <param name="com">unity组件</param>
            <param name="initializer"></param>
        </member>
        <member name="M:huqiang.Data.DataLoader.LoadFromObject(UnityEngine.Component,huqiang.Data.DataBuffer)">
            <summary>
            将游戏对象数据写入假结构体
            </summary>
            <param name="com">unity组件</param>
            <param name="buffer">DataBuffer</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.DownloadManager">
            <summary>
            下载管理器
            </summary>
        </member>
        <member name="F:huqiang.Data.DownloadManager.Mission">
            <summary>
            下载任务列表
            </summary>
        </member>
        <member name="M:huqiang.Data.DownloadManager.UpdateMission">
            <summary>
            更新任务列表状态
            </summary>
        </member>
        <member name="M:huqiang.Data.DownloadManager.FindMission(System.String)">
            <summary>
            查找某条下载任务
            </summary>
            <param name="cmd">任务指令</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DownloadManager.DownloadAsset(System.String,System.String,System.String,System.Object,System.Action{huqiang.Data.DownLoadMission},System.Int32)">
            <summary>
            下载资源
            </summary>
            <param name="cmd">任务指令</param>
            <param name="name">文件名</param>
            <param name="url">远程地址</param>
            <param name="context">联系上下文</param>
            <param name="done">下载完成后的回调</param>
            <param name="version">版本号</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.DownLoadMission">
            <summary>
            下载任务
            </summary>
        </member>
        <member name="F:huqiang.Data.DownLoadMission.cmd">
            <summary>
            下载指令,用于做回调时的比对
            </summary>
        </member>
        <member name="F:huqiang.Data.DownLoadMission.DataContext">
            <summary>
            联系上下文
            </summary>
        </member>
        <member name="F:huqiang.Data.DownLoadMission.result">
            <summary>
            下载的数据
            </summary>
        </member>
        <member name="F:huqiang.Data.DownLoadMission.type">
            <summary>
            下载的类型
            </summary>
        </member>
        <member name="F:huqiang.Data.DownLoadMission.filename">
            <summary>
            文件名
            </summary>
        </member>
        <member name="F:huqiang.Data.DownLoadMission.url">
            <summary>
            远程地址
            </summary>
        </member>
        <member name="F:huqiang.Data.DownLoadMission.err">
            <summary>
            错误编码
            </summary>
        </member>
        <member name="F:huqiang.Data.DownLoadMission.version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="F:huqiang.Data.DownLoadMission.OnDone">
            <summary>
            下载完成的回调
            </summary>
        </member>
        <member name="T:huqiang.Data.SpriteRectInfo">
            <summary>
            精灵矩形信息
            </summary>
        </member>
        <member name="F:huqiang.Data.SpriteRectInfo.txtSize">
            <summary>
            纹理尺寸
            </summary>
        </member>
        <member name="F:huqiang.Data.SpriteRectInfo.rect">
            <summary>
            矩形
            </summary>
        </member>
        <member name="F:huqiang.Data.SpriteRectInfo.pivot">
            <summary>
            轴心
            </summary>
        </member>
        <member name="M:huqiang.Data.ElementAsset.LoadAssetsAsync(System.String,System.Action{huqiang.Progress,UnityEngine.AssetBundleCreateRequest})">
            <summary>
            异步载入一个资源包,返回进度管理器
            </summary>
            <param name="path">文件路径</param>
            <param name="callback">载入完毕的回调</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.LoadAssets(System.String)">
            <summary>
            同步载入一个资源包
            </summary>
            <param name="path">文件路劲</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.AddBundle(System.String)">
            <summary>
            添加一个资源包,默认路径为Application.streamingAssetsPath
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="F:huqiang.Data.ElementAsset.bundles">
            <summary>
            所有的资源包
            </summary>
        </member>
        <member name="M:huqiang.Data.ElementAsset.FindResource``1(System.String,System.String)">
            <summary>
            查找某个资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="bundle">资源包名</param>
            <param name="tname">资源名</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.FindTexture(System.String,System.String)">
            <summary>
            查找纹理
            </summary>
            <param name="bundle">资源包名</param>
            <param name="tname">纹理名</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.FindSprite(System.String,System.String,System.String)">
            <summary>
            查找精灵
            </summary>
            <param name="bundle">资源包名</param>
            <param name="tname">纹理名</param>
            <param name="name">精灵名</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.TxtureFormAsset(System.String)">
            <summary>
            使用纹理名称查询资源包名
            </summary>
            <param name="name">纹理名</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.FindBundle(System.String)">
            <summary>
            查询资源包
            </summary>
            <param name="name">资源包名</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.FindSprites(System.String,System.String,System.String[])">
            <summary>
            查询精灵组
            </summary>
            <param name="bundle">资源包名</param>
            <param name="tname">纹理名</param>
            <param name="names">精灵名数组,如果为空,则返回该纹理上的所有精灵</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.FindSprites(System.String,System.String,System.String[][])">
            <summary>
            查询二维精灵组
            </summary>
            <param name="bundle">资源包名</param>
            <param name="tname">纹理名</param>
            <param name="names">精灵名二维数组</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.AddSpriteData(System.String,System.Byte[])">
            <summary>
            添加精灵信息数据
            </summary>
            <param name="name">数据包名</param>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.Data.ElementAsset.RemoveSpriteData(System.String)">
            <summary>
            移除某个精灵数据
            </summary>
            <param name="name">数据包名</param>
        </member>
        <member name="M:huqiang.Data.ElementAsset.ClearSpriteData">
            <summary>
            清除所有精灵包数据
            </summary>
        </member>
        <member name="M:huqiang.Data.ElementAsset.FindSpriteUV(System.String,System.String,UnityEngine.Rect@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            查询精灵的uv
            </summary>
            <param name="tName">纹理名</param>
            <param name="sName">精灵名</param>
            <param name="rect">精灵矩形</param>
            <param name="txtSize">纹理尺寸</param>
            <param name="pivot">精灵轴心</param>
        </member>
        <member name="M:huqiang.Data.ElementAsset.FindSpriteUVs(System.String,System.String[])">
            <summary>
            查询精灵的uv
            </summary>
            <param name="tName">纹理名</param>
            <param name="sns">精灵名数组</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.ElementAsset.LoadAssets``1(System.String,System.String)">
            <summary>
            载入资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="bundle">资源包名</param>
            <param name="name">资源名</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.FakeStringArray">
            <summary>
            假字符串数组,用来将字符串数组转换到byte[]
            </summary>
        </member>
        <member name="M:huqiang.Data.FakeStringArray.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="dat">字符串数组</param>
        </member>
        <member name="M:huqiang.Data.FakeStringArray.#ctor(huqiang.Data.DataBuffer,System.Int32*,System.Int32)">
            <summary>
            构造函数,将指针地址数据取出转化为字符串数组
            </summary>
            <param name="data">数据缓存</param>
            <param name="point">内存地址</param>
            <param name="len">数组长度</param>
        </member>
        <member name="M:huqiang.Data.FakeStringArray.ToBytes">
            <summary>
            用来将字符串数组转换到byte[]
            </summary>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.FakeStruct">
            <summary>
            假结构体
            </summary>
        </member>
        <member name="M:huqiang.Data.FakeStruct.ReadFromStruct(System.Void*)">
            <summary>
            从目标结构体中复制数据
            </summary>
            <param name="tar">目标结构地址</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.WitreToStruct(System.Void*)">
            <summary>
            将数据写入目标结构体
            </summary>
            <param name="tar">目标结构体地址</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.ReadFromStruct(System.Void*,System.Int32,System.Int32)">
            <summary>
            从目标结构体中复制数据
            </summary>
            <param name="tar">目标结构地址</param>
            <param name="start">本结构体开始位置</param>
            <param name="size">复制数据长度</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.WitreToStruct(System.Void*,System.Int32,System.Int32)">
            <summary>
            将数据写入目标结构体
            </summary>
            <param name="tar">目标结构地址</param>
            <param name="start">本结构体开始位置</param>
            <param name="size">复制数据长度</param>
        </member>
        <member name="F:huqiang.Data.FakeStruct.ip">
            <summary>
            本结构体的非托管内存地址
            </summary>
        </member>
        <member name="P:huqiang.Data.FakeStruct.Length">
            <summary>
            元素长度
            </summary>
        </member>
        <member name="F:huqiang.Data.FakeStruct.buffer">
            <summary>
            数据缓存器
            </summary>
        </member>
        <member name="M:huqiang.Data.FakeStruct.#ctor(huqiang.Data.DataBuffer,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="db">数据缓存器</param>
            <param name="size">元素个数</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.#ctor(huqiang.Data.DataBuffer,System.Int32,System.Int32*)">
            <summary>
            构造函数,复制目标地址的数据
            </summary>
            <param name="db">数据缓存器</param>
            <param name="size">元素个数</param>
            <param name="point">源数据地址</param>
        </member>
        <member name="P:huqiang.Data.FakeStruct.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns>32位整数</returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.SetData(System.Int32,System.Object)">
            <summary>
            添加一个对象型数据，数据类型必须为DataType中任意一种
            </summary>
            <param name="index">元素位置</param>
            <param name="dat">数据对象</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.GetData``1(System.Int32)">
            <summary>
            获取一个对象型数据，数据类型必须为DataType中任意一种
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="index">元素位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.GetData(System.Int32)">
            <summary>
            获取一个对象型数据，数据类型必须为DataType中任意一种
            </summary>
            <param name="index">元素位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.AddArray``1(System.Int32,``0[])">
            <summary>
            添加一个非托管类型的结构体数组
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="index">元素位置</param>
            <param name="obj">对象数据</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.GetArray``1(System.Int32)">
            <summary>
            获取一个非托管类型的结构体数组
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="index">元素位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.SetData(System.Int32*,System.Object)">
            <summary>
            添加一个对象数据
            </summary>
            <param name="addr">内存地址</param>
            <param name="dat">对象数据</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.GetData``1(System.Int32*)">
            <summary>
            获取一个对象数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="addr">内存地址</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.SetInt64(System.Int32,System.Int64)">
            <summary>
            设置一个64位的整数值
            </summary>
            <param name="index">元素位置</param>
            <param name="value">值</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.GetInt64(System.Int32)">
            <summary>
            获取一个64位的整数值
            </summary>
            <param name="index">元素位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.SetFloat(System.Int32,System.Single)">
            <summary>
            设置一个浮点数
            </summary>
            <param name="index">元素位置</param>
            <param name="value">值</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.GetFloat(System.Int32)">
            <summary>
            获取一个浮点数
            </summary>
            <param name="index">元素位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.SetDouble(System.Int32,System.Double)">
            <summary>
            设置一个双浮点数
            </summary>
            <param name="index">元素位置</param>
            <param name="value">值</param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.GetDouble(System.Int32)">
            <summary>
            获取一个双浮点数
            </summary>
            <param name="index">元素位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.ToBytes">
            <summary>
            将假结构体中的数据导出位byte[]
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.Extend(System.Int32)">
            <summary>
            进行元素扩展
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:huqiang.Data.FakeStruct.Seek(System.Int32)">
            <summary>
            设置位置索引
            </summary>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.WriteInt(System.Int32)">
            <summary>
            写入一个整数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.WriteFloat(System.Single)">
            <summary>
            写入一个浮点数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.WriteInt64(System.Int64)">
            <summary>
            写入一个长整数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.WriteDouble(System.Double)">
            <summary>
            写入一个双浮点数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.WriteData(System.Object)">
            <summary>
            写入一个对象数据,数据类型必须为DataType中任意一种
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.WriteArray``1(``0[])">
            <summary>
            写入一个非托管结构体数组
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.ReadInt">
            <summary>
            读取一个整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.ReadFloat">
            <summary>
            读取一个浮点数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.ReadInt64">
            <summary>
            读取一个长整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.ReadDouble">
            <summary>
            读取一个双浮点数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.ReadData``1">
            <summary>
            读取一个数据对象,数据类型必须为DataType中任意一种
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStruct.ReadArray``1">
            <summary>
            读取一个非托管结构体数组
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="F:huqiang.Data.FakeStructArray.ip">
            <summary>
            本结构体的非托管内存地址
            </summary>
        </member>
        <member name="F:huqiang.Data.FakeStructArray.buffer">
            <summary>
            数据缓存
            </summary>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.#ctor(huqiang.Data.DataBuffer,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="db"></param>
            <param name="size">元素个数</param>
            <param name="len">数组长度</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.#ctor(huqiang.Data.DataBuffer,System.Int32,System.Int32,System.Int32*)">
            <summary>
            构造函数,复制目标地址的数据
            </summary>
            <param name="db">数据缓存</param>
            <param name="size">元素尺寸</param>
            <param name="len">数据长度</param>
            <param name="point">内存地址</param>
        </member>
        <member name="P:huqiang.Data.FakeStructArray.StructSize">
            <summary>
            结构体尺寸
            </summary>
        </member>
        <member name="P:huqiang.Data.FakeStructArray.Length">
            <summary>
            数组长度
            </summary>
        </member>
        <member name="P:huqiang.Data.FakeStructArray.Item(System.Int32)">
            <summary>
            索引器,获取元素地址
            </summary>
            <param name="index">元素索引</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.GetInt32(System.Int32,System.Int32)">
            <summary>
            获取整数
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.SetInt32(System.Int32,System.Int32,System.Int32)">
            <summary>
            设置一个整数值
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <param name="value">整数值</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.GetInt64(System.Int32,System.Int32)">
            <summary>
            获取长整数
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.SetInt64(System.Int32,System.Int32,System.Int64)">
            <summary>
            设置一个长整数值
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <param name="value">长整数值</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.GetFloat(System.Int32,System.Int32)">
            <summary>
            获取浮点数
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.SetFloat(System.Int32,System.Int32,System.Single)">
            <summary>
            设置一个浮点数值
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <param name="value">浮点数值</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.GetDouble(System.Int32,System.Int32)">
            <summary>
            获取双浮点数
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.SetDouble(System.Int32,System.Int32,System.Double)">
            <summary>
            设置一个双浮点数值
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <param name="value">双浮点数值</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.SetData(System.Int32,System.Int32,System.Object)">
            <summary>
            设置一个数据对象,数据类型必须为DataType中任意一种
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <param name="dat">数据对象</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.GetData(System.Int32,System.Int32)">
            <summary>
            获取一个数据对象,数据类型必须为DataType中任意一种
            </summary>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ToBytes">
            <summary>
            将假结构体数组中的数据导出位byte[]
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ReadFromStruct(System.Int32,System.Void*)">
            <summary>
            从目标结构体中复制数据
            </summary>
            <param name="index">元素索引</param>
            <param name="tar">目标结构体地址</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.WitreToStruct(System.Int32,System.Void*)">
            <summary>
            将数据写入目标结构体
            </summary>
            <param name="index">元素索引</param>
            <param name="tar">目标结构体地址</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ReadFromStruct(System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
            从目标结构体中复制数据
            </summary>
            <param name="index">元素索引</param>
            <param name="tar">目标结构地址</param>
            <param name="start">本结构体开始位置</param>
            <param name="size">复制数据长度</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.WitreToStruct(System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
            将数据写入目标结构体
            </summary>
            <param name="index">元素索引</param>
            <param name="tar">目标结构地址</param>
            <param name="start">本结构体开始位置</param>
            <param name="size">复制数据长度</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ReadFromArray(System.IntPtr)">
            <summary>
            从内存地址中复制数据
            </summary>
            <param name="p">目标地址</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.WriteToArray(System.IntPtr)">
            <summary>
            将数据写入到内存地址中
            </summary>
            <param name="p">目标地址</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.SetData(System.Int32*,System.Object)">
            <summary>
            设置一个数据对象,数据类型必须为DataType中任意一种
            </summary>
            <param name="addr">内存地址</param>
            <param name="dat">数据对象</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.GetData``1(System.Int32*)">
            <summary>
            获取一个数据对象,数据类型必须为DataType中任意一种
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="addr">内存地址</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.GetData``1(System.Int32,System.Int32)">
            <summary>
            获取一个数据对象,数据类型必须为DataType中任意一种
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.AddArray``1(System.Int32,System.Int32,``0[])">
            <summary>
            设置一个非托管结构体数组对象
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <param name="dat">数组对象</param>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.GetArray``1(System.Int32,System.Int32)">
            <summary>
            设置一个非托管结构体数组对象
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="index">元素索引</param>
            <param name="offset">子元素偏移</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.Seek(System.Int32,System.Int32)">
            <summary>
            设置位置索引
            </summary>
            <param name="index">索引位置</param>
            <param name="os">子元素偏移</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.WriteInt(System.Int32)">
            <summary>
            写入一个整数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.WriteFloat(System.Single)">
            <summary>
            写入一个浮点数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.WriteInt64(System.Int64)">
            <summary>
            写入一个长整数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.WriteDouble(System.Double)">
            <summary>
            写入一个双浮点数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.WriteData(System.Object)">
            <summary>
            写入一个对象数据,数据类型必须为DataType中任意一种
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.WriteArray``1(``0[])">
            <summary>
            写入一个非托管结构体数组
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ReadInt">
            <summary>
            读取一个整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ReadFloat">
            <summary>
            读取一个浮点数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ReadInt64">
            <summary>
            读取一个长整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ReadDouble">
            <summary>
            读取一个双浮点数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ReadData``1">
            <summary>
            读取一个数据对象,数据类型必须为DataType中任意一种
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.FakeStructArray.ReadArray``1">
            <summary>
            读取一个非托管结构体数组
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.TypeInfo">
            <summary>
            类型信息
            </summary>
        </member>
        <member name="M:huqiang.Data.TypeInfo.Compare(System.Object)">
            <summary>
            类型比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.ComponentInfo`1">
            <summary>
            unity 组件比较器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:huqiang.Data.ComponentInfo`1.#ctor">
            <summary>
            构造函数,初始化类型信息
            </summary>
        </member>
        <member name="M:huqiang.Data.ComponentInfo`1.Compare(System.Object)">
            <summary>
            比较实例化对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.ReflectionModel">
            <summary>
            反射模型
            </summary>
        </member>
        <member name="F:huqiang.Data.ReflectionModel.name">
            <summary>
            类名
            </summary>
        </member>
        <member name="F:huqiang.Data.ReflectionModel.field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:huqiang.Data.ReflectionModel.Value">
            <summary>
            反射值
            </summary>
        </member>
        <member name="T:huqiang.Data.TempReflection">
            <summary>
            
            </summary>
        </member>
        <member name="F:huqiang.Data.TempReflection.Top">
            <summary>
            数组的顶部指针
            </summary>
        </member>
        <member name="F:huqiang.Data.TempReflection.All">
            <summary>
            对象的所有字段反射模型
            </summary>
        </member>
        <member name="M:huqiang.Data.TempReflection.ObjectFields(System.Type)">
            <summary>
            将类型中的所有公开字段转换成临时反射类
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.TempReflection.ObjectFields(System.Object)">
            <summary>
            将对象中的所有公开字段转换成临时反射类
            </summary>
            <param name="obj">对象实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.#ctor(UnityEngine.Transform)">
            <summary>
            构造函数,设置回收对象的父物体
            </summary>
            <param name="buffer">父对象</param>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.RegComponent(huqiang.Data.TypeInfo)">
            <summary>
            注册一个组件
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.GetTypeIndex(UnityEngine.Component)">
            <summary>
            获取组件的索引
            </summary>
            <param name="com">组件实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.GetTypeIndex(System.String)">
            <summary>
            获取组件索引
            </summary>
            <param name="name">组件名称</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.GetTypeIndex``1">
            <summary>
            获取组件索引
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.GetTypeID(UnityEngine.Component)">
            <summary>
            获取组件的ID
            </summary>
            <param name="com"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.GetTypeID(UnityEngine.Component[])">
            <summary>
            获取一组组件的ID
            </summary>
            <param name="com"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.CreateModelBuffer(System.Int64,System.Int32)">
            <summary>
            创建一个模型缓存
            </summary>
            <param name="type"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.CreateNew(System.Int64)">
            <summary>
            通过类型创建一个对象
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.RecycleGameObject(UnityEngine.GameObject)">
            <summary>
            回收游戏对象
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.RecycleChild(UnityEngine.GameObject)">
            <summary>
            回收对象的子物体
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.RecycleChild(UnityEngine.GameObject,System.String[])">
            <summary>
            回收除开相应名称意外的对象的子物体
            </summary>
            <param name="game">游戏对象</param>
            <param name="keep">要保留子对象的名称数组</param>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.FindDataLoader(UnityEngine.Component)">
            <summary>
            查询组件的数据载入器
            </summary>
            <param name="com">组件实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.GetDataLoader(System.Int32)">
            <summary>
            获取数据载入器
            </summary>
            <param name="Index">索引id</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.FindChild(huqiang.Data.FakeStruct,System.String)">
            <summary>
            查询transform的子物体
            </summary>
            <param name="fake"></param>
            <param name="childName"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.Clone(huqiang.Data.FakeStruct)">
            <summary>
            克隆一个预制体对象
            </summary>
            <param name="fake"></param>
        </member>
        <member name="M:huqiang.Data.GameobjectBuffer.Clone(huqiang.Data.FakeStruct,huqiang.Data.Initializer)">
            <summary>
            克隆某个游戏对象
            </summary>
            <param name="fake">假结构体数据</param>
            <param name="initializer">初始化器</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.INIReader">
            <summary>
            ini配置文件读取器
            </summary>
        </member>
        <member name="F:huqiang.Data.INIReader.sections">
            <summary>
            所有节点
            </summary>
        </member>
        <member name="M:huqiang.Data.INIReader.FindSection(System.String)">
            <summary>
            查询节点
            </summary>
            <param name="sec">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.INIReader.Serializal``1(System.String)">
            <summary>
            序列化节点
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.INIReader.Serializal(System.Type,System.Object,huqiang.Data.INISection)">
            <summary>
            序列化节点
            </summary>
            <param name="typ">类型</param>
            <param name="t">实例</param>
            <param name="sec">节点</param>
        </member>
        <member name="M:huqiang.Data.INIReader.LoadFromFile(System.String)">
            <summary>
            从文件中载入数据
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:huqiang.Data.INIReader.LoadData(System.Byte[])">
            <summary>
            载入数据
            </summary>
            <param name="bytes">数据</param>
        </member>
        <member name="M:huqiang.Data.INIReader.LoadData(System.String[])">
            <summary>
            载入数据
            </summary>
            <param name="ss">字符串数组</param>
        </member>
        <member name="M:huqiang.Data.INIReader.RemoveSection(System.String)">
            <summary>
            移除某个节点
            </summary>
            <param name="name">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.INIReader.AddSection(huqiang.Data.INISection)">
            <summary>
            添加节点
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:huqiang.Data.INIReader.GetString">
            <summary>
            将所有数据转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.INIReader.WriteToFile(System.String)">
            <summary>
            将所有数据写入文件
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="T:huqiang.Data.KeyValue">
            <summary>
            普通键值对
            </summary>
        </member>
        <member name="T:huqiang.Data.IniMate">
            <summary>
            ini数组数据
            </summary>
        </member>
        <member name="T:huqiang.Data.INISection">
            <summary>
            ini节点
            </summary>
        </member>
        <member name="F:huqiang.Data.INISection.Name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="F:huqiang.Data.INISection.Values">
            <summary>
            键值对数据集合
            </summary>
        </member>
        <member name="F:huqiang.Data.INISection.Mates">
            <summary>
            数组数据集合
            </summary>
        </member>
        <member name="M:huqiang.Data.INISection.Add(System.String,System.String)">
            <summary>
            添加一组数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:huqiang.Data.INISection.Add(System.String,System.String,System.String)">
            <summary>
            添加数组的值
            </summary>
            <param name="index">元素索引</param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:huqiang.Data.INISection.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.JsonExtand">
            <summary>
            用于解决unity自带json无法直接序列化数组对象的问题
            </summary>
        </member>
        <member name="M:huqiang.Data.JsonExtand.ToJson(System.Object[])">
            <summary>
            将数组对象转换成json串
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.JsonExtand.FromJson``1(System.String)">
            <summary>
            将json串转换成数组对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonArray"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.LocalFileManager.WriteData(System.String,System.String,System.Byte[])">
            <summary>
            将数据写入具有允许权限的磁盘
            </summary>
            <param name="type">类型</param>
            <param name="name">文件名</param>
            <param name="data">数据</param>
        </member>
        <member name="M:huqiang.Data.LocalFileManager.ReadData(System.String,System.String)">
            <summary>
            读取文件数据
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.LocalFileManager.FindAssetBundle(System.String)">
            <summary>
            查询assetbundle的完整路径
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.LocalFileManager.LoadAssetBundle(System.String)">
            <summary>
            读取assetbundle
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.LocalFileManager.DeleteAssetBundle(System.String)">
            <summary>
            删除当前的AssetBundle
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:huqiang.Data.LocalFileManager.GetBundleVersion(System.String)">
            <summary>
            查询当前AssetBundle的版本
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.LocalFileManager.SaveAssetBundle(System.String,System.Int32,System.Byte[])">
            <summary>
            保存一个AssetBundle
            </summary>
            <param name="name">名称</param>
            <param name="version">版本号</param>
            <param name="data">数据</param>
        </member>
        <member name="M:huqiang.Data.LocalFileManager.ClearAssetBundle">
            <summary>
            删除所有AssetBundle
            </summary>
        </member>
        <member name="T:huqiang.Data.LocalSetting">
            <summary>
            本地配置管理,未完善,建议使用自带的playerprefs
            </summary>
        </member>
        <member name="T:huqiang.Data.LoopBuffer`1">
            <summary>
            循环使用缓存器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:huqiang.Data.LoopBuffer`1.Lenth">
            <summary>
            缓存长度
            </summary>
        </member>
        <member name="M:huqiang.Data.LoopBuffer`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="len"></param>
        </member>
        <member name="M:huqiang.Data.LoopBuffer`1.Push(`0)">
            <summary>
            推入一个数据
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:huqiang.Data.LoopBuffer`1.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.LoopBuffer`1.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="T:huqiang.Data.MeshData">
            <summary>
            网格数据,将unitymesh中的网格数据转换成二进制存储或者读取
            </summary>
        </member>
        <member name="F:huqiang.Data.MeshData.DefColor">
            <summary>
            默认颜色值
            </summary>
        </member>
        <member name="F:huqiang.Data.MeshData.subMeshCount">
            <summary>
            子网格数量
            </summary>
        </member>
        <member name="F:huqiang.Data.MeshData.name">
            <summary>
            游戏对象名称
            </summary>
        </member>
        <member name="M:huqiang.Data.MeshData.#ctor(System.Byte[])">
            <summary>
            从二进制数据中读取网格信息
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:huqiang.Data.MeshData.LoadFromBytes(System.Byte*)">
            <summary>
            从二进制数据中读取网格信息
            </summary>
            <param name="bp">数据指针</param>
        </member>
        <member name="M:huqiang.Data.MeshData.WriteToStream(System.IO.Stream)">
            <summary>
            将网格数据写入流
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:huqiang.Data.MeshData.WriteToFile(System.String)">
            <summary>
            将网格数据写入文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:huqiang.Data.MeshData.WriteSubTri(System.IO.Stream,System.Int32[][])">
            <summary>
            4字节标记,4字节总长度,4字节数组长度,数据
            </summary>
            <param name="stream"></param>
            <param name="tris"></param>
        </member>
        <member name="M:huqiang.Data.MeshData.CreateGameObject(System.Action{huqiang.Data.MeshData,UnityEngine.GameObject})">
            <summary>
            创建实例对象
            </summary>
            <param name="action">对象初始化时的回调函数</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.MeshData.CreateNormal">
            <summary>
            当网格没有法线时,使用此函数计算法线
            </summary>
        </member>
        <member name="M:huqiang.Data.MeshData.LoadFromGameObject(UnityEngine.Transform,System.Action{huqiang.Data.MeshData,UnityEngine.GameObject})">
            <summary>
            将实例对象的网格数据转出
            </summary>
            <param name="game"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.MeshData.FindAssociatedMesh(UnityEngine.GameObject)">
            <summary>
            查询与实例相关的网格数据
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Data.Msg">
            <summary>
            通信用的消息标准
            </summary>
        </member>
        <member name="F:huqiang.Data.Msg.Type">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="F:huqiang.Data.Msg.Cmd">
            <summary>
            消息指令
            </summary>
        </member>
        <member name="F:huqiang.Data.Msg.Error">
            <summary>
            错误代码,0为无错误
            </summary>
        </member>
        <member name="F:huqiang.Data.Msg.Args">
            <summary>
            附带参数
            </summary>
        </member>
        <member name="T:huqiang.Data.QueueBuffer`1">
            <summary>
            用于两个线程无锁交互,a线程写入内容,b线程移除内容
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:huqiang.Data.QueueBuffer`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="len"></param>
        </member>
        <member name="P:huqiang.Data.QueueBuffer`1.BufferLenth">
            <summary>
            缓存大小
            </summary>
        </member>
        <member name="P:huqiang.Data.QueueBuffer`1.Count">
            <summary>
            有效内容个数
            </summary>
        </member>
        <member name="T:huqiang.Data.QueueBufferS`1">
            <summary>
            用于两个线程无锁交互,a线程写入内容,b线程移除内容
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:huqiang.Data.QueueBufferS`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="len"></param>
        </member>
        <member name="P:huqiang.Data.QueueBufferS`1.BufferLenth">
            <summary>
            缓存大小
            </summary>
        </member>
        <member name="P:huqiang.Data.QueueBufferS`1.Count">
            <summary>
            有效内容个数
            </summary>
        </member>
        <member name="T:huqiang.Data.DisorderlyQueueS`1">
            <summary>
            用于两个线程无锁交互,a线程写入内容,b线程可以乱序移除内容
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:huqiang.Data.DisorderlyQueueS`1.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DisorderlyQueueS`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="len"></param>
        </member>
        <member name="P:huqiang.Data.DisorderlyQueueS`1.Count">
            <summary>
            有效内容个数
            </summary>
        </member>
        <member name="M:huqiang.Data.DisorderlyQueueS`1.Add(`0)">
            <summary>
            添加一个内容
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DisorderlyQueueS`1.AddRange(`0[])">
            <summary>
            添加一组内容
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.DisorderlyQueueS`1.RemoveAt(System.Int32)">
            <summary>
            移除某个内容
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:huqiang.Data.DisorderlyQueueS`1.Clear">
            <summary>
            清除所有内容
            </summary>
        </member>
        <member name="T:huqiang.Data.RecordManager">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="M:huqiang.Data.RecordManager.WriteRecord(System.String,System.String,System.String,System.Int32)">
            <summary>
            写入记录
            </summary>
            <param name="type">类型</param>
            <param name="name">名称</param>
            <param name="data">数据</param>
            <param name="tag">标记</param>
        </member>
        <member name="M:huqiang.Data.RecordManager.ReleaseAll">
            <summary>
            释放所有文件流
            </summary>
        </member>
        <member name="M:huqiang.Data.RecordManager.ReleaseRecord(System.String,System.String)">
            <summary>
            释放某个文件流记录
            </summary>
            <param name="type">类型</param>
            <param name="name">名称</param>
        </member>
        <member name="M:huqiang.Data.RecordManager.ReadRecord(System.String,System.String)">
            <summary>
            读取记录
            </summary>
            <param name="type">类型</param>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.RecordManager.DeleteRecord(System.String,System.String)">
            <summary>
            删除日志记录的文件
            </summary>
            <param name="type">类型</param>
            <param name="name">名称</param>
        </member>
        <member name="M:huqiang.Data.RecordManager.DeleteRecords(System.String)">
            <summary>
            删除某个类型的日志记录
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="F:huqiang.Data.SpriteDataS.name">
            <summary>
            精灵名称
            </summary>
        </member>
        <member name="F:huqiang.Data.SpriteDataS.txtSize">
            <summary>
            纹理名称
            </summary>
        </member>
        <member name="F:huqiang.Data.SpriteDataS.rect">
            <summary>
            精灵矩形
            </summary>
        </member>
        <member name="F:huqiang.Data.SpriteDataS.pivot">
            <summary>
            精灵轴心
            </summary>
        </member>
        <member name="F:huqiang.Data.SpriteDataS.Size">
            <summary>
            此结构体尺寸
            </summary>
        </member>
        <member name="F:huqiang.Data.SpriteDataS.ElementSize">
            <summary>
            此结构体元素个数
            </summary>
        </member>
        <member name="T:huqiang.Data.SpriteData">
            <summary>
            精灵数据
            </summary>
        </member>
        <member name="M:huqiang.Data.SpriteData.AddSprite(UnityEngine.Sprite)">
            <summary>
            添加精灵
            </summary>
            <param name="sprite">精灵</param>
        </member>
        <member name="M:huqiang.Data.SpriteData.Save(System.String,System.String)">
            <summary>
            保存精灵信息为二进制数据
            </summary>
            <param name="name">数据包名</param>
            <param name="path">文件路径</param>
        </member>
        <member name="M:huqiang.Data.SpriteData.Clear">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="M:huqiang.Data.SpriteData.LoadSpriteData(System.Byte[])">
            <summary>
            载入精灵数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:huqiang.Data.SwapBuffer`2.Exchange(System.Func{`0,`1,System.Boolean},`1)">
            <summary>
            将一个符合条件的源项目移动到目标缓存,并返回
            </summary>
            <param name="condition">判定委托</param>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.SwapBuffer`2.Push(`0)">
            <summary>
            给目标添加一个项目
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:huqiang.Data.SwapBuffer`2.Pop">
            <summary>
            从源数据中移除一条数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.SwapBuffer`2.Done">
            <summary>
            本次所有交换操作完毕
            </summary>
        </member>
        <member name="M:huqiang.Data.SwapBuffer`2.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="P:huqiang.Data.SwapBuffer`2.Length">
            <summary>
            源数组的长度
            </summary>
        </member>
        <member name="P:huqiang.Data.SwapBuffer`2.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:huqiang.Data.TransfromData.type">
            <summary>
            对象类型, 所有组件的位或值
            </summary>
        </member>
        <member name="F:huqiang.Data.TransfromData.size">
            <summary>
            UI元素尺寸
            </summary>
        </member>
        <member name="F:huqiang.Data.TransfromData.pivot">
            <summary>
            轴心
            </summary>
        </member>
        <member name="F:huqiang.Data.TransfromData.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:huqiang.Data.TransfromData.tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="F:huqiang.Data.TransfromData.coms">
            <summary>
            int32数组,高16位为索引,低16位为类型
            </summary>
        </member>
        <member name="F:huqiang.Data.TransfromData.child">
            <summary>
            int16数组
            </summary>
        </member>
        <member name="F:huqiang.Data.TransfromData.ex">
            <summary>
            附加信息,用于存储helper中写入的数据
            </summary>
        </member>
        <member name="M:huqiang.Data.TransfromLoader.GetComponent(huqiang.Data.FakeStruct,System.String)">
            <summary>
            从假结构体中找到该类型的数据
            </summary>
            <param name="fake">Tranfrom的假结构体</param>
            <param name="type">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Data.TransfromLoader.LoadToObject(huqiang.Data.FakeStruct,UnityEngine.Component,huqiang.Data.Initializer)">
            <summary>
            将假结构体中的数据载入到组件实体中
            </summary>
            <param name="fake">假结构体数据</param>
            <param name="com">unity组件</param>
            <param name="initializer">初始化器,用于反射</param>
        </member>
        <member name="M:huqiang.Data.TransfromLoader.LoadFromObject(UnityEngine.Component,huqiang.Data.DataBuffer)">
            <summary>
             将到组件实体中的数据载入假结构体中
            </summary>
            <param name="com">unity组件</param>
            <param name="buffer">数据缓存器</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Core.HGUI.CustomText">
            <summary>
            自定义文字
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.CustomText.UVRect.uv0">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.CustomText.UVRect.uv1">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.CustomText.UVRect.uv2">
            <summary>
            右下
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.CustomText.UVRect.uv3">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.CustomText.UVRect.Scale">
            <summary>
            比例
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.CustomText.#ctor(UnityEngine.Texture)">
            <summary>
            构造函数
            </summary>
            <param name="t2d">包含字符精灵的纹理</param>
        </member>
        <member name="M:huqiang.Core.HGUI.CustomText.AddCharMap(System.Char,UnityEngine.Rect)">
            <summary>
            添加字符图
            </summary>
            <param name="key">字符</param>
            <param name="rect">精灵矩形</param>
        </member>
        <member name="M:huqiang.Core.HGUI.CustomText.AddCharMap(System.Char,UnityEngine.Sprite)">
            <summary>
            添加字符图
            </summary>
            <param name="key">字符</param>
            <param name="sprite">精灵</param>
        </member>
        <member name="F:huqiang.Core.HGUI.CustomText.text">
            <summary>
            文字
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.CustomText.Refresh">
            <summary>
            刷新顶点
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.CustomText.Apply(huqiang.Core.HGUI.HImage)">
            <summary>
            应用到HImage中
            </summary>
            <param name="image">实例目标</param>
        </member>
        <member name="T:huqiang.Core.HGUI.EmojiMap">
            <summary>
            表情符图
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiMap.CharInfo.Find(System.Char[],System.Int32,UnityEngine.Vector2[])">
            <summary>
            查询表情符是否存在
            </summary>
            <param name="vs"></param>
            <param name="index"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiMap.Initial(System.Byte[])">
            <summary>
            初始化表情符信息
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiMap.FindEmoji(System.Char[],System.Int32,UnityEngine.Vector2[])">
            <summary>
            查询表情符,失败返回0,成功返回字符串长度
            </summary>
            <param name="buff">字符串缓存</param>
            <param name="index">起始位置</param>
            <param name="uv">查询到的uv数据</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiMap.FindEmoji(System.Char[],System.Int32,System.Int32,UnityEngine.Vector2[])">
            <summary>
            查询表情符,失败返回0,成功返回字符串长度
            </summary>
            <param name="buff">字符串缓存</param>
            <param name="index">起始位置</param>
            <param name="end">结束位置</param>
            <param name="uv">查询到的uv数据</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiMap.CheckEmoji(System.String,System.Collections.Generic.List{huqiang.Core.HGUI.EmojiInfo})">
            <summary>
            检查字符串中的表情符,并替换位@符号
            </summary>
            <param name="str">源字符串</param>
            <param name="list">所包含表情符列表</param>
            <returns>替换后的额字符串</returns>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiMap.EmojiToFullString(System.String,System.Collections.Generic.List{huqiang.Core.HGUI.EmojiInfo})">
            <summary>
            将表情符和字符串合并
            </summary>
            <param name="str">字符串</param>
            <param name="list">所包含表情符列表</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiMap.RemoveEmoji(System.Char[],System.Int32,System.Char[],System.Int32)">
            <summary>
            移除表情符
            </summary>
            <param name="str"></param>
            <param name="builder"></param>
        </member>
        <member name="T:huqiang.Core.HGUI.EmojiString">
            <summary>
            带表情符的字符串
            </summary>
        </member>
        <member name="P:huqiang.Core.HGUI.EmojiString.FilterString">
            <summary>
            过滤表情符后的字符串
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.EmojiString.emojis">
            <summary>
            表情符信息
            </summary>
        </member>
        <member name="P:huqiang.Core.HGUI.EmojiString.FullString">
            <summary>
            完整字符串
            </summary>
        </member>
        <member name="P:huqiang.Core.HGUI.EmojiString.Length">
            <summary>
            过滤表情符后字符串长度
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiString.Remove(System.Int32,System.Int32)">
            <summary>
            移除某个字符
            </summary>
            <param name="index">字符索引</param>
            <param name="count">字符数量</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiString.SubString(System.Int32,System.Int32)">
            <summary>
            切割字符串
            </summary>
            <param name="index">字符索引</param>
            <param name="count">字符数量</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.EmojiString.Insert(System.Int32,huqiang.Core.HGUI.EmojiString)">
            <summary>
            插入字符
            </summary>
            <param name="index">字符索引</param>
            <param name="emoji">字符数量</param>
        </member>
        <member name="T:huqiang.Core.HGUI.HBatch">
            <summary>
            HGUI图像合批处理
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HBatch.Batch(huqiang.Core.HGUI.HCanvas,huqiang.Core.HGUI.HGUIElement[])">
            <summary>
            合批处理
            </summary>
            <param name="canvas">画布实例</param>
            <param name="pipeLine">UI流水线</param>
        </member>
        <member name="M:huqiang.Core.HGUI.HBatch.AddShadow(huqiang.Core.HGUI.HGraphics,huqiang.Core.HGUI.HCanvas,UnityEngine.Quaternion@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector4@)">
            <summary>
            添加阴影
            </summary>
            <param name="graphics"></param>
            <param name="canvas"></param>
            <param name="q"></param>
            <param name="scale"></param>
            <param name="o"></param>
            <param name="clip"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HBatch.AddUV1(huqiang.Core.HGUI.HCanvas,System.Int32,System.Int32)">
            <summary>
            添加UV
            </summary>
            <param name="canvas"></param>
            <param name="tid"></param>
            <param name="vertCount"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HBatch.CutRect(UnityEngine.Vector4,UnityEngine.Vector4)">
            <summary>
            矩形遮罩
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Core.HGUI.HCanvas">
            <summary>
            ui画布
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.camera">
            <summary>
            目标相机,如果为空则使用主相机
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.DesignSize">
            <summary>
            默认设计尺寸
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.PhysicalScale">
            <summary>
            物理尺寸缩放,主要用于ppi
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.NearPlane">
            <summary>
            距离相机镜头的距离
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.A">
            <summary>
            物理尺寸缩放的贝塞尔曲线,x=英寸,y=比例
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.MainCanvas">
            <summary>
            主画布实例
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.PipeLine">
            <summary>
            UI元素流水线缓存
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.scripts">
            <summary>
            ui元素脚本缓存
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.texts">
            <summary>
            文本元素缓存
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.inputs">
            <summary>
            用户输入事件
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.PauseEvent">
            <summary>
            暂停用户事件
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.Pause">
            <summary>
            暂停所有更新
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HCanvas.Collection(UnityEngine.Transform,System.Int32,System.Int32)">
            <summary>
            信息采集
            </summary>
            <param name="trans"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HCanvas.Update">
            <summary>
            更新内容包含:UI动画,UI页面更新,UI通知页更新,用户事件采集,键盘信息采集,事件派发,屏幕尺寸监测,执行分线程的委托任务
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HCanvas.LateUpdate">
            <summary>
            更新内容包含:UI流水线采集,UI MainUpdate函数执行,UI Populate函数执行,文本更新,合批处理,应用网格,投递到相机
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HCanvas.DispatchUserAction">
            <summary>
            派发用户输入指令信息
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HCanvas.DispatchMouse">
            <summary>
            派发鼠标事件
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HCanvas.DispatchTouch">
            <summary>
            派发Touch事件
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HCanvas.DispatchWin">
            <summary>
            派发鼠标和Touch混合事件
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HCanvas.OnApplicationFocus(System.Boolean)">
            <summary>
            当窗口失去焦点时停止所有更新用来节省cpu性能
            </summary>
            <param name="focus"></param>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.uv1">
            <summary>
            picture index
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.uv2">
            <summary>
            cut rect
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.uv3">
            <summary>
            uv tiling
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HCanvas.uv4">
            <summary>
            uv offset
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HCanvas.ScreenToCanvasPos(UnityEngine.Vector2)">
            <summary>
            将屏幕坐标转换为画布坐标
            </summary>
            <param name="mPos">屏幕坐标</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Core.HGUI.HVertex">
            <summary>
            UI顶点
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HVertex.picture">
            <summary>
            纹理索引0-3
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.trisBuffer">
            <summary>
            三角形块级缓存
            </summary>
        </member>
        <member name="P:huqiang.Core.HGUI.HGraphics.DefShader">
            <summary>
            默认的UIShader,当ui上的材质球为空时默认使用吃着色器
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.shader">
            <summary>
            获取或设置默认着色器
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.vertInfo">
            <summary>
            顶点块级内存
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.trisInfo">
            <summary>
            三角形块级内存
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.trisInfo2">
            <summary>
            三角形块级内存2
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.m_dirty">
            <summary>
            材质污染,需要重新计算uv
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.m_vertexChange">
            <summary>
            网格污染,网格需要重新计算
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.m_colorChanged">
            <summary>
            颜色改变后,需要重新填色
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.textures">
            <summary>
            支持4张纹理
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.texIds">
            <summary>
            纹理id
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.fillColors">
            <summary>
            是否使用填充色,即不使用纹理颜色
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.Shadow">
            <summary>
            开启阴影
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.shadowOffsset">
            <summary>
            阴影偏移
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGraphics.shadowColor">
            <summary>
            阴影颜色
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HGraphics.UpdateMesh">
            <summary>
            更新网格
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HGraphics.OnDestroy">
            <summary>
            销毁时释放非托管的块级内存
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HGraphics.LoadFromMesh(System.Collections.Generic.List{huqiang.Core.HGUI.HVertex},System.Collections.Generic.List{System.Int32})">
            <summary>
            载入网格,使用外部计算好的网格
            </summary>
            <param name="vert">顶点</param>
            <param name="tris">三角形</param>
        </member>
        <member name="M:huqiang.Core.HGUI.HGraphics.LoadVert(huqiang.Core.HGUI.HVertex[])">
            <summary>
            载入网格,使用外部计算好的网格
            </summary>
            <param name="vert">顶点信息</param>
        </member>
        <member name="M:huqiang.Core.HGUI.HGraphics.LoadVert(System.Collections.Generic.List{huqiang.Core.HGUI.HVertex})">
            <summary>
            载入网格,使用外部计算好的网格
            </summary>
            <param name="vert">顶点信息</param>
        </member>
        <member name="M:huqiang.Core.HGUI.HGraphics.LoadTris(System.Int32[])">
            <summary>
            载入网格,使用外部计算好的三角形1
            </summary>
            <param name="tri"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HGraphics.LoadTris2(System.Int32[])">
            <summary>
            载入网格,使用外部计算好的三角形2
            </summary>
            <param name="tri"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HGraphics.LoadTris(System.Collections.Generic.List{System.Int32})">
            <summary>
            载入网格,使用外部计算好的三角形1
            </summary>
            <param name="tri"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HGraphics.LoadTris2(System.Collections.Generic.List{System.Int32})">
            <summary>
            载入网格,使用外部计算好的三角形2
            </summary>
            <param name="tri"></param>
        </member>
        <member name="F:huqiang.Core.HGUI.HGUIElement.childCount">
            <summary>
            子元素数量
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGUIElement.childOffset">
            <summary>
            子元素在流水线中的其实位置
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGUIElement.parentIndex">
            <summary>
            夫元素在流水线中的位置
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGUIElement.Position">
            <summary>
            相对于画布的坐标
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGUIElement.Rotation">
            <summary>
            相对于画布的旋转角
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGUIElement.Scale">
            <summary>
            相对于画布的缩放
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGUIElement.active">
            <summary>
            是否是激活状态
            </summary>
        </member>
        <member name="T:huqiang.Core.HGUI.PrefabAsset">
            <summary>
            预制体资源
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.PrefabAsset.name">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.PrefabAsset.models">
            <summary>
            模型数据
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HGUIManager.GameBuffer">
            <summary>
            游戏对象缓存
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HGUIManager.Initial(UnityEngine.Transform)">
            <summary>
            初始化UI组件,包含有:Transform,HImage,TextBox,HText,HLine,UIElement
            </summary>
            <param name="buff">回收站的父物体</param>
        </member>
        <member name="M:huqiang.Core.HGUI.HGUIManager.SavePrefab(UnityEngine.Transform,System.String)">
            <summary>
            将场景内的对象保存到文件
            </summary>
            <param name="uiRoot"></param>
            <param name="path"></param>
        </member>
        <member name="F:huqiang.Core.HGUI.HGUIManager.prefabAssets">
            <summary>
            所有预制体资源列表
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HGUIManager.LoadModels(System.Byte[],System.String)">
            <summary>
            载入一个预制体资源
            </summary>
            <param name="dat">资源数据</param>
            <param name="name">资源名</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.HGUIManager.FindChild(huqiang.Data.FakeStruct,System.String)">
            <summary>
            查询transform的子物体
            </summary>
            <param name="fake"></param>
            <param name="childName"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.HGUIManager.FindModel(System.String,System.String)">
            <summary>
            查询一个模型
            </summary>
            <param name="assetName">资源包名</param>
            <param name="childName">模型名称</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.HGUIManager.GetAllChild(huqiang.Data.FakeStruct)">
            <summary>
            获取transform的所有子物体
            </summary>
            <param name="fake"></param>
            <param name="childName"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.HGUIManager.GetAllChild(System.String)">
            <summary>
            获取资源包下的所有子模型
            </summary>
            <param name="asset"></param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Core.HGUI.HGUIMesh">
            <summary>
            HImage的网格处理类
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HGUIMesh.CreateMesh(huqiang.Core.HGUI.HImage)">
            <summary>
            创建网格
            </summary>
            <param name="image">实例对象</param>
        </member>
        <member name="M:huqiang.Core.HGUI.HGUIMesh.CreateTiledMesh(huqiang.Core.HGUI.HImage)">
            <summary>
            此模式使用较少,后面有空再补
            </summary>
            <param name="image"></param>
        </member>
        <member name="F:huqiang.Core.HGUI.HImage.m_fillClockwise">
            <summary>
            逆时针填充
            </summary>
        </member>
        <member name="P:huqiang.Core.HGUI.HImage.FillAmount">
            <summary>
            填充比例
            </summary>
        </member>
        <member name="P:huqiang.Core.HGUI.HImage.PreserveAspect">
            <summary>
            开启此项,按弧度填充,否则按矩形四个角填充
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HImage.SetNativeSize">
            <summary>
            使用纹理尺寸
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HImage.UpdateMesh">
            <summary>
            更新网格
            </summary>
        </member>
        <member name="T:huqiang.Core.HGUI.HLine">
            <summary>
            画线UI,支持直线,弧线,贝塞尔曲线,二阶贝塞尔曲线
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HLine.AddLine(huqiang.Core.Line.Beeline@)">
            <summary>
            添加一条直线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HLine.AddLine(huqiang.Core.Line.ArcLine@)">
            <summary>
            添加一条弧线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HLine.AddLine(huqiang.Core.Line.BzierLine@)">
            <summary>
            添加一条贝塞尔曲线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HLine.AddLine(huqiang.Core.Line.BzierLine2@)">
            <summary>
            添加一条二阶贝塞尔曲线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HLine.Clear">
            <summary>
            清除所有线段
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HLine.UpdateMesh">
            <summary>
            更新所有线段网格
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HText.VertexBuffer">
            <summary>
            顶点缓存
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HText.PopulateBuffer">
            <summary>
            临时顶点缓存
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HText.key_noMesh">
            <summary>
            不会产生网格的字符
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.DirtyAll">
            <summary>
            将所有文本设置为被污染
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.CreateEmojiMesh(huqiang.Core.HGUI.HText)">
            <summary>
            创建带有表情符的网格
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.CreateOutLine(huqiang.Core.HGUI.HText)">
            <summary>
            创建出线
            </summary>
            <param name="text">文本实体</param>
        </member>
        <member name="P:huqiang.Core.HGUI.HText.DefaultFont">
            <summary>
            默认字体
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.HText.OutLine">
            <summary>
            慎用,顶点占用较多
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.GetGenerationSettings(UnityEngine.Vector2@,UnityEngine.TextGenerationSettings@)">
            <summary>
            配置文本生成器的参数
            </summary>
            <param name="size">参考尺寸</param>
            <param name="sett">参数载体</param>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.GetTempVertex(System.Collections.Generic.IList{UnityEngine.UIVertex},huqiang.Data.BlockInfo{huqiang.Core.HGUI.TextVertex}@,System.String)">
            <summary>
            获取临时顶点
            </summary>
            <param name="v"></param>
            <param name="vert">临时顶点</param>
            <param name="filterStr">过滤表情符后的字符串</param>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.Populate">
            <summary>
            文本计算
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.UpdateMesh">
            <summary>
            更新网格
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.GetPreferredHeight(UnityEngine.Vector2@,System.String)">
            <summary>
            获取文字预设高度
            </summary>
            <param name="size"></param>
            <param name="str"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.GetPreferredWidth(UnityEngine.Vector2@,System.String)">
            <summary>
            获取文字预设宽度
            </summary>
            <param name="size"></param>
            <param name="str"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.GetPreferredSize(UnityEngine.Vector2@,System.String)">
            <summary>
            获取文字预设尺寸
            </summary>
            <param name="size"></param>
            <param name="str"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.HText.ReSized">
            <summary>
            UI尺寸本改变,设置污染
            </summary>
        </member>
        <member name="T:huqiang.Core.HGUI.MaterialCollector">
            <summary>
            材质球收集器
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.MaterialCollector.textures">
            <summary>
            纹理信息缓存
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.MaterialCollector.materials">
            <summary>
            材质球缓存
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.MaterialCollector.submesh">
            <summary>
            子三角形列表
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialCollector.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="length">缓存大小</param>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialCollector.Start">
            <summary>
            开始新一轮的收集
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialCollector.CombinationMaterial(UnityEngine.Material,System.Int32,UnityEngine.Vector4@)">
            <summary>
            添加自定义材质球,无法合批
            </summary>
            <param name="mat"></param>
            <param name="matID"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialCollector.CombinationMaterial(UnityEngine.Texture,System.Int32,System.Boolean,System.Int32@,UnityEngine.Vector4@,System.Boolean)">
            <summary>
            组合默认材质球
            </summary>
            <param name="texture"></param>
            <param name="texID"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialCollector.CombinationMaterial(huqiang.Core.HGUI.HGraphics,System.Int32[],System.Int32,System.Int32@,UnityEngine.Vector4@)">
            <summary>
            组合材质球
            </summary>
            <param name="graphics"></param>
            <param name="tris"></param>
            <param name="len"></param>
            <param name="offset"></param>
            <param name="clip"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialCollector.CombinationMaterial(huqiang.Core.HGUI.HGraphics,System.Int32[],huqiang.Core.HGUI.ArrayInfo[],System.Int32[],System.Int32,UnityEngine.Vector4@)">
            <summary>
            组合材质球
            </summary>
            <param name="graphics"></param>
            <param name="trisArray"></param>
            <param name="address"></param>
            <param name="offsets"></param>
            <param name="len"></param>
            <param name="clip"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialCollector.CompeleteSub">
            <summary>
            子网格闭合
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialCollector.End">
            <summary>
            此轮收集完毕
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialCollector.GenerateMaterial">
            <summary>
            生成材质球数组, 这里会产生一次GC
            </summary>
            <returns></returns>
        </member>
        <member name="T:huqiang.Core.HGUI.MaterialManager">
            <summary>
            材质管理器
            </summary>
        </member>
        <member name="P:huqiang.Core.HGUI.MaterialManager.DefShader">
            <summary>
            默认着色器
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.MaterialManager.GetNextMaterial">
            <summary>
            获取下一个材质球,如果没有则重新创建
            </summary>
            <returns></returns>
        </member>
        <member name="T:huqiang.Core.HGUI.RichTextHelper">
            <summary>
            富文本帮助器
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.RichTextHelper.DeleteLabel(System.String)">
            <summary>
            删除富文本中的标签
            </summary>
            <param name="str">富文本</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Core.HGUI.TextOperation">
            <summary>
            文本操作类
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.ContentMoveUp">
            <summary>
            展示内容向上移动
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.ContentMoveDown">
            <summary>
            展示内容向下移动
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.GetShowContent">
            <summary>
            获取当前可以展示的文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.SelectAll">
            <summary>
            全选
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.GetSelectString">
            <summary>
            获取选中的文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.DeleteSelectString">
            <summary>
            删除选中的文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.SetPressIndex(System.Int32,huqiang.Core.HGUI.PressInfo@)">
            <summary>
            设置光标位置
            </summary>
            <param name="index"></param>
            <param name="press"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.SetPressIndex(System.Int32,System.Boolean@)">
            <summary>
            设置光标位置
            </summary>
            <param name="index">光标位置</param>
            <param name="LineChanged">是否改变的行号</param>
            <returns>是否改变成功</returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.SetStartPressIndex(System.Int32)">
            <summary>
            设置光标开始的位置
            </summary>
            <param name="index">光标位置</param>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.SetEndPressIndex(System.Int32)">
            <summary>
            设置光标结束的位置
            </summary>
            <param name="index">光标位置</param>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.PointerMoveUp(System.Boolean@)">
            <summary>
            光标向上移动
            </summary>
            <param name="LineChanged">是否改变了行号</param>
            <returns>是否移动成功</returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.PointerMoveDown(System.Boolean@)">
            <summary>
            光标向下移动
            </summary>
            <param name="LineChanged">是否改变了行号</param>
            <returns>是否移动成功</returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.PointerMoveLeft(System.Boolean@)">
            <summary>
            光标向左移动
            </summary>
            <param name="LineChanged">是否改变了行号</param>
            <returns>是否移动成功</returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.PointerMoveRight(System.Boolean@)">
            <summary>
            光标向右移动
            </summary>
            <param name="LineChanged">是否改变了行号</param>
            <returns>是否移动成功</returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.DeleteLast">
            <summary>
            删除光标后面的一个字符
            </summary>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.DeleteNext">
            <summary>
            删除光标前面的一个字符
            </summary>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.InsertContent(huqiang.Core.HGUI.EmojiString)">
            <summary>
            插入字符串
            </summary>
            <param name="con">表情符字符串</param>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.SetShowStart(System.Int32)">
            <summary>
            设置显示内容开始行号
            </summary>
            <param name="start">行号</param>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.SetPress(huqiang.Core.HGUI.PressInfo@)">
            <summary>
            设置按压信息
            </summary>
            <param name="press"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.SetStartPress(huqiang.Core.HGUI.PressInfo@)">
            <summary>
            设置开始按压信息
            </summary>
            <param name="press"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.SetEndPress(huqiang.Core.HGUI.PressInfo@)">
            <summary>
            设置结束按压信息
            </summary>
            <param name="press"></param>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.GetStartPress">
            <summary>
            获取开始按压信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.TextOperation.GetEndPress">
            <summary>
            获取结束按压信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:huqiang.Core.HGUI.UIElement">
            <summary>
            UI基本元素组件
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.LateFrame">
            <summary>
            最后更新的帧数,防止同一帧内重复更新
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.Pivot">
            <summary>
            轴心
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.scaleType">
            <summary>
            缩放类型
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.anchorType">
            <summary>
            停靠类型
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.anchorPointType">
            <summary>
            停靠的点类型
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.anchorOffset">
            <summary>
            停靠的偏移位置
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.marginType">
            <summary>
            相对与父物体的剔除尺寸的类型
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.parentType">
            <summary>
            父物体类型
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.margin">
            <summary>
            相对与父物体的剔除尺寸
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.eventType">
            <summary>
            用户事件类型
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.compositeType">
            <summary>
            复合型UI类型
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.UIElement.MainUpdate">
            <summary>
            主线脚本更新
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.UIElement.SubUpdate">
            <summary>
            分线程脚本更新
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.UIElement.ReSized">
            <summary>
            重新计算尺寸
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.Mask">
            <summary>
            是否开启遮罩
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.userEvent">
            <summary>
            用户事件
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.composite">
            <summary>
            复合ui组件实体
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.mod">
            <summary>
            数据模型
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.DataContext">
            <summary>
            联系上下文
            </summary>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.PipelineIndex">
            <summary>
            在流水线中的位置
            </summary>
        </member>
        <member name="P:huqiang.Core.HGUI.UIElement.MainColor">
            <summary>
            主颜色
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.UIElement.RegEvent``1(huqiang.Data.FakeStruct)">
            <summary>
            注册用户事件
            </summary>
            <typeparam name="T">事件类型</typeparam>
            <param name="fake">数据模型,可空</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Core.HGUI.UIElement.RegEvent``1(huqiang.UIEvent.EventCollider)">
            <summary>
            注册事件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collider">事件检测碰撞器,可空</param>
            <returns></returns>
        </member>
        <member name="F:huqiang.Core.HGUI.UIElement.SizeChanged">
            <summary>
            当UI尺寸被改变时,执行此委托
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.UIElement.Initial(huqiang.Data.FakeStruct)">
            <summary>
            初始化数据
            </summary>
            <param name="ex">数据模型</param>
        </member>
        <member name="M:huqiang.Core.HGUI.UIElement.CreateUIComposite(huqiang.Core.HGUI.UIElement,huqiang.Data.FakeStruct)">
            <summary>
            创建复合型UI实体
            </summary>
            <param name="script">ui元素实体</param>
            <param name="ex">数据模型</param>
        </member>
        <member name="M:huqiang.Core.HGUI.UIElement.Clear">
            <summary>
            清除资源
            </summary>
        </member>
        <member name="T:huqiang.Core.HGUI.UIInitializer">
            <summary>
            ui初始化器
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.UIInitializer.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="obj">对象实例</param>
        </member>
        <member name="M:huqiang.Core.HGUI.UIInitializer.#ctor(huqiang.Data.TempReflection)">
            <summary>
            构造函数
            </summary>
            <param name="temp">对象反射信息</param>
        </member>
        <member name="M:huqiang.Core.HGUI.UIInitializer.Reset(System.Object)">
            <summary>
            设置一个新的目标实例
            </summary>
            <param name="obj">对象实例</param>
        </member>
        <member name="M:huqiang.Core.HGUI.UIInitializer.Initialiezd(huqiang.Data.FakeStruct,UnityEngine.Component)">
            <summary>
            初始化
            </summary>
            <param name="fake">模型数据</param>
            <param name="com">组件实体</param>
        </member>
        <member name="M:huqiang.Core.HGUI.UIInitializer.Done">
            <summary>
            初始化完毕
            </summary>
        </member>
        <member name="M:huqiang.Core.HGUI.UIInitializer.ReflectionEnity(System.Object,UnityEngine.Transform)">
            <summary>
            反射实体到目标载体
            </summary>
            <param name="obj">载体实例对象</param>
            <param name="com">ui组件实例</param>
        </member>
        <member name="M:huqiang.Core.HGUI.UIInitializer.ChangeLanguage(huqiang.Data.INISection)">
            <summary>
            更换使用语言,将配置文件中的语言反射到UI组件上
            </summary>
            <param name="section"></param>
        </member>
        <member name="T:huqiang.Core.Line.ArcLine">
            <summary>
            曲线
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.ArcLine.Angle">
            <summary>
            角度
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.ArcLine.Dic">
            <summary>
            方向
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.ArcLine.Radius">
            <summary>
            半径
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.ArcLine.Precision">
            <summary>
            精度
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.ArcLine.Closed">
            <summary>
            闭合的
            </summary>
        </member>
        <member name="T:huqiang.Core.Line.Beeline">
            <summary>
            直线
            </summary>
        </member>
        <member name="T:huqiang.Core.Line.BzierLine">
            <summary>
            贝塞尔曲线
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.BzierLine.Precision">
            <summary>
            精度
            </summary>
        </member>
        <member name="T:huqiang.Core.Line.BzierLine2">
            <summary>
            二阶贝塞尔曲线
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.BzierLine2.Precision">
            <summary>
            精度
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.LineBase.Width">
            <summary>
            线宽
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.LineBase.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="T:huqiang.Core.Line.ParabolaLine">
            <summary>
            抛物线
            </summary>
        </member>
        <member name="F:huqiang.Core.Line.ParabolaLine.Precision">
            <summary>
            精度
            </summary>
        </member>
        <member name="M:huqiang.MathH.#cctor">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:huqiang.MathH.Sin(System.Single)">
            <summary>
            范围为0-360， 精度为0.01
            </summary>
            <param name="ax"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.Cos(System.Single)">
            <summary>
            范围为0-360， 精度为0.01
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.Tan(System.Single)">
            <summary>
            范围为0-360， 精度为0.01
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.atan(System.Single,System.Single)">
            <summary>
            反正切快速算法， 返回范围为0-360， 精度为0.01
            </summary>
            <param name="dx">x</param>
            <param name="dy">y</param>
            <returns>角度</returns>
        </member>
        <member name="M:huqiang.MathH.AngleCenter(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            求三个点夹角的中间点
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.GetCentre(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            <para>二维：已知圆上三点，求圆心坐标</para>
            <para>三个点不在同一直线上</para>
            </summary>
            <param name="P1">点1</param>
            <param name="P2">点2</param>
            <param name="P3">点3</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.Parabola(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            抛物线解析式，返回一般表达式 y=a*x*x+b*x+c的 a,b,c的值
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.BezierPoint(System.Single,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            一阶贝塞尔曲线
            </summary>
            <param name="t">比率</param>
            <param name="p0">起点</param>
            <param name="p1">中间点</param>
            <param name="p2">结束点</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.BezierPoint(System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            一阶贝塞尔曲线
            </summary>
            <param name="t">比率</param>
            <param name="p0">起点</param>
            <param name="p1">中间点</param>
            <param name="p2">结束点</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.BezierPoint(System.Single,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            二阶贝塞尔曲线
            </summary>
            <param name="t">比率</param>
            <param name="p0">起点</param>
            <param name="p1">中间点1</param>
            <param name="p2">中间点2</param>
            <param name="p3">结束点</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.BezierPoint(System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            二阶贝塞尔曲线
            </summary>
            <param name="t">比率</param>
            <param name="p0">起点</param>
            <param name="p1">中间点1</param>
            <param name="p2">中间点2</param>
            <param name="p3">结束点</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.BezierTangent(System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            二阶贝塞尔曲线的切线
            </summary>
            <param name="t">比率</param>
            <param name="p0">起点</param>
            <param name="p1">中间点1</param>
            <param name="p2">中间点2</param>
            <param name="p3">结束点</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.EulerToQuaternion(UnityEngine.Vector3)">
            <summary>
            欧拉角转四元数
            </summary>
            <param name="euler"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.MultiplyQuaternion(UnityEngine.Vector4,UnityEngine.Vector4)">
            <summary>
            四元数相乘，代码来源xenko
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.QuaternionMultiplyVector(UnityEngine.Vector4,UnityEngine.Vector3)">
            <summary>
            旋转顶点，代码来源xenko
            </summary>
            <param name="q"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.RotationVertex(UnityEngine.Vector3[],UnityEngine.Vector4)">
            <summary>
            旋转网格所有顶点
            </summary>
            <param name="vertex"></param>
            <param name="quat"></param>
        </member>
        <member name="M:huqiang.MathH.RotationVertex(UnityEngine.Vector3[],UnityEngine.Vector3)">
            <summary>
            旋转网格所有顶点
            </summary>
            <param name="vertex"></param>
            <param name="angle"></param>
        </member>
        <member name="M:huqiang.MathH.GetTriangleNormal(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            计算三角形法线
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.SolutionTowEquation(System.Single,System.Single,System.Single)">
            <summary>
            解一元二次方程
            </summary>
            <param name="a">ax²</param>
            <param name="b">bx</param>
            <param name="c"></param>
            <returns>数组0为实数1为虚数</returns>
        </member>
        <member name="M:huqiang.MathH.ThreeEquationShengjin(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            解一元三次方式，盛金公式法
            </summary>
            <param name="_a">ax³</param>
            <param name="_b">bx²</param>
            <param name="_c">cx</param>
            <param name="_d"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.MathH.PowDistance(System.Single,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="r">AttenuationRate</param>
            <param name="v">Velocity</param>
            <param name="t">time</param>
            <returns>最大速率行驶到当前时间产生的距离</returns>
        </member>
        <member name="M:huqiang.MathH.DistanceToVelocity(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="r">AttenuationRate</param>
            <param name="d">Distance</param>
            <returns>行驶到指定位置所需的最大速率</returns>
        </member>
        <member name="T:huqiang.Complex">
            <summary>
            表示一个复数
            </summary>
        </member>
        <member name="M:huqiang.Complex.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:huqiang.Complex.#ctor(System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="real">实部</param>
        </member>
        <member name="M:huqiang.Complex.#ctor(System.Single,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="real">实部</param>
            <param name="image">虚部</param>
        </member>
        <member name="P:huqiang.Complex.Real">
            <summary>
            实部
            </summary>
        </member>
        <member name="P:huqiang.Complex.Image">
            <summary>
            虚部
            </summary>
        </member>
        <member name="M:huqiang.Complex.op_Addition(huqiang.Complex,huqiang.Complex)">
            <summary>
            复数的加法运算
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Complex.op_Subtraction(huqiang.Complex,huqiang.Complex)">
            <summary>
            复数的减法运算
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Complex.op_Multiply(huqiang.Complex,huqiang.Complex)">
            <summary>
            复数的乘法运算
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Complex.ToModul">
            <summary>
            复数的求模运算
            </summary>
            <returns></returns>
        </member>
        <member name="T:huqiang.Physics2D">
            <summary>
            用于精确的计算,需要更多的计算
            </summary>
        </member>
        <member name="M:huqiang.Physics2D.DotToArc(UnityEngine.Vector2,System.Single,System.Single,System.Single,UnityEngine.Vector2)">
            <summary>
            检查点在弧形里面
            </summary>
            <param name="ori">弧形圆心</param>
            <param name="r">弧形半径</param>
            <param name="direct">弧形方向,0-360角度</param>
            <param name="scope">弧形范围0-180角度</param>
            <param name="dot">点</param>
        </member>
        <member name="M:huqiang.Physics2D.DotToEllipse(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            检查点在椭圆里面
            </summary>
            <param name="ell_location"></param>
            <param name="dot"></param>
            <param name="xlen"></param>
            <param name="ylen"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.DotToPolygon(UnityEngine.Vector2[],UnityEngine.Vector2)">
            <summary>
             检测一个点是否在多边形里面
            </summary>
            <param name="A">多边形,按顺序连接</param>
            <param name="B">点</param>
            <returns>在里面返回true，反之返回false</returns>
        </member>
        <member name="M:huqiang.Physics2D.DotToPolygon(UnityEngine.Vector3[],UnityEngine.Vector2)">
            <summary>
             检测一个点是否在多边形里面
            </summary>
            <param name="A">多边形,按顺序连接</param>
            <param name="B">点</param>
            <returns>在里面返回true，反之返回false</returns>
        </member>
        <member name="M:huqiang.Physics2D.DotToPolygon(UnityEngine.Vector3*,System.Int32,UnityEngine.Vector2)">
            <summary>
             检测一个点是否在多边形里面
            </summary>
            <param name="A">多边形,按顺序连接</param>
            <param name="B">点</param>
            <returns>在里面返回true，反之返回false</returns>
        </member>
        <member name="M:huqiang.Physics2D.PToP2(UnityEngine.Vector2[],UnityEngine.Vector2[])">
            <summary>
            多边形与多边形相交
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.PToP2A(UnityEngine.Vector2[],UnityEngine.Vector2[],UnityEngine.Vector3@)">
            <summary>
            多边形与多边形相交,返回相交的第一个点
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.PToP2A(UnityEngine.Vector2[],UnityEngine.Vector2[],UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            多边形与多边形相交,返回相交的两个点
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="la"></param>
            <param name="lb"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.PToP3(UnityEngine.Vector3[],UnityEngine.Vector3[])">
            <summary>
            多边形与多边形相交
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.PToP3A(UnityEngine.Vector3[],UnityEngine.Vector3[],UnityEngine.Vector3@)">
            <summary>
            多边形与多边形相交
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.PToP3A(UnityEngine.Vector3[],UnityEngine.Vector3[],UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            多边形与多边形相交,返回相交的两个点
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="la"></param>
            <param name="lb"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.TriangleToPolygon(UnityEngine.Vector2[],UnityEngine.Vector2[])">
            <summary>
            三角形和多边形相交
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.CircleToPolygon(UnityEngine.Vector2,System.Single,UnityEngine.Vector2[])">
            <summary>
            圆与多边形相交
            </summary>
            <param name="C"></param>
            <param name="r"></param>
            <param name="P"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.CircleToPolygon(UnityEngine.Vector2,System.Single,UnityEngine.Vector3[])">
            <summary>
            圆与多边形相交
            </summary>
            <param name="C"></param>
            <param name="r"></param>
            <param name="P"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.CircleToPolygon(UnityEngine.Vector2,System.Single,UnityEngine.Vector3*,System.Int32)">
            <summary>
            圆与多边形相交
            </summary>
            <param name="C"></param>
            <param name="r"></param>
            <param name="P"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.CircleToLine(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            圆与线相交
            </summary>
            <param name="C"></param>
            <param name="r"></param>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.CircleToLineA(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            圆与线相交
            </summary>
            <param name="C"></param>
            <param name="r"></param>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.DotToLine(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            检测一个点是否在线段上
            </summary>
            <param name="dot">点</param>
            <param name="a">线段起点</param>
            <param name="b">线段终点</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.LineToVerticalLine(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            线与垂直线相交
            </summary>
             <param name="c"></param>
            <param name="d"></param>
            <param name="va">垂直线点a</param>
            <param name="vb">垂直线点b</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.LineToLine(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            求两条线段是否相交点
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.LineToLine(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            求两条线段是否相交点,并得出相交点
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.LineToLineA(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            求两条线段的交点,比上面快一丁点,但无法确定是否相交
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="o"></param>
        </member>
        <member name="M:huqiang.Physics2D.LineToLine(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            
            </summary>
            <param name="a">线段1起点</param>
            <param name="b">线段1终点</param>
            <param name="c">线段2起点</param>
            <param name="d">线段2终点</param>
            <param name="p0">线段的交点</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Physics2D.CircleToLine(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            圆与线相交
            </summary>
            <param name="C">圆心位置</param>
            <param name="r">半径</param>
            <param name="A">线段起点</param>
            <param name="B">线段终点</param>
            <param name="p0">切点</param>
            <param name="p1">相交点1,如果超出起点则为起点</param>
            <param name="p2">相交点2,如果超出终点则为终点</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.App">
            <summary>
            应用管理类
            </summary>
        </member>
        <member name="F:huqiang.App.UIRoot">
            <summary>
            根节点
            </summary>
        </member>
        <member name="M:huqiang.App.Initial(UnityEngine.Transform)">
            <summary>
            初始化UI布局
            </summary>
            <param name="uiRoot"></param>
        </member>
        <member name="M:huqiang.App.Dispose">
            <summary>
            释放资源:包含ThreadMission,RecordManager,ElementAsset,AssetBundle
            </summary>
        </member>
        <member name="M:huqiang.App.Hide">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="M:huqiang.App.Show">
            <summary>
            显示
            </summary>
        </member>
        <member name="M:huqiang.Extand.HexToColor(System.String)">
            <summary>
            16进制文本转颜色值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ToColor(System.Int32)">
            <summary>
            整数转颜色值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ToBytes(System.Int16)">
            <summary>
            短整数转bytes[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ToBytes(System.Int32)">
            <summary>
            整数转byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ToBytes(System.Single)">
            <summary>
            浮点数转byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ToBytes(System.Int64)">
            <summary>
            长整数转byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ToBytes(System.Double)">
            <summary>
            双浮点转byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ToColor(System.UInt32)">
            <summary>
            无符号整数转颜色
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.WriteString(System.IO.Stream,System.String)">
            <summary>
            将字符串写入流
            </summary>
            <param name="stream">流</param>
            <param name="str">字符串</param>
        </member>
        <member name="M:huqiang.Extand.Write(System.IO.Stream,System.Byte*,System.Int32)">
            <summary>
            将内存指针中的数据写入流
            </summary>
            <param name="stream">流</param>
            <param name="p">内存地址</param>
            <param name="size">数据长度</param>
        </member>
        <member name="M:huqiang.Extand.ReadInt16(System.Byte[],System.Int32)">
            <summary>
            从byte[]中读取短整数
            </summary>
            <param name="buff"></param>
            <param name="offset">偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ReadInt32(System.Byte[],System.Int32)">
            <summary>
            从byte[]中读取整数
            </summary>
            <param name="buff"></param>
            <param name="offset">偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.Move(UnityEngine.Vector2,System.Single)">
            <summary>
            二维向量向前移动
            </summary>
            <param name="v">向量</param>
            <param name="len">移动距离</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.Rotate(UnityEngine.Vector2,System.Single)">
            <summary>
            二维向量旋转
            </summary>
            <param name="v">向量</param>
            <param name="angle">旋转角度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.Move(UnityEngine.Vector3,System.Single)">
            <summary>
            三维向量移动
            </summary>
            <param name="v">向量</param>
            <param name="len">长度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.RotateDirection(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            向量向某个向量旋转后的位置
            </summary>
            <param name="v"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.RotateAngle(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            向量旋转多少欧拉角后的位置
            </summary>
            <param name="v"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.Rotate(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            某个向量旋转多少欧拉角后的四元数
            </summary>
            <param name="v">向量</param>
            <param name="v2">角度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ToBytes``1(``0[])">
            <summary>
            将结构体数组转换成byte[],结构体中字段不能有引用类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ToArray``1(System.Byte[])">
            <summary>
            将byte[]转换成结构体数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Extand.ReadFrom``1(System.IntPtr,System.Byte*)">
            <summary>
            从内存地址中读取一个非托管结构体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ip">目标内存地址</param>
            <param name="src">源内存地址</param>
        </member>
        <member name="M:huqiang.Extand.WriteTo``1(System.IntPtr,System.Byte*)">
            <summary>
            将一个非托管结构体中的数据写入到内存
            </summary>
            <typeparam name="T">结构体类型</typeparam>
            <param name="ip">源内存地址</param>
            <param name="tar">目标内存地址</param>
        </member>
        <member name="T:huqiang.OpenFileDialog">
            <summary>
            文件选取器,使用win32 api,适用于win平台
            </summary>
        </member>
        <member name="T:huqiang.SaveFileDialog">
            <summary>
            文件存储选取器,使用win32 api,适用于win平台
            </summary>
        </member>
        <member name="T:huqiang.Model">
            <summary>
            模型网格创建器
            </summary>
        </member>
        <member name="M:huqiang.Model.CreateCone(System.Single,System.Single,System.Single)">
            <summary>
            创建一个圆锥，返回顶点和三角形
            </summary>
            <param name="r">半径</param>
            <param name="h">高度</param>
            <param name="arc">三角形弧度，越小精度越高，范围0-360取整</param>
            <returns>顶点，三角形</returns>
        </member>
        <member name="M:huqiang.Model.CreateCube(UnityEngine.Vector3)">
            <summary>
            创建一个cube
            </summary>
            <param name="size">尺寸</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Other.Palette">
            <summary>
            调色板
            </summary>
        </member>
        <member name="M:huqiang.Other.Palette.LoadHTemplateAsync">
            <summary>
            主线程异步使用此函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Other.Palette.LoadHTemplate">
            <summary>
            主线程访问此函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Other.Palette.LoadCTemplateAsync">
            <summary>
            主线程异步使用此函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Other.Palette.LoadCTemplate">
            <summary>
            主线程访问此函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Other.Palette.LoadHSVT(System.Single)">
            <summary>
            主线程访问此函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Other.Palette.AwaitLoadHSVT(System.Single)">
            <summary>
            主线程访问此函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Other.Palette.LoadHSVTAsync(System.Single)">
            <summary>
            多线程使用此函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Other.Palette.HSVTemplate(System.Single,UnityEngine.Color[])">
            <summary>
            获取一个HSV色的调色板
            </summary>
            <param name="H"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:huqiang.ThreadMission">
            <summary>
            线程任务管理器
            </summary>
        </member>
        <member name="M:huqiang.ThreadMission.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tag">标志</param>
        </member>
        <member name="M:huqiang.ThreadMission.AddSubMission(System.Action{System.Object},System.Object,System.Action{System.Object})">
            <summary>
            添加一个其它线程的任务
            </summary>
            <param name="action">委托任务</param>
            <param name="dat">联系上下文</param>
            <param name="wait">执行完毕后的回调</param>
        </member>
        <member name="M:huqiang.ThreadMission.AddMainMission(System.Action{System.Object},System.Object,System.Action{System.Object})">
            <summary>
            其它线程向本线程添加任务
            </summary>
            <param name="action">委托任务</param>
            <param name="dat">联系上下文</param>
            <param name="wait">执行完毕后的回调</param>
        </member>
        <member name="M:huqiang.ThreadMission.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:huqiang.ThreadMission.AddMission(System.Action{System.Object},System.Object,System.String,System.Action{System.Object})">
            <summary>
            添加一个委托任务
            </summary>
            <param name="action">委托任务</param>
            <param name="dat">联系上下文</param>
            <param name="tag">目标线程标志</param>
            <param name="wait">执行完毕后的回调</param>
        </member>
        <member name="M:huqiang.ThreadMission.InvokeToMain(System.Action{System.Object},System.Object,System.Action{System.Object})">
            <summary>
            给主线程添加一个任务
            </summary>
            <param name="action">委托任务</param>
            <param name="dat">联系上下文</param>
            <param name="wait">执行完毕后的回调</param>
        </member>
        <member name="M:huqiang.ThreadMission.ExtcuteMain">
            <summary>
            执行主线程任务
            </summary>
        </member>
        <member name="M:huqiang.ThreadMission.DisposeAll">
            <summary>
            释放所有线程
            </summary>
        </member>
        <member name="M:huqiang.ThreadMission.DisposeFree">
            <summary>
            释放没有任务的线程
            </summary>
        </member>
        <member name="M:huqiang.ThreadMission.SetMianId">
            <summary>
            设置主线程id
            </summary>
        </member>
        <member name="M:huqiang.ThreadMission.FindMission(System.String)">
            <summary>
            通过标志查询线程
            </summary>
            <param name="name">标志名</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.ThreadMission.CreateMission(System.String)">
            <summary>
            创建一个线程
            </summary>
            <param name="tag">标志名</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.ThreadTimer">
            <summary>
            线程计时器
            </summary>
        </member>
        <member name="F:huqiang.ThreadTimer.Tick">
            <summary>
            更新委托
            </summary>
        </member>
        <member name="M:huqiang.ThreadTimer.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="inter">更新间隔,单位毫秒</param>
        </member>
        <member name="M:huqiang.ThreadTimer.Dispose">
            <summary>
            释放线程
            </summary>
        </member>
        <member name="T:huqiang.Coordinates">
            <summary>
            坐标信息
            </summary>
        </member>
        <member name="M:huqiang.Tool.GetTimeLineValue(UnityEngine.Vector2[],System.Single)">
            <summary>
            获取时间线上的某个值
            </summary>
            <param name="cl"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Tool.EncodeToWAV(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            音频编码成wav格式
            </summary>
            <param name="channels"></param>
            <param name="frequency"></param>
            <param name="samples"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Tool.LoadImage(System.Byte[])">
            <summary>
            从数据中载入纹理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Tool.DuplicateTexture(UnityEngine.Texture2D)">
            <summary>
            复制一个纹理，让纹理可读可写
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Tool.bytesToHexString(System.Byte[])">
            <summary>
            字节数组转16进制字符串
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Tool.CalculUV(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            创建纹理UV
            </summary>
            <param name="sr">精灵矩形区域</param>
            <param name="w">纹理宽度</param>
            <param name="h">纹理高度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.Tool.CalculUVS(huqiang.Data.SpriteRectInfo[])">
            <summary>
            创建纹理UV数组
            </summary>
            <param name="sprites">精灵信息数组</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Pool.InstanceContext">
            <summary>
            实例联系上下文
            </summary>
        </member>
        <member name="F:huqiang.Pool.InstanceContext.Instance">
            <summary>
            游戏对象实例
            </summary>
        </member>
        <member name="F:huqiang.Pool.InstanceContext.Id">
            <summary>
            实例id
            </summary>
        </member>
        <member name="F:huqiang.Pool.InstanceContext.Type">
            <summary>
            对象类型, 所有组件的位或值
            </summary>
        </member>
        <member name="F:huqiang.Pool.InstanceContext.buffer">
            <summary>
            模型类型对应的缓存
            </summary>
        </member>
        <member name="F:huqiang.Pool.InstanceContext.Index">
            <summary>
            缓存中的位置索引
            </summary>
        </member>
        <member name="T:huqiang.Pool.ModelBuffer">
            <summary>
            模型缓存
            </summary>
        </member>
        <member name="M:huqiang.Pool.ModelBuffer.#ctor(System.Int64,System.Int32,System.Type[],huqiang.Data.Container{huqiang.Pool.InstanceContext})">
            <summary>
            构造函数
            </summary>
            <param name="type">对象类型, 所有组件的位或值</param>
            <param name="buffersize">缓存大小</param>
            <param name="typ">组件的类型信息</param>
            <param name="contain">联系上下文缓存</param>
        </member>
        <member name="M:huqiang.Pool.ModelBuffer.CreateObject">
            <summary>
            找回或创建一个新的实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.Pool.ModelBuffer.ReCycle(UnityEngine.GameObject)">
            <summary>
            回收一个实例
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:huqiang.AnimatBase">
            <summary>
            基本动画
            </summary>
        </member>
        <member name="F:huqiang.AnimatBase.m_time">
            <summary>
            总计时长
            </summary>
        </member>
        <member name="P:huqiang.AnimatBase.Delay">
            <summary>
            延迟启动时间
            </summary>
        </member>
        <member name="P:huqiang.AnimatBase.Time">
            <summary>
            总计时长
            </summary>
        </member>
        <member name="F:huqiang.AnimatBase.Loop">
            <summary>
            是否循环
            </summary>
        </member>
        <member name="F:huqiang.AnimatBase.c_time">
            <summary>
            播放累计时长
            </summary>
        </member>
        <member name="F:huqiang.AnimatBase.playing">
            <summary>
            播放状态
            </summary>
        </member>
        <member name="F:huqiang.AnimatBase.AutoHide">
            <summary>
            播放完毕自动隐藏
            </summary>
        </member>
        <member name="M:huqiang.AnimatBase.Play">
            <summary>
            开始播放
            </summary>
        </member>
        <member name="M:huqiang.AnimatBase.Pause">
            <summary>
            暂停播放
            </summary>
        </member>
        <member name="F:huqiang.AnimatBase.Linear">
            <summary>
            动画运动线
            </summary>
        </member>
        <member name="F:huqiang.AnimatBase.DataCache">
            <summary>
            用于缓存数据
            </summary>
        </member>
        <member name="M:huqiang.AnimatBase.SetParabola(huqiang.AnimatBase,UnityEngine.Vector2)">
            <summary>
            设置一个抛物线的中间点，x的值在0-1范围内,返回一个抛物线一般表达式的a，b，c的值，
            </summary>
            <param name="ani"></param>
            <param name="point">参数不能为(1,1)</param>
        </member>
        <member name="M:huqiang.AnimatBase.SetArc(huqiang.AnimatBase,System.Single)">
            <summary>
            设置一个单弧线
            </summary>
            <param name="ani"></param>
            <param name="r">弧度0-180</param>
        </member>
        <member name="M:huqiang.AnimatBase.SetSArc(huqiang.AnimatBase,System.Single,System.Single)">
            <summary>
            设置一个S行曲线
            </summary>
            <param name="ani"></param>
            <param name="x">0-0.5f</param>
            <param name="y">0-0.5f</param>
        </member>
        <member name="T:huqiang.AnimatInterface">
            <summary>
            动画接口
            </summary>
        </member>
        <member name="P:huqiang.AnimationBase.Count">
            <summary>
            获取当前对象池中对象的数量
            </summary>
        </member>
        <member name="M:huqiang.AnimationBase.Update">
            <summary>
            主更新函数，更新所有动画
            </summary>
        </member>
        <member name="M:huqiang.AnimationBase.AddAnimat(huqiang.AnimatInterface)">
            <summary>
            添加一个新动画，重复添加会造成多倍运行
            </summary>
            <param name="ani">动画接口</param>
        </member>
        <member name="M:huqiang.AnimationBase.ReleaseAnimat(huqiang.AnimatInterface)">
            <summary>
            删除动画
            </summary>
            <param name="ani">动画接口</param>
        </member>
        <member name="M:huqiang.AnimationBase.ReleaseAll">
            <summary>
            释放所有动画
            </summary>
        </member>
        <member name="M:huqiang.AnimationBase.ToDo(System.Single,System.Action{System.Object},System.Object)">
            <summary>
            委托某个事件在多少毫秒后执行
            </summary>
            <param name="time"></param>
            <param name="action"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:huqiang.AnimationBase.DoEvent(System.String)">
            <summary>
            执行某个事件
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:huqiang.AnimationBase.ClearEvent">
            <summary>
            清除所有事件
            </summary>
        </member>
        <member name="T:huqiang.AnimationManage">
            <summary>
            动画管理类，将所有动画添加至此类，进行统一更新
            </summary>
        </member>
        <member name="P:huqiang.AnimationManage.Manage">
            <summary>
            返回此类的唯一实例
            </summary>
        </member>
        <member name="T:huqiang.AnimationExtand">
            <summary>
            动画函数式编写扩展
            </summary>
        </member>
        <member name="M:huqiang.AnimationExtand.FindMoveAni(UnityEngine.Transform)">
            <summary>
            查询一个位移动画
            </summary>
            <param name="trans">实例目标</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.AnimationExtand.MoveTo(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean,System.Single,System.Action{huqiang.MoveAnimat},System.Boolean)">
            <summary>
            移动到某个位置
            </summary>
            <param name="trans">实例</param>
            <param name="pos">目标位置</param>
            <param name="time">总计事件</param>
            <param name="hide">完成后自动隐藏</param>
            <param name="delay">延迟启动</param>
            <param name="over">完毕后的回调函数</param>
            <param name="cover">是否覆盖已有的动画</param>
        </member>
        <member name="M:huqiang.AnimationExtand.FindRotateAni(UnityEngine.Transform)">
            <summary>
            查询一个旋转动画
            </summary>
            <param name="trans">实例目标</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.AnimationExtand.RotateTo(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean,System.Single,System.Action{huqiang.RotateAnimat},System.Boolean)">
            <summary>
            旋转到某个位置
            </summary>
            <param name="trans">实例对象</param>
            <param name="angle">目标欧拉角</param>
            <param name="time">总计时间</param>
            <param name="hide">完成后自动隐藏</param>
            <param name="delay">延迟启动</param>
            <param name="over">完毕后的回调函数</param>
            <param name="cover">是否覆盖已有的动画</param>
        </member>
        <member name="M:huqiang.AnimationExtand.FindScaleAni(UnityEngine.Transform)">
            <summary>
            查询一个缩放动画
            </summary>
            <param name="trans">实例目标</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.AnimationExtand.ScaleTo(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean,System.Single,System.Action{huqiang.ScaleAnimat},System.Boolean)">
            <summary>
            旋转到某个比例
            </summary>
            <param name="trans">实例对象</param>
            <param name="scale">目标比例</param>
            <param name="time">总计时间</param>
            <param name="hide">完成后自动隐藏</param>
            <param name="delay">延迟启动</param>
            <param name="over">完毕后的回调函数</param>
            <param name="cover">是否覆盖已有的动画</param>
        </member>
        <member name="M:huqiang.AnimationExtand.FindColorAni(huqiang.Core.HGUI.HGraphics)">
            <summary>
            查询一个颜色过度动画
            </summary>
            <param name="grap">实例目标</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.AnimationExtand.ColorTo(huqiang.Core.HGUI.HGraphics,UnityEngine.Color,System.Single,System.Single,System.Action{huqiang.ColorAnimat},System.Boolean)">
            <summary>
            颜色过渡动画
            </summary>
            <param name="grap">实例对象</param>
            <param name="col">目标颜色值</param>
            <param name="time">总计时间</param>
            <param name="delay">延迟启动</param>
            <param name="over">完毕后的回调函数</param>
            <param name="cover">是否覆盖已有的动画</param>
        </member>
        <member name="M:huqiang.AnimationExtand.FindSpritesAni(huqiang.Core.HGUI.HImage)">
            <summary>
            查询一个精灵动画
            </summary>
            <param name="img">实例目标</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.AnimationExtand.FindOrCreateSpritesAni(huqiang.Core.HGUI.HImage)">
            <summary>
            查询或创建一个精灵动画
            </summary>
            <param name="img">实例目标</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.AnimationExtand.Play(huqiang.Core.HGUI.HImage,UnityEngine.Sprite[],System.Single,System.Boolean,System.Action{huqiang.ImageAnimat},System.Boolean,System.Boolean)">
            <summary>
            播放一个精灵动画
            </summary>
            <param name="img">实例目标</param>
            <param name="sprites">精灵图集</param>
            <param name="inter">每帧间隔单位毫秒</param>
            <param name="loop">是否循环</param>
            <param name="over">完毕后的回调函数</param>
            <param name="hide">播放完自动隐藏</param>
            <param name="cover">是否覆盖已有的动画</param>
        </member>
        <member name="M:huqiang.AnimationExtand.Play(UnityEngine.Material,System.String,System.Single,System.Single,System.Single,System.Single,System.Action{huqiang.ShaderAnimat},System.Boolean)">
            <summary>
            更新材质球浮点参数动画
            </summary>
            <param name="mat">目标实例</param>
            <param name="name">属性名称</param>
            <param name="sv">开始值</param>
            <param name="ev">结束值</param>
            <param name="time">总计时间</param>
            <param name="delay">延迟开始时间</param>
            <param name="over">完毕后的回调函数</param>
            <param name="cover">是否覆盖已有的动画</param>
        </member>
        <member name="M:huqiang.AnimationExtand.Play(UnityEngine.Material,System.String,UnityEngine.Vector4,UnityEngine.Vector4,System.Single,System.Single,System.Action{huqiang.ShaderAnimat},System.Boolean)">
            <summary>
            更新材质球Vector4参数动画
            </summary>
            <param name="mat">目标实例</param>
            <param name="name">属性名称</param>
            <param name="sv">开始值</param>
            <param name="ev">结束值</param>
            <param name="time">总计时间</param>
            <param name="delay">延迟开始时间</param>
            <param name="over">完毕后的回调函数</param>
            <param name="cover">是否覆盖已有的动画</param>
        </member>
        <member name="M:huqiang.AnimationExtand.DoFillAmount(huqiang.Core.HGUI.HImage,System.Single,System.Single,System.Single,System.Action)">
            <summary>
            image的填充动画
            </summary>
            <param name="img">目标对象</param>
            <param name="end">目标值</param>
            <param name="time">总计时间</param>
            <param name="delay">延迟开始时间</param>
            <param name="over">完毕后的回调函数</param>
        </member>
        <member name="T:huqiang.LinearTransformation">
            <summary>
            线性变化值，参数范围为0-1
            </summary>
            <param name="sender"></param>
            <param name="ratio"></param>
            <returns></returns>
        </member>
        <member name="T:huqiang.Timer">
            <summary>
            定时器
            </summary>
        </member>
        <member name="F:huqiang.Timer.PlayStart">
            <summary>
            启动时的委托
            </summary>
        </member>
        <member name="F:huqiang.Timer.PlayOver">
            <summary>
            结束时的委托
            </summary>
        </member>
        <member name="M:huqiang.Timer.Update(System.Single)">
            <summary>
            每帧更新
            </summary>
            <param name="timeslice"></param>
        </member>
        <member name="M:huqiang.Timer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:huqiang.Timer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.ColorAnimat">
            <summary>
            颜色过渡动画
            </summary>
        </member>
        <member name="P:huqiang.ColorAnimat.Target">
            <summary>
            目标图形
            </summary>
        </member>
        <member name="M:huqiang.ColorAnimat.#ctor(huqiang.Core.HGUI.HGraphics)">
            <summary>
            构造函数
            </summary>
            <param name="img">图形实例对象</param>
        </member>
        <member name="F:huqiang.ColorAnimat.StartColor">
            <summary>
            开始颜色值
            </summary>
        </member>
        <member name="F:huqiang.ColorAnimat.EndColor">
            <summary>
            目标颜色值
            </summary>
        </member>
        <member name="M:huqiang.ColorAnimat.Update(System.Single)">
            <summary>
            状态更新
            </summary>
            <param name="time">帧时间</param>
        </member>
        <member name="M:huqiang.ColorAnimat.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.FloatAnimat`1">
            <summary>
            浮点值更新动画
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:huqiang.FloatAnimat`1.Target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="M:huqiang.FloatAnimat`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="tar">目标实例</param>
        </member>
        <member name="F:huqiang.FloatAnimat`1.ValueChanged">
            <summary>
            更新目标浮点值的委托
            </summary>
        </member>
        <member name="F:huqiang.FloatAnimat`1.PlayOver">
            <summary>
            更新完毕后的委托
            </summary>
        </member>
        <member name="F:huqiang.FloatAnimat`1.Start">
            <summary>
            开始值
            </summary>
        </member>
        <member name="F:huqiang.FloatAnimat`1.End">
            <summary>
            目标值
            </summary>
        </member>
        <member name="M:huqiang.FloatAnimat`1.Update(System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="time">每帧时间</param>
        </member>
        <member name="M:huqiang.FloatAnimat`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.Vector2Animat`1">
            <summary>
            二维向量更新动画
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:huqiang.Vector2Animat`1.Target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="M:huqiang.Vector2Animat`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="tar">目标实例</param>
        </member>
        <member name="F:huqiang.Vector2Animat`1.ValueChanged">
            <summary>
            更新目标二维向量的委托
            </summary>
        </member>
        <member name="F:huqiang.Vector2Animat`1.PlayOver">
            <summary>
            更新完毕后的委托
            </summary>
        </member>
        <member name="F:huqiang.Vector2Animat`1.Start">
            <summary>
            开始值
            </summary>
        </member>
        <member name="F:huqiang.Vector2Animat`1.End">
            <summary>
            目标值
            </summary>
        </member>
        <member name="M:huqiang.Vector2Animat`1.Update(System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="time">每帧时间</param>
        </member>
        <member name="M:huqiang.Vector2Animat`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.Vector3Animat`1">
            <summary>
            三维向量更新动画
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:huqiang.Vector3Animat`1.Target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="M:huqiang.Vector3Animat`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="tar">目标实例</param>
        </member>
        <member name="F:huqiang.Vector3Animat`1.ValueChanged">
            <summary>
            更新目标三维向量的委托
            </summary>
        </member>
        <member name="F:huqiang.Vector3Animat`1.PlayOver">
            <summary>
            更新完毕后的委托
            </summary>
        </member>
        <member name="F:huqiang.Vector3Animat`1.Start">
            <summary>
            开始值
            </summary>
        </member>
        <member name="F:huqiang.Vector3Animat`1.End">
            <summary>
            目标值
            </summary>
        </member>
        <member name="M:huqiang.Vector3Animat`1.Update(System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="time">每帧时间</param>
        </member>
        <member name="M:huqiang.Vector3Animat`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.ImageAnimat">
            <summary>
            精灵动画
            </summary>
        </member>
        <member name="P:huqiang.ImageAnimat.image">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="M:huqiang.ImageAnimat.#ctor(huqiang.Core.HGUI.HImage)">
            <summary>
            构造函数
            </summary>
            <param name="img">目标实例</param>
        </member>
        <member name="M:huqiang.ImageAnimat.Play(UnityEngine.Sprite[])">
            <summary>
            播放精灵集
            </summary>
            <param name="gif"></param>
        </member>
        <member name="F:huqiang.ImageAnimat.conds">
            <summary>
            多少帧时触发事件的集合
            </summary>
        </member>
        <member name="F:huqiang.ImageAnimat.allConds">
            <summary>
            帧事件缓存
            </summary>
        </member>
        <member name="M:huqiang.ImageAnimat.SetSprites(UnityEngine.Sprite[][])">
            <summary>
            设置精灵缓存
            </summary>
            <param name="sprites"></param>
        </member>
        <member name="M:huqiang.ImageAnimat.SetFrameEvent(System.Int32[])">
            <summary>
            设置帧事件触发条件
            </summary>
            <param name="conditions">触发帧数组</param>
        </member>
        <member name="M:huqiang.ImageAnimat.SetFrameEvent(System.Int32[][])">
            <summary>
            设置触发帧事件缓存
            </summary>
            <param name="conditions">触发帧事件缓存</param>
        </member>
        <member name="M:huqiang.ImageAnimat.Play(System.Int32,System.Boolean)">
            <summary>
            播放帧动画
            </summary>
            <param name="index">触发帧事件索引</param>
            <param name="cover">是否覆盖原来的状态</param>
        </member>
        <member name="M:huqiang.ImageAnimat.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:huqiang.ImageAnimat.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="F:huqiang.ImageAnimat.PlayOver">
            <summary>
            播放完毕时的委托
            </summary>
        </member>
        <member name="F:huqiang.ImageAnimat.Playing">
            <summary>
            播放中的委托
            </summary>
        </member>
        <member name="F:huqiang.ImageAnimat.FrameEvent">
            <summary>
            帧事件触发委托
            </summary>
        </member>
        <member name="F:huqiang.ImageAnimat.Loop">
            <summary>
            是否循环
            </summary>
        </member>
        <member name="P:huqiang.ImageAnimat.IsPlaying">
            <summary>
            播放状态
            </summary>
        </member>
        <member name="P:huqiang.ImageAnimat.PlayIndex">
            <summary>
            波放到的当前帧
            </summary>
        </member>
        <member name="F:huqiang.ImageAnimat.PlayTime">
            <summary>
            当前播放时间
            </summary>
        </member>
        <member name="F:huqiang.ImageAnimat.Interval">
            <summary>
            每帧画面间隔时间,单位毫秒
            </summary>
        </member>
        <member name="F:huqiang.ImageAnimat.autoHide">
            <summary>
            播放完毕自动隐藏
            </summary>
        </member>
        <member name="M:huqiang.ImageAnimat.Update(System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="time">每帧时间</param>
        </member>
        <member name="M:huqiang.ImageAnimat.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.MoveAnimat">
            <summary>
            位移动画
            </summary>
        </member>
        <member name="M:huqiang.MoveAnimat.#ctor(UnityEngine.Transform)">
            <summary>
            构造函数
            </summary>
            <param name="t">目标对象实例</param>
        </member>
        <member name="F:huqiang.MoveAnimat.Target">
            <summary>
            目标对象实例
            </summary>
        </member>
        <member name="F:huqiang.MoveAnimat.StartPosition">
            <summary>
            开始位置
            </summary>
        </member>
        <member name="F:huqiang.MoveAnimat.EndPosition">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:huqiang.MoveAnimat.PlayStart">
            <summary>
            动画启动时的委托
            </summary>
        </member>
        <member name="F:huqiang.MoveAnimat.PlayOver">
            <summary>
            动画结束时的委托
            </summary>
        </member>
        <member name="M:huqiang.MoveAnimat.Update(System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="timeslice"></param>
        </member>
        <member name="M:huqiang.MoveAnimat.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.Progress">
            <summary>
            AssetBundle进度动画
            </summary>
        </member>
        <member name="T:huqiang.PropertyFloat">
            <summary>
            属性动画，用于更新某个类的某个属性的动画,使用反射,不推荐使用
            </summary>
        </member>
        <member name="M:huqiang.PropertyFloat.#ctor(System.Object,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="cla">目标对象</param>
            <param name="PropertyName">属性名称</param>
        </member>
        <member name="F:huqiang.PropertyFloat.StartValue">
            <summary>
            开始值
            </summary>
        </member>
        <member name="F:huqiang.PropertyFloat.EndValue">
            <summary>
            结束值
            </summary>
        </member>
        <member name="F:huqiang.PropertyFloat.Delay">
            <summary>
            延迟开始
            </summary>
        </member>
        <member name="F:huqiang.PropertyFloat.Time">
            <summary>
            总计时间
            </summary>
        </member>
        <member name="F:huqiang.PropertyFloat.Target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="M:huqiang.PropertyFloat.Reset">
            <summary>
            重置状态
            </summary>
        </member>
        <member name="M:huqiang.PropertyFloat.Update(huqiang.PropertyFloat,System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="t">目标属性</param>
            <param name="timeslice">时间片</param>
        </member>
        <member name="T:huqiang.PropertyAnimat">
            <summary>
            属性动画基本类
            </summary>
        </member>
        <member name="F:huqiang.PropertyAnimat.PlayStart">
            <summary>
            启动时的委托函数
            </summary>
        </member>
        <member name="F:huqiang.PropertyAnimat.PlayOver">
            <summary>
            播放完毕时的委托函数
            </summary>
        </member>
        <member name="M:huqiang.PropertyAnimat.AddDelegate(huqiang.PropertyFloat)">
            <summary>
            添加属性更新委托
            </summary>
            <param name="pf"></param>
        </member>
        <member name="M:huqiang.PropertyAnimat.RemoveDelegate(huqiang.PropertyFloat)">
            <summary>
            移除属性更新委托
            </summary>
            <param name="pf"></param>
        </member>
        <member name="M:huqiang.PropertyAnimat.Update(System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="timeslice">时间片</param>
        </member>
        <member name="M:huqiang.PropertyAnimat.Play">
            <summary>
            开始播放
            </summary>
        </member>
        <member name="M:huqiang.PropertyAnimat.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.RotateAnimat">
            <summary>
            旋转动画
            </summary>
        </member>
        <member name="M:huqiang.RotateAnimat.#ctor(UnityEngine.Transform)">
            <summary>
            构造函数
            </summary>
            <param name="t">目标对象</param>
        </member>
        <member name="F:huqiang.RotateAnimat.Target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:huqiang.RotateAnimat.StartAngle">
            <summary>
            开始角度
            </summary>
        </member>
        <member name="F:huqiang.RotateAnimat.EndAngle">
            <summary>
            结束角度
            </summary>
        </member>
        <member name="F:huqiang.RotateAnimat.PlayStart">
            <summary>
            启动时的委托函数
            </summary>
        </member>
        <member name="F:huqiang.RotateAnimat.PlayOver">
            <summary>
            播放完毕时的委托函数
            </summary>
        </member>
        <member name="M:huqiang.RotateAnimat.Update(System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="timeslice">时间片</param>
        </member>
        <member name="M:huqiang.RotateAnimat.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.ScaleAnimat">
            <summary>
            尺寸缩放动画
            </summary>
        </member>
        <member name="M:huqiang.ScaleAnimat.#ctor(UnityEngine.Transform)">
            <summary>
            构造函数
            </summary>
            <param name="t">目标对象</param>
        </member>
        <member name="F:huqiang.ScaleAnimat.Target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:huqiang.ScaleAnimat.StartScale">
            <summary>
            开始比例
            </summary>
        </member>
        <member name="F:huqiang.ScaleAnimat.EndScale">
            <summary>
            目标比例
            </summary>
        </member>
        <member name="F:huqiang.ScaleAnimat.PlayStart">
            <summary>
            启动时的委托函数
            </summary>
        </member>
        <member name="F:huqiang.ScaleAnimat.PlayOver">
            <summary>
            播放完毕时的委托函数
            </summary>
        </member>
        <member name="M:huqiang.ScaleAnimat.Update(System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="timeslice">时间片</param>
        </member>
        <member name="M:huqiang.ScaleAnimat.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.ShaderFloat">
            <summary>
            用于控制着色器浮点数的动画
            </summary>
        </member>
        <member name="F:huqiang.ShaderFloat.StartValue">
            <summary>
            开始值
            </summary>
        </member>
        <member name="F:huqiang.ShaderFloat.EndValue">
            <summary>
            目标值
            </summary>
        </member>
        <member name="F:huqiang.ShaderFloat.Delay">
            <summary>
            延迟开始时间,单位毫秒
            </summary>
        </member>
        <member name="F:huqiang.ShaderFloat.Time">
            <summary>
            总计时间
            </summary>
        </member>
        <member name="F:huqiang.ShaderFloat.ParameterName">
            <summary>
            着色器属性参数名
            </summary>
        </member>
        <member name="F:huqiang.ShaderFloat.Target">
            <summary>
            目标材质球
            </summary>
        </member>
        <member name="M:huqiang.ShaderFloat.Reset">
            <summary>
            状态重置
            </summary>
        </member>
        <member name="M:huqiang.ShaderFloat.Update(huqiang.ShaderFloat,System.Single)">
            <summary>
            更新状态
            </summary>
            <param name="t">着色器目标</param>
            <param name="timeslice">时间片</param>
        </member>
        <member name="T:huqiang.ShaderVector4">
            <summary>
            用于控制着色器四维向量的动画
            </summary>
        </member>
        <member name="F:huqiang.ShaderVector4.StartValue">
            <summary>
            开始值
            </summary>
        </member>
        <member name="F:huqiang.ShaderVector4.EndValue">
            <summary>
            目标值
            </summary>
        </member>
        <member name="F:huqiang.ShaderVector4.Delay">
            <summary>
            延迟开始时间,单位毫秒
            </summary>
        </member>
        <member name="F:huqiang.ShaderVector4.Time">
            <summary>
            总计时间
            </summary>
        </member>
        <member name="F:huqiang.ShaderVector4.ParameterName">
            <summary>
            着色器属性参数名
            </summary>
        </member>
        <member name="F:huqiang.ShaderVector4.Target">
            <summary>
            目标材质球
            </summary>
        </member>
        <member name="M:huqiang.ShaderVector4.Reset">
            <summary>
            状态重置
            </summary>
        </member>
        <member name="M:huqiang.ShaderVector4.Update(huqiang.ShaderVector4,System.Single)">
            <summary>
            更新状态
            </summary>
            <param name="t">着色器目标</param>
            <param name="timeslice">时间片</param>
        </member>
        <member name="T:huqiang.ShaderAnimat">
            <summary>
            着色器动画基本类
            </summary>
        </member>
        <member name="F:huqiang.ShaderAnimat.PlayStart">
            <summary>
            启动时的委托函数
            </summary>
        </member>
        <member name="F:huqiang.ShaderAnimat.PlayOver">
            <summary>
            播放完毕时的委托函数
            </summary>
        </member>
        <member name="M:huqiang.ShaderAnimat.FindFloatShader(System.String)">
            <summary>
            查询某个着色器浮点属性
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.ShaderAnimat.FindVectorShader(System.String)">
            <summary>
            查询某个着色器向量属性
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="P:huqiang.ShaderAnimat.Target">
            <summary>
            目标材质球
            </summary>
        </member>
        <member name="M:huqiang.ShaderAnimat.#ctor(UnityEngine.Material)">
            <summary>
            构造函数
            </summary>
            <param name="m">材质球</param>
        </member>
        <member name="M:huqiang.ShaderAnimat.Update(System.Single)">
            <summary>
            帧更新
            </summary>
            <param name="timeslice">时间片</param>
        </member>
        <member name="M:huqiang.ShaderAnimat.Play">
            <summary>
            开始播放
            </summary>
        </member>
        <member name="M:huqiang.ShaderAnimat.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.Composite">
            <summary>
            复合型UI组件基类
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Composite.BufferData">
            <summary>
            数据缓存
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Composite.Enity">
            <summary>
            UI实体
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Composite.Frame">
            <summary>
            当前更新帧,防止每帧重复更新
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.Composite.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">模型数据</param>
            <param name="element">UI元素实例</param>
        </member>
        <member name="M:huqiang.UIComposite.Composite.Update(System.Single)">
            <summary>
            更新函数
            </summary>
            <param name="time"></param>
        </member>
        <member name="F:huqiang.UIComposite.DataGridColumn.width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DataGridColumn.Head">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DataGridColumn.mod">
            <summary>
            ui布局模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DataGridColumn.datas">
            <summary>
            此列绑定的数据列表
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DataGridColumn.itemCreator">
            <summary>
            此列的UI模型初始化创建器
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DataGridColumn.buf">
            <summary>
            此列的重复回收利用缓存
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DataGridColumn.SetItemUpdate``2(System.Action{``0,``1})">
            <summary>
            设置此列的Item更新模板和回调函数
            </summary>
            <typeparam name="T">UI反射模板</typeparam>
            <typeparam name="U">数据模板</typeparam>
            <param name="action">回调函数</param>
        </member>
        <member name="M:huqiang.UIComposite.DataGridColumn.CreateEnity">
            <summary>
            创建一个实例,如果回收缓存中有就从缓存中提取
            </summary>
            <returns></returns>
        </member>
        <member name="T:huqiang.UIComposite.ModelConstructor">
            <summary>
            模型构造器
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ModelConstructor.initializer">
            <summary>
            UI初始化器
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ModelConstructor.Create">
            <summary>
            创建一个UI实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ModelConstructor.Update(System.Object,System.Object)">
            <summary>
            更新项目
            </summary>
            <param name="obj">UI实体</param>
            <param name="dat">数据实体</param>
        </member>
        <member name="T:huqiang.UIComposite.ModelMiddleware`2">
            <summary>
            模型中间件
            </summary>
            <typeparam name="T">UI模型</typeparam>
            <typeparam name="U">数据模型</typeparam>
        </member>
        <member name="M:huqiang.UIComposite.ModelMiddleware`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ModelMiddleware`2.Create">
            <summary>
            创建UI实例
            </summary>
            <returns></returns>
        </member>
        <member name="F:huqiang.UIComposite.ModelMiddleware`2.Invoke">
            <summary>
            项目更新委托
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ModelMiddleware`2.Update(System.Object,System.Object)">
            <summary>
            项目更新
            </summary>
            <param name="obj">ui实例</param>
            <param name="dat">数据实例</param>
        </member>
        <member name="T:huqiang.UIComposite.DataGrid">
            <summary>
            网格数据滚动框
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DataGrid.CursorX">
            <summary>
            拖动列宽度时,光标显示的Icon
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DataGrid.CursorY">
            <summary>
            拖动行高时,光标显示的Icon,暂未开发
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DataGrid.Position">
            <summary>
            当前滚动的位置
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.DataGrid.BindingData">
            <summary>
            所有列
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DataGrid.ColumnResized">
            <summary>
            当用户改变列宽时调用此委托
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化布局
            </summary>
            <param name="mod">数据模型</param>
            <param name="element">UI元素主体</param>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.Refresh">
            <summary>
            初始化设置和绑定数据后调用此函数,刷新显示内容
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.AddColumn(huqiang.UIComposite.DataGridColumn)">
            <summary>
            添加列
            </summary>
            <param name="column">列数据实体</param>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.RemoveColumn(System.Int32)">
            <summary>
            移除列
            </summary>
            <param name="index">列索引</param>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.ClearData">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.ClearColumn">
            <summary>
            清除所有列
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.AddRow(huqiang.UIComposite.DataGridItemContext[])">
            <summary>
            添加一行
            </summary>
            <param name="content">数据</param>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.RemoveRow(System.Int32)">
            <summary>
            移除一行数据
            </summary>
            <param name="index">行索引</param>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.SetHeadUpdate``2(System.Action{``0,``1})">
            <summary>
            设置标头更新函数回调
            </summary>
            <typeparam name="T">UI模型</typeparam>
            <typeparam name="U">数据模型</typeparam>
            <param name="action">更新回调</param>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.SetItemUpdate``2(System.Action{``0,``1})">
            <summary>
            设置列数据项更新函数
            </summary>
            <typeparam name="T">UI模型</typeparam>
            <typeparam name="U">数据模型</typeparam>
            <param name="action">更新回调</param>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.LimitX(huqiang.UIEvent.UserEvent,System.Single)">
            <summary>
            X轴向的滚动限制
            </summary>
            <param name="callBack">用户事件</param>
            <param name="x">移动距离</param>
        </member>
        <member name="M:huqiang.UIComposite.DataGrid.LimitY(huqiang.UIEvent.UserEvent,System.Single)">
            <summary>
            Y轴向的滚动限制
            </summary>
            <param name="callBack">用户事件</param>
            <param name="y">移动距离</param>
        </member>
        <member name="T:huqiang.UIComposite.DesignedDockPanel">
            <summary>
            可设计停靠面板
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockPanel.Auxiliary">
            <summary>
            辅助类数据模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockPanel.Drag">
            <summary>
            可拖放的UI元素实体
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockPanel.contents">
            <summary>
            辅助停靠内容列表
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockPanel.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化函数
            </summary>
            <param name="fake">数据模型</param>
            <param name="element">UI主体元素</param>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockPanel.ShowAllDocker">
            <summary>
            显示所有可停靠区域
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockPanel.HideAllDocker">
            <summary>
            隐藏所有可停靠区域
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockPanel.Draging(huqiang.UIEvent.UserAction)">
            <summary>
            拖放中
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockPanel.DragEnd(huqiang.UIEvent.UserAction)">
            <summary>
            拖放完毕
            </summary>
            <param name="action"></param>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockPanel.DragContent">
            <summary>
            当前拖放的内容
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockPanel.DragAuxiliary">
            <summary>
            当前拖放的停靠辅助实体
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockPanel.MainContent">
            <summary>
            当前拖放的停靠辅助实体的主体内容
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.DesignedDockAuxiliary">
            <summary>
            停靠辅助实体
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.DesignedDockAuxiliary.ItemContent">
            <summary>
            项目内容
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockAuxiliary.ItemContent.Close">
            <summary>
            窗口关闭按钮
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockAuxiliary.ItemContent.window">
            <summary>
            窗口实体
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.ItemContent.LoadPopWindow``1">
            <summary>
            载入一个窗口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockAuxiliary.dockArea">
            <summary>
            停靠的区域
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockAuxiliary.model">
            <summary>
            辅助区域模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockAuxiliary.docker">
            <summary>
            停靠的坐标变换
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockAuxiliary.tab">
            <summary>
            表主体元素
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockAuxiliary.control">
            <summary>
            控制表
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DesignedDockAuxiliary.Cover">
            <summary>
            停靠区域显示元素
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.#ctor(huqiang.UIComposite.DesignedDockPanel)">
            <summary>
            构造函数
            </summary>
            <param name="panel">可设计停靠面板载体</param>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.Initial(huqiang.UIComposite.DockpanelArea,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="area">停靠面板区域实例</param>
            <param name="mod">停靠辅助区域模板</param>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.SetParent(huqiang.UIComposite.DockpanelArea)">
            <summary>
            附属于某个停靠区域
            </summary>
            <param name="area">停靠区域</param>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.AddContent(System.String)">
            <summary>
            添加一个内容标签,将使用默认模板
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.AddContent(huqiang.UIComposite.DesignedDockAuxiliary.ItemContent)">
            <summary>
            添加一个内容
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.RemoveContent(huqiang.UIComposite.TabControl.TableContent)">
            <summary>
            移除内容
            </summary>
            <param name="con">内容实例</param>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.ShowContent(huqiang.UIComposite.TabControl.TableContent)">
            <summary>
            展示内容
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.ShowDocker">
            <summary>
            显示可停靠区域
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.HideDocker">
            <summary>
            隐藏可停靠区域
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.AddArea(huqiang.UIComposite.DockpanelArea.Dock,System.Single)">
            <summary>
            添加可停靠区域
            </summary>
            <param name="dock">区域停靠方位</param>
            <param name="r">占用大小</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.DesignedDockAuxiliary.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.DockPanelLine">
            <summary>
            停靠面板的线
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanelLine.CursorX">
            <summary>
            拖动纵向线时,光标显示的Icon
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanelLine.CursorY">
            <summary>
            拖动横向线时,光标显示的Icon
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanelLine.layout">
            <summary>
            目标面板
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.DockPanelLine.direction">
            <summary>
            线的方向
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.DockPanelLine.realLine">
            <summary>
            需要绘制线
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.#ctor(huqiang.UIComposite.DockPanel,huqiang.Core.HGUI.UIElement,huqiang.UIComposite.Direction,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="lay">目标面板</param>
            <param name="mod">线模型</param>
            <param name="dir">方向</param>
            <param name="real">是否需要绘制显示</param>
        </member>
        <member name="F:huqiang.UIComposite.DockPanelLine.Left">
            <summary>
            左边相邻的所有区域
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanelLine.Right">
            <summary>
            右边相邻的所有区域
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanelLine.Top">
            <summary>
            顶部相邻的区域
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanelLine.Down">
            <summary>
            底部相邻的区域
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanelLine.AdjacentLines">
            <summary>
            所有与之相邻的线
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.SizeChanged">
            <summary>
            当临边的线改动时会牵动此线的尺寸改变
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.SetLineStart(huqiang.UIComposite.DockPanelLine)">
            <summary>
            设置起点相关的线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.SetLineEnd(huqiang.UIComposite.DockPanelLine)">
            <summary>
            设置终点相关的线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.MergeLeft(huqiang.UIComposite.DockPanelLine)">
            <summary>
            向左合并
            </summary>
            <param name="line">目标线</param>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.MergeRight(huqiang.UIComposite.DockPanelLine)">
            <summary>
            向右合并
            </summary>
            <param name="line">目标线</param>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.MergeTop(huqiang.UIComposite.DockPanelLine)">
            <summary>
            向上合并
            </summary>
            <param name="line">目标线</param>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.MergeDown(huqiang.UIComposite.DockPanelLine)">
            <summary>
            向下合并
            </summary>
            <param name="line">目标线</param>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.SaveToDataBuffer(huqiang.Data.FakeStructArray,System.Int32)">
            <summary>
            存储布局数据
            </summary>
            <param name="fake"></param>
            <param name="index"></param>
        </member>
        <member name="M:huqiang.UIComposite.DockPanelLine.LoadFromBuffer(huqiang.Data.FakeStructArray,System.Int32)">
            <summary>
            从布局数据中载入
            </summary>
            <param name="fake">数据缓存</param>
            <param name="index">索引</param>
        </member>
        <member name="T:huqiang.UIComposite.DockpanelArea">
            <summary>
            停靠面板区域
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockpanelArea.model">
            <summary>
            区域模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockpanelArea.layout">
            <summary>
            停靠面板主体
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.#ctor(huqiang.UIComposite.DockPanel)">
            <summary>
            构造函数
            </summary>
            <param name="lay">停靠面板主体</param>
        </member>
        <member name="F:huqiang.UIComposite.DockpanelArea.Left">
            <summary>
            左边相邻的线
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockpanelArea.Right">
            <summary>
            右边相邻的线
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockpanelArea.Top">
            <summary>
            顶部相邻的线
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockpanelArea.Down">
            <summary>
            底部相邻的线
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.SetLeftLine(huqiang.UIComposite.DockPanelLine)">
            <summary>
            设置左边的线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.SetRightLine(huqiang.UIComposite.DockPanelLine)">
            <summary>
            设置右边的线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.SetTopLine(huqiang.UIComposite.DockPanelLine)">
            <summary>
            设置顶部的线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.SetDownLine(huqiang.UIComposite.DockPanelLine)">
            <summary>
            设置底部的线
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.SizeChanged">
            <summary>
            区域尺寸被改变了,调用此函数
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.AddAreaR(huqiang.UIComposite.DockpanelArea.Dock,System.Single)">
            <summary>
            添加一个区域
            </summary>
            <param name="dock">停靠方位</param>
            <param name="r">区域大小比例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.AddArea(huqiang.UIComposite.DockpanelArea.Dock,System.Single)">
            <summary>
            添加一个区域
            </summary>
            <param name="dock">停靠方位</param>
            <param name="w">所占宽度</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.SaveToDataBuffer(huqiang.Data.FakeStructArray,System.Int32)">
            <summary>
            存储布局信息
            </summary>
            <param name="fake">数据缓存</param>
            <param name="index">索引位置</param>
        </member>
        <member name="M:huqiang.UIComposite.DockpanelArea.LoadFromBuffer(huqiang.Data.FakeStructArray,System.Int32)">
            <summary>
            从缓存中读取布局信息
            </summary>
            <param name="fake">数据缓存</param>
            <param name="index">索引位置</param>
        </member>
        <member name="T:huqiang.UIComposite.DockPanel">
            <summary>
            停靠面板
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.AreaWidth">
            <summary>
            区域最小宽度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.LineWidth">
            <summary>
            线宽
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.lines">
            <summary>
            线列表
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.areas">
            <summary>
            区域列表
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.Left">
            <summary>
            左边相邻的线
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.Right">
            <summary>
            右边相邻的线
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.Top">
            <summary>
            顶部相邻的线
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.Down">
            <summary>
            底部相邻的线
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.LineMod">
            <summary>
            线模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.AreaMod">
            <summary>
            区域模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.LineLevel">
            <summary>
            管理线的父物体
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.AreaLevel">
            <summary>
            管理区域的父物体
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.LayOutChanged">
            <summary>
            当布局被改变时回调
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.DockPanel.MainArea">
            <summary>
            主区域
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockPanel.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="fake">数据模型</param>
            <param name="element">元素主体</param>
        </member>
        <member name="M:huqiang.UIComposite.DockPanel.SizeChanged(huqiang.Core.HGUI.UIElement)">
            <summary>
            当元素尺寸被改变了
            </summary>
            <param name="mod">ui实体</param>
        </member>
        <member name="M:huqiang.UIComposite.DockPanel.Refresh">
            <summary>
            刷新显示
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DockPanel.LockLayout">
            <summary>
            锁定布局
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DockPanel.SaveToDataBuffer(huqiang.Data.DataBuffer)">
            <summary>
            储存数据布局信息
            </summary>
            <param name="db">缓存实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.DockPanel.GetLineID(huqiang.UIComposite.DockPanelLine)">
            <summary>
            获取id的存储id
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.DockPanel.GetLine(System.Int32)">
            <summary>
            通过ID查找线
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.DockPanel.GetAreaID(huqiang.UIComposite.DockpanelArea)">
            <summary>
            获取区域id
            </summary>
            <param name="area">区域实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.DockPanel.GetArea(System.Int32)">
            <summary>
            通过id查找区域
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.UIComposite.DragContent">
            <summary>
            内容拖拽框
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.DragContent.FreezeDirection">
            <summary>
            冻结方向
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DragContent.ScrollNone(huqiang.UIEvent.UserEvent,UnityEngine.Vector2@,System.Single@,System.Single@)">
            <summary>
            固定滚动,撞到边界立马停止
            </summary>
            <param name="eventCall">用户事件</param>
            <param name="v">参考移动量</param>
            <param name="x">限定移动量x</param>
            <param name="y">限定移动量y</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.DragContent.BounceBack(huqiang.UIEvent.UserEvent,UnityEngine.Vector2@,System.Single@,System.Single@)">
            <summary>
            回弹滚动,撞到边界会有减速回弹效果
            </summary>
            <param name="eventCall">用户事件</param>
            <param name="v">参考移动量</param>
            <param name="x">衰减移动量x</param>
            <param name="y">衰减移动量y</param>
            <returns></returns>
        </member>
        <member name="F:huqiang.UIComposite.DragContent.Size">
            <summary>
            滚动框尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DragContent.Position">
            <summary>
            当前内容坐标
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DragContent.ContentSize">
            <summary>
            内容尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DragContent.freeze">
            <summary>
            冻结方向
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DragContent.scrollType">
            <summary>
            滚动类型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DragContent.Content">
            <summary>
            内容主体元素
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DragContent.eventCall">
            <summary>
            事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DragContent.Scroll">
            <summary>
            滚动事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DragContent.ScrollEnd">
            <summary>
            滚动完毕事件
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DragContent.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="fake">数据模型</param>
            <param name="script">元素主体</param>
        </member>
        <member name="M:huqiang.UIComposite.DragContent.Move(UnityEngine.Vector2)">
            <summary>
            移动内容
            </summary>
            <param name="v">移动量</param>
        </member>
        <member name="P:huqiang.UIComposite.DragContent.Pos">
            <summary>
            y轴位置,范围0-1
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.DropdownEx">
            <summary>
            下拉框组件
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:huqiang.UIComposite.DropdownEx.scrollY" -->
        <member name="F:huqiang.UIComposite.DropdownEx.MaxHeight">
            <summary>
            滚动框的最大高度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DropdownEx.PopOffset">
            <summary>
            弹出时的偏移位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DropdownEx.ItemSize">
            <summary>
            每个项目的尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DropdownEx.callBack">
            <summary>
            主体事件
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.DropdownEx.SelectIndex">
            <summary>
            选中项的索引
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DropdownEx.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">模式数据</param>
            <param name="script">主体元素</param>
        </member>
        <member name="F:huqiang.UIComposite.DropdownEx.OnSelectChanged">
            <summary>
            选择项改变事件
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.DropdownEx.ItemUpdate(huqiang.UIComposite.PopItemMod,System.Object,System.Int32)">
            <summary>
            项更新函数
            </summary>
            <param name="g">UI模型实例</param>
            <param name="o">数据实例</param>
            <param name="index">数据索引</param>
        </member>
        <member name="M:huqiang.UIComposite.DropdownEx.Update(System.Single)">
            <summary>
            更新
            </summary>
            <param name="time">时间片,单位毫秒</param>
        </member>
        <member name="T:huqiang.UIComposite.GridScroll">
            <summary>
            网格滚动框
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.GridScroll.Column">
            <summary>
            列数
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.GridScroll.Row">
            <summary>
            行数
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.GridScroll.Position">
            <summary>
            当前滚动的位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.GridScroll.eventCall">
            <summary>
            事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.GridScroll.Scroll">
            <summary>
            滚动事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.GridScroll.ScrollEnd">
            <summary>
            滚动结束事件
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.GridScroll.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="fake">数据模型</param>
            <param name="script">主体元素</param>
        </member>
        <member name="M:huqiang.UIComposite.GridScroll.Order(System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="size">视口尺寸</param>
            <param name="pos">视口位置</param>
        </member>
        <member name="M:huqiang.UIComposite.GridScroll.Refresh(UnityEngine.Vector2)">
            <summary>
            刷新到指定位置
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:huqiang.UIComposite.GridScroll.Refresh">
            <summary>
            刷新到默认位置
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.InputBox">
            <summary>
            文本输入框
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.InputBox.ReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.InputBox.DataContext">
            <summary>
            联系上下文
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.InputBox.TipString">
            <summary>
            提示文本
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.InputBox.InputString">
            <summary>
            输入文本
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.InputBox.ShowString">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.InputBox.SelectString">
            <summary>
            选中文本
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.InputBox.TextCom">
            <summary>
            文本显示载体
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.InputBox.contentType">
            <summary>
            文本类型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.InputBox.InputEvent">
            <summary>
            文本输入事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.InputBox.OnSubmit">
            <summary>
            文本提交事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.InputBox.OnDone">
            <summary>
            文本输入完毕事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.InputBox.OnValueChanged">
            <summary>
            输入内容改变事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.InputBox.ValidateChar">
            <summary>
            验证新输入的字符
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">模型数据</param>
            <param name="element">元素主体</param>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.OnMouseDown(huqiang.UIEvent.UserAction,huqiang.Core.HGUI.PressInfo@)">
            <summary>
            鼠标按压
            </summary>
            <param name="action">用户事件</param>
            <param name="press">按压基本信息</param>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.OnClick(huqiang.UIEvent.UserAction)">
            <summary>
            用户单击
            </summary>
            <param name="action">用户事件</param>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.OnLostFocus(huqiang.UIEvent.UserAction)">
            <summary>
            失去焦点
            </summary>
            <param name="action">用户事件</param>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.OnDrag(huqiang.UIEvent.UserAction,huqiang.Core.HGUI.PressInfo@)">
            <summary>
            拖动选择
            </summary>
            <param name="action">用户事件</param>
            <param name="press">当前按压信息</param>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.SetShowText">
            <summary>
            应用当前可显示文本内容
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.DeleteSelectString">
            <summary>
            删除选中文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.DeleteLast">
            <summary>
            删除光标前面的字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.DeleteNext">
            <summary>
            删除光标后面的字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.InsertString(System.String)">
            <summary>
            插入字符串
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.PointerMoveLeft">
            <summary>
            光标向左移动
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.PointerMoveRight">
            <summary>
            光标向右移动
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.PointerMoveUp">
            <summary>
            光标向上移动
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.PointerMoveDown">
            <summary>
            光标向下移动
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.PointerMoveStart">
            <summary>
            光标移动到文本开头
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.PointerMoveEnd">
            <summary>
            光标移动到文本结尾
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.Update(System.Single)">
            <summary>
            更新显示内容
            </summary>
            <param name="time">时间片</param>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.UpdateCaret">
            <summary>
            更新光标
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.InputBox.ReplaceTarget">
            <summary>
            更换的目标载体
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.InputBox.Replace(huqiang.Core.HGUI.HText,huqiang.UIEvent.UserEvent,huqiang.UIEvent.UserAction)">
            <summary>
            更换目标载体
            </summary>
            <param name="text">目标实例</param>
            <param name="user">用户事件</param>
            <param name="action">用户动作</param>
        </member>
        <member name="F:huqiang.UIComposite.OptionsType.Radio">
            <summary>
            单选
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.OptionsType.MultiChoice">
            <summary>
            多选
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.OptionGroup">
            <summary>
            选项组,用于单选和多选按钮
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.OptionGroup.options">
            <summary>
            选择类型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.OptionGroup.MultiSelect">
            <summary>
            多选列表
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.OptionGroup.AddEvent(huqiang.UIEvent.UserEvent)">
            <summary>
            事件添加到当前组
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:huqiang.UIComposite.OptionGroup.AddEvent(huqiang.Core.HGUI.UIElement)">
            <summary>
            添加UI元素到当前组
            </summary>
            <param name="element"></param>
        </member>
        <member name="F:huqiang.UIComposite.OptionGroup.SelectChanged">
            <summary>
            选中项被改变事件
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.OptionGroup.LastSelect">
            <summary>
            最后选中的事件
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.OptionGroup.Selecet">
            <summary>
            设置或获取选中事件
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.Paint">
            <summary>
            滑板
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.Paint.DrawModel">
            <summary>
            绘制状态
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Paint.Width">
            <summary>
            画板宽度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Paint.Height">
            <summary>
            画板高度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Paint.BrushSize">
            <summary>
            画笔尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Paint.BrushColor">
            <summary>
            画笔颜色
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Paint.drawModel">
            <summary>
            当前绘制状态
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.Paint.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="fake">数据模型</param>
            <param name="script">主体元素</param>
        </member>
        <member name="T:huqiang.UIComposite.DrawArea">
            <summary>
            绘制区域
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DrawArea.hw">
            <summary>
            线宽
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DrawArea.Start">
            <summary>
            起点
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DrawArea.End">
            <summary>
            终点
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.DrawArea.box">
            <summary>
            起点和终点生成的盒子
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollType.None">
            <summary>
            撞到边界立即停止
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollType.Loop">
            <summary>
            循环滚动
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollType.BounceBack">
            <summary>
            撞到边界回弹
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.ScrollInfo">
            <summary>
            滚动内容附件信息,使用ScrollHelper收集
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollInfo.scrollType">
            <summary>
            滚动类型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollInfo.minBox">
            <summary>
            最小尺寸
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.Constructor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.Constructor.Create">
            <summary>
            UI实体创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.Constructor.Call(System.Object,System.Object,System.Int32)">
            <summary>
            项目更新函数
            </summary>
            <param name="obj">UI实体对象</param>
            <param name="dat">数据实体对象</param>
            <param name="index">数据索引</param>
        </member>
        <member name="F:huqiang.UIComposite.Constructor.create">
            <summary>
            自动创建
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Constructor.Update">
            <summary>
            项目更新委托
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Constructor.reflect">
            <summary>
            反射组件,用于热更新
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Constructor.initializer">
            <summary>
            UI初始化器
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.Middleware`2">
            <summary>
            构造中间件
            </summary>
            <typeparam name="T">UI模型</typeparam>
            <typeparam name="U">数据模型</typeparam>
        </member>
        <member name="M:huqiang.UIComposite.Middleware`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.Middleware`2.Create">
            <summary>
            创建UI实体
            </summary>
            <returns></returns>
        </member>
        <member name="F:huqiang.UIComposite.Middleware`2.Invoke">
            <summary>
            项目更新委托
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.Middleware`2.Call(System.Object,System.Object,System.Int32)">
            <summary>
            项目更新函数
            </summary>
            <param name="obj">UI实体</param>
            <param name="dat">数据实体</param>
            <param name="index">数据索引</param>
        </member>
        <member name="T:huqiang.UIComposite.HotMiddleware">
            <summary>
            热更新构造中间件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.HotMiddleware.Context">
            <summary>
            联系上下文
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.HotMiddleware.creator">
            <summary>
            实体创建委托
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.HotMiddleware.caller">
            <summary>
            项目更新委托
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.HotMiddleware.Create">
            <summary>
            UI实体创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.HotMiddleware.Call(System.Object,System.Object,System.Int32)">
            <summary>
            项目更新函数
            </summary>
            <param name="obj">UI实体</param>
            <param name="dat">数据实体</param>
            <param name="index">数据索引</param>
        </member>
        <member name="T:huqiang.UIComposite.ScrollContent">
            <summary>
            滚动内容管理器
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.Tolerance">
            <summary>
            滚动公差值
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.scrollType">
            <summary>
            滚动类型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.Size">
            <summary>
            滚动框的尺寸
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollContent.ActualSize">
            <summary>
            内容的实际尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.ItemSize">
            <summary>
            项目尺寸
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollContent.ItemMod">
            <summary>
            项目模板
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollContent.BindingData">
            <summary>
            传入类型为IList
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollContent.DataLength">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.GetData(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="index">数据索引</param>
            <returns></returns>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.ItemOffset">
            <summary>
            项目其实偏移位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.MinBox">
            <summary>
            最小尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.max_count">
            <summary>
            最大缓存
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.Items">
            <summary>
            UI项目列表
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.Buffer">
            <summary>
            UI项目缓存列表
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.Recycler">
            <summary>
             UI项目回收列表
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.ItemRecycle">
            <summary>
            当某个ui超出Mask边界，被回收时调用
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.Main">
            <summary>
            主体对象
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollContent.m_slider">
            <summary>
            滑块条
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollContent.Slider">
            <summary>
            滑块条
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.SetItemMod(System.String)">
            <summary>
            设置项目模型
            </summary>
            <param name="name">模型名称</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">模型数据</param>
            <param name="script">主体元素</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.Refresh(System.Single,System.Single)">
            <summary>
            刷新显示UI
            </summary>
            <param name="x">位置x</param>
            <param name="y">位置y</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.CreateItem">
            <summary>
            创建项目实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.SetItemUpdate``2(System.Action{``0,``1,System.Int32},System.Boolean)">
            <summary>
            设置项目跟新函数
            </summary>
            <typeparam name="T">UI模板</typeparam>
            <typeparam name="U">数据模板</typeparam>
            <param name="action">项目更新回调</param>
            <param name="reflect">使用反射</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.SetItemUpdate(huqiang.UIComposite.HotMiddleware)">
            <summary>
            热更新无法跨域,使用此函数
            </summary>
            <param name="action"></param>
            <param name="reflect"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.Order(System.Single,System.Boolean)">
            <summary>
            UI排序
            </summary>
            <param name="os"></param>
            <param name="force"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.Clear">
            <summary>
            清除UI资源
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.PushItems">
            <summary>
            压入缓存
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.PopItem(System.Int32)">
            <summary>
            从缓存中提取
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.RecycleInside(System.Int32,System.Int32)">
            <summary>
            回收边界内的项目
            </summary>
            <param name="down">上边界</param>
            <param name="top">下边界</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.RecycleOutside(System.Int32,System.Int32)">
            <summary>
            回收超出边界的项目
            </summary>
            <param name="down">上边界</param>
            <param name="top">下边界</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.RecycleRemain">
            <summary>
            回收缓存中剩余的项目
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.RecycleItem(huqiang.UIComposite.ScrollItem)">
            <summary>
            回收一个项目
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.ScrollNone(huqiang.UIEvent.UserEvent,UnityEngine.Vector2@,System.Single@,System.Single@)">
            <summary>
            固定滚动,撞到边界立马停止
            </summary>
            <param name="eventCall">用户事件</param>
            <param name="v">参考移动量</param>
            <param name="x">限定移动量x</param>
            <param name="y">限定移动量y</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.ScrollLoop(huqiang.UIEvent.UserEvent,UnityEngine.Vector2@,System.Single@,System.Single@)">
            <summary>
            无限滚动
            </summary>
            <param name="eventCall">用户事件</param>
            <param name="v">参考移动量</param>
            <param name="x">修正移动量x</param>
            <param name="y">修正移动量y</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.BounceBack(huqiang.UIEvent.UserEvent,UnityEngine.Vector2@,System.Single@,System.Single@)">
            <summary>
            回弹滚动,撞到边界会有减速回弹效果
            </summary>
            <param name="eventCall">用户事件</param>
            <param name="v">参考移动量</param>
            <param name="x">衰减移动量x</param>
            <param name="y">衰减移动量y</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ScrollContent.ItemUpdate(System.Object,System.Object,System.Int32)">
            <summary>
            更新项目
            </summary>
            <param name="obj">UI实例</param>
            <param name="dat">数据实例</param>
            <param name="index">数据索引</param>
        </member>
        <member name="T:huqiang.UIComposite.ScrollItem">
            <summary>
            滚动框项目
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollItem.index">
            <summary>
            当前绑定数据索引
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollItem.target">
            <summary>
            主体坐标变换
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollItem.datacontext">
            <summary>
            联系上下文
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollItem.obj">
            <summary>
            附加对象
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.ScrollX">
            <summary>
            横向滚动框
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollX.CenterScroll(huqiang.UIComposite.ScrollX)">
            <summary>
            滚动项目居中
            </summary>
            <param name="scroll"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollX.CenterScrollByIndex(huqiang.UIComposite.ScrollX,System.Int32)">
            <summary>
            滚动居中
            </summary>
            <param name="scroll">横向滚动框</param>
            <param name="index">索引</param>
        </member>
        <member name="F:huqiang.UIComposite.ScrollX.eventCall">
            <summary>
            主体事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollX.width">
            <summary>
            内容总计宽度
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollX.Point">
            <summarx>
            滚动的当前位置，从0开始
            </summarx>
        </member>
        <member name="P:huqiang.UIComposite.ScrollX.Pos">
            <summarx>
            0-1之间
            </summarx>
        </member>
        <member name="F:huqiang.UIComposite.ScrollX.ItemDockCenter">
            <summary>
            项目每次滚动居中
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollX.ContentSize">
            <summary>
            内容占用尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollX.DynamicSize">
            <summary>
            动态尺寸,自动对齐
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollX.Slider">
            <summary>
            滑块条,可以为空
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollX.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">数据模型</param>
            <param name="script">主体元素</param>
        </member>
        <member name="F:huqiang.UIComposite.ScrollX.Scroll">
            <summary>
            滚动事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollX.ScrollStart">
            <summary>
            开始滚动事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollX.ScrollEnd">
            <summary>
            滚动结束事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollX.DecayRate">
            <summary>
            滚动衰减率,越接近1衰减越慢
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollX.Scrolling(huqiang.UIEvent.UserEvent,UnityEngine.Vector2)">
            <summarx>
            
            </summarx>
            <param name="back"></param>
            <param name="v">移动的实际像素位移</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollX.Calcul">
            <summary>
            内容尺寸计算
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollX.Refresh(System.Single,System.Single)">
            <summary>
            刷新
            </summary>
            <param name="x">横向位置</param>
            <param name="y">无效</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollX.ShowBxIndex(System.Int32)">
            <summarx>
            指定下标处的位置重排
            </summarx>
            <param name="_index"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollX.GetCenterItem(System.Collections.Generic.List{huqiang.UIComposite.ScrollItem})">
            <summary>
            获取最接近中心的项目
            </summary>
            <param name="items">项目列表</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.UIComposite.ScrollY">
            <summary>
            纵向滚动框
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollY.CenterScroll(huqiang.UIComposite.ScrollY)">
            <summary>
            滚动项目居中
            </summary>
            <param name="scroll"></param>
        </member>
        <member name="F:huqiang.UIComposite.ScrollY.eventCall">
            <summary>
            主体事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollY.height">
            <summary>
            内容总宽度
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollY.Point">
            <summary>
            滚动的当前位置，从0开始
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollY.Pos">
            <summary>
            0-1之间
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollY.ItemDockCenter">
            <summary>
            项目每次滚动居中
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollY.ContentSize">
            <summary>
            内容总尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollY.DynamicSize">
            <summary>
            动态尺寸,用以适应宽度
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollY.Slider">
            <summary>
            滑块条,可以为空
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollY.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">数据模型</param>
            <param name="script">主体元素</param>
        </member>
        <member name="F:huqiang.UIComposite.ScrollY.Scroll">
            <summary>
            滚动事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollY.ScrollStart">
            <summary>
            开始滚动事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollY.ScrollEnd">
            <summary>
            结束滚动事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollY.DragEnd">
            <summary>
            光标拖拽完毕
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollY.DecayRate">
            <summary>
            滚动衰减率,越接近1衰减越慢
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollY.Scrolling(huqiang.UIEvent.UserEvent,UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="back"></param>
            <param name="v">移动的实际像素位移</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollY.Calcul">
            <summary>
            内容尺寸计算
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollY.Refresh(System.Single,System.Single)">
            <summary>
            刷新
            </summary>
            <param name="x">无效</param>
            <param name="y">纵向位置</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollY.ShowByIndex(System.Int32)">
            <summary>
            指定下标处的位置重排
            </summary>
            <param name="_index"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollY.GetCenterItem(System.Collections.Generic.List{huqiang.UIComposite.ScrollItem})">
            <summary>
            获取最接近中心的项目
            </summary>
            <param name="items">项目列表</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.UIComposite.ScrollYExtand">
            <summary>
            带有标题的,可以展开收缩的
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.ScrollYExtand.DataTemplate">
            <summary>
            数据模板
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.DataTemplate.Title">
            <summary>
            标题对象实例
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.DataTemplate.Tail">
            <summary>
            尾部对象实例
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.DataTemplate.Data">
            <summary>
            绑定数据
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.DataTemplate.Hide">
            <summary>
            隐藏数据
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.DataTemplate.HideTail">
            <summary>
            隐藏尾部
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.ScrollYExtand.DataTemplate.Height">
            <summary>
            数据高度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.DataTemplate.ShowHeight">
            <summary>
            最后计算高度,用于比对是否需要重新计算
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.DataTemplate.aniTime">
            <summary>
            展开动画时间
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.eventCall">
            <summary>
            事件主体
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.Scroll">
            <summary>
            滚动事件
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="fake">数据模型</param>
            <param name="element">主体元素</param>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.Size">
            <summary>
            滚动框尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.TitleSize">
            <summary>
            标头模型尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.ItemSize">
            <summary>
            项目尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.TailSize">
            <summary>
            尾部尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.TitleMod">
            <summary>
            标头模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.TailMod">
            <summary>
            尾部模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.ItemMod">
            <summary>
            项目模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.Body">
            <summary>
            项目载体模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.BindingData">
            <summary>
            绑定模板数据
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.TitleOffset">
            <summary>
            标头偏移位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.TailOffset">
            <summary>
            尾部偏移位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ScrollYExtand.ItemOffset">
            <summary>
            项目偏移位置
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.Refresh(System.Single)">
            <summary>
            所有设置完毕或更新数据时刷新
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.CalculSize">
            <summary>
            计算尺寸
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.SetSize(UnityEngine.Vector2)">
            <summary>
            设置滚动框尺寸
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.Dispose">
            <summary>
            释放缓存资源
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.SetTitleUpdate``2(System.Action{``0,``1,System.Int32})">
            <summary>
            设置标头更新函数
            </summary>
            <typeparam name="T">UI模板</typeparam>
            <typeparam name="U">数据模板</typeparam>
            <param name="action">更新函数回调</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.SetTitleUpdate(huqiang.UIComposite.HotMiddleware)">
            <summary>
            设置标头更新函数
            </summary>
            <param name="constructor">热更新的中间件</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.SetItemUpdate``2(System.Action{``0,``1,System.Int32})">
            <summary>
            设置项目更新函数
            </summary>
            <typeparam name="T">UI模板</typeparam>
            <typeparam name="U">数据模板</typeparam>
            <param name="action">更新函数回调</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.SetItemUpdate(huqiang.UIComposite.HotMiddleware)">
            <summary>
            设置项目更新函数
            </summary>
            <param name="constructor">热更新的中间件</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.SetTailUpdate``2(System.Action{``0,``1,System.Int32})">
            <summary>
            设置标尾更新函数
            </summary>
            <typeparam name="T">UI模板</typeparam>
            <typeparam name="U">数据模板</typeparam>
            <param name="action">更新函数回调</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.SetTailUpdate(huqiang.UIComposite.HotMiddleware)">
            <summary>
            设置标尾更新函数
            </summary>
            <param name="constructor">热更新的中间件</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.ItemUpdate(System.Object,System.Object,System.Int32,huqiang.UIComposite.Constructor)">
            <summary>
            更新项目
            </summary>
            <param name="obj">UI实例对象</param>
            <param name="dat">数据实例对象</param>
            <param name="index">数据索引</param>
            <param name="con">构造器</param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.CreateItem(System.Collections.Generic.List{huqiang.UIComposite.ScrollItem},huqiang.UIComposite.Constructor,huqiang.Data.FakeStruct,UnityEngine.Transform)">
            <summary>
            创建项目
            </summary>
            <param name="buffer">项目缓存</param>
            <param name="con">构造器</param>
            <param name="mod">UI模型数据</param>
            <param name="parent">父坐标变换</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.PushItems(System.Collections.Generic.List{huqiang.UIComposite.ScrollItem},System.Collections.Generic.List{huqiang.UIComposite.ScrollItem})">
            <summary>
            将源项目压入目标项目
            </summary>
            <param name="tar"></param>
            <param name="src"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.PushItems">
            <summary>
            将项目压入缓存
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.RecycleRemain">
            <summary>
            回收未被重复利用的项目
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.PopItem(System.Collections.Generic.List{huqiang.UIComposite.ScrollItem},System.Int32)">
            <summary>
            弹出一个目标项目与数据索引相同的项目
            </summary>
            <param name="tar">缓存</param>
            <param name="index">数据索引</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.BounceBack(huqiang.UIEvent.UserEvent,UnityEngine.Vector2@,System.Single@,System.Single@)">
            <summary>
            回弹滚动
            </summary>
            <param name="eventCall">用户事件</param>
            <param name="v">参考移动量</param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.HideSection(huqiang.UIComposite.ScrollYExtand.DataTemplate)">
            <summary>
            隐藏节点,带动画
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.OpenSection(huqiang.UIComposite.ScrollYExtand.DataTemplate)">
            <summary>
            展开节点,带动画
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:huqiang.UIComposite.ScrollYExtand.Update(System.Single)">
            <summary>
            帧更新,包含展开收缩动画
            </summary>
            <param name="time">时间片</param>
        </member>
        <member name="F:huqiang.UIComposite.Direction.Horizontal">
            <summary>
            水平方向
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Direction.Vertical">
            <summary>
            垂直方向
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.StackPanel">
            <summary>
            栈面板,用于排序
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.StackPanel.direction">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.StackPanel.spacing">
            <summary>
            项目之间的间隔
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.StackPanel.FixedSize">
            <summary>
            开启固定尺寸,会改变项目的尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.StackPanel.FixedSizeRatio">
            <summary>
            固定尺寸比例
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.StackPanel.ItemOffset">
            <summary>
            项目偏移位置
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.StackPanel.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">模型数据</param>
            <param name="script">元素主体</param>
        </member>
        <member name="M:huqiang.UIComposite.StackPanel.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.StackPanel.Update(System.Single)">
            <summary>
            更新
            </summary>
            <param name="time"></param>
        </member>
        <member name="T:huqiang.UIComposite.TabControl">
            <summary>
            表控制器
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.TabControl.TableContent">
            <summary>
            表内容
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.TableContent.Parent">
            <summary>
            父控制器
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.TableContent.Item">
            <summary>
            项目主体
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.TableContent.eventCall">
            <summary>
            主体事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.TableContent.Label">
            <summary>
            标签
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.TableContent.Back">
            <summary>
            背景
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.TableContent.Content">
            <summary>
            绑定内容
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.TableContent.Context">
            <summary>
            联系上下文
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.TabControl.HeadDock">
            <summary>
            选项头停靠方向
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.Head">
            <summary>
            标头
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.Items">
            <summary>
            所有项目父坐标变换
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.Content">
            <summary>
            所有项目的父元素
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.Item">
            <summary>
            项目模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.CurContent">
            <summary>
            当前激活状态的表内容
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.SelectChanged">
            <summary>
            激活的内容被改变事件
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.TabControl.headDock">
            <summary>
            头部停靠位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.headHigh">
            <summary>
            标头高度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.contents">
            <summary>
            所有内容列表
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.SelectColor">
            <summary>
            当前被选中项的背景色
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TabControl.HoverColor">
            <summary>
            鼠标停靠时的背景色
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">数据模型</param>
            <param name="element">元素主体</param>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.AddContent(huqiang.Core.HGUI.UIElement,System.String)">
            <summary>
            使用默认标签页
            </summary>
            <param name="model"></param>
            <param name="label"></param>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.AddContent(huqiang.UIComposite.TabControl.TableContent)">
            <summary>
            使用自定义标签页,标签模型自行管理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="dat"></param>
            <param name="callback"></param>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.RemoveContent(huqiang.UIComposite.TabControl.TableContent)">
            <summary>
            移除某个标签和其内容
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.ReleseContent(huqiang.UIComposite.TabControl.TableContent)">
            <summary>
            释放某个标签和其内容,其对象会被回收
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.AddTable(huqiang.UIComposite.TabControl.TableContent)">
            <summary>
            添加一张表
            </summary>
            <param name="table">实例</param>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.ShowContent(huqiang.UIComposite.TabControl.TableContent)">
            <summary>
            显示某张表
            </summary>
            <param name="content">实例</param>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.ExistContent(huqiang.UIComposite.TabControl.TableContent)">
            <summary>
            是否存在此表
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.ItemClick(huqiang.UIEvent.UserEvent,huqiang.UIEvent.UserAction)">
            <summary>
            标头被单击的默认处理函数
            </summary>
            <param name="callBack"></param>
            <param name="action"></param>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.ItemPointEntry(huqiang.UIEvent.UserEvent,huqiang.UIEvent.UserAction)">
            <summary>
            标头项鼠标进入默认处理函数
            </summary>
            <param name="callBack"></param>
            <param name="action"></param>
        </member>
        <member name="M:huqiang.UIComposite.TabControl.ItemPointLeave(huqiang.UIEvent.UserEvent,huqiang.UIEvent.UserAction)">
            <summary>
            标头项鼠标离开默认处理函数
            </summary>
            <param name="callBack"></param>
            <param name="action"></param>
        </member>
        <member name="T:huqiang.UIComposite.TreeViewNode">
            <summary>
            属性框节点数据
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeViewNode.expand">
            <summary>
            展开
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.TreeViewNode.content">
            <summary>
            显示内容
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeViewNode.context">
            <summary>
            绑定的数据,联系上下文
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeViewNode.offset">
            <summary>
            偏移位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeViewNode.child">
            <summary>
            子节点
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TreeViewNode.Add(huqiang.UIComposite.TreeViewNode)">
            <summary>
            添加子节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:huqiang.UIComposite.TreeViewNode.SetParent(huqiang.UIComposite.TreeViewNode)">
            <summary>
            设置父节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:huqiang.UIComposite.TreeViewNode.parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.TreeViewNode.Level">
            <summary>
            获取层级
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TreeViewNode.Find(System.Int32[])">
            <summary>
            通过层级查找节点
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.TreeViewNode.Expand">
            <summary>
            展开子节点
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.TreeViewItem">
            <summary>
            属性框节点UI
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeViewItem.target">
            <summary>
            主体游戏对象
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeViewItem.Text">
            <summary>
            文本内容展示主体
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeViewItem.Item">
            <summary>
            项目事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeViewItem.node">
            <summary>
            关联的节点
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.TVConstructor">
            <summary>
            树形框项目构造器
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TVConstructor.initializer">
            <summary>
            UI初始化器
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TVConstructor.Create">
            <summary>
            创建UI实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.TVConstructor.Update(huqiang.UIComposite.TreeViewItem,huqiang.UIComposite.TreeViewNode)">
            <summary>
            更新内容
            </summary>
            <param name="obj"></param>
            <param name="dat"></param>
        </member>
        <member name="T:huqiang.UIComposite.TVMiddleware`2">
            <summary>
            属性框项目中间件
            </summary>
            <typeparam name="T">UI模型</typeparam>
            <typeparam name="U">数据模型</typeparam>
        </member>
        <member name="M:huqiang.UIComposite.TVMiddleware`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TVMiddleware`2.Create">
            <summary>
            创建UI实体
            </summary>
            <returns></returns>
        </member>
        <member name="F:huqiang.UIComposite.TVMiddleware`2.Invoke">
            <summary>
            内容更新委托
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TVMiddleware`2.Update(huqiang.UIComposite.TreeViewItem,huqiang.UIComposite.TreeViewNode)">
            <summary>
            更新内容
            </summary>
            <param name="obj"></param>
            <param name="dat"></param>
        </member>
        <member name="T:huqiang.UIComposite.HotTVMiddleware">
            <summary>
            热更新中间件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.HotTVMiddleware.Context">
            <summary>
            联系上下文
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.HotTVMiddleware.creator">
            <summary>
            UI创建函数委托
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.HotTVMiddleware.caller">
            <summary>
            UI内容更新委托
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.HotTVMiddleware.Create">
            <summary>
            创建UI实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.HotTVMiddleware.Update(huqiang.UIComposite.TreeViewItem,huqiang.UIComposite.TreeViewNode)">
            <summary>
            更新内容
            </summary>
            <param name="obj">ui实体</param>
            <param name="dat">数据实体</param>
        </member>
        <member name="T:huqiang.UIComposite.TreeView">
            <summary>
            树形框
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeView.Size">
            <summary>
            树形框尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeView.ItemSize">
            <summary>
            项目节点尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeView.Root">
            <summary>
            根节点
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeView.ItemHigh">
            <summary>
            项目高度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeView.eventCall">
            <summary>
            主体事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeView.ItemMod">
            <summary>
            项目模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeView.swap">
            <summary>
            交换缓存
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.TreeView.SelectChanged">
            <summary>
            项目选择被改变事件
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.TreeView.SelectNode">
            <summary>
            当前选中节点
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.#ctor">
            <summary>
            构造函数,初始化缓存
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="fake">数据模型</param>
            <param name="script">元素主体</param>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.Scrolling(huqiang.UIEvent.UserEvent,UnityEngine.Vector2)">
            <summary>
            
            </summary>
            <param name="back"></param>
            <param name="v">移动的实际像素位移</param>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.Refresh">
            <summary>
            刷新显示
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.RecycleItem">
            <summary>
            回收未被利用的项目
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.CreateItem">
            <summary>
            创建项目实例,如果缓存中有则从缓存中提前
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.LimitX(huqiang.UIEvent.UserEvent,System.Single)">
            <summary>
            限制横向滚动
            </summary>
            <param name="callBack">用户事件</param>
            <param name="x">参考移动距离</param>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.LimitY(huqiang.UIEvent.UserEvent,System.Single)">
            <summary>
            限制纵向滚动
            </summary>
            <param name="callBack">用户事件</param>
            <param name="x">参考移动距离</param>
        </member>
        <member name="P:huqiang.UIComposite.TreeView.PercentageX">
            <summary>
            横向滚动百分比0-1
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.TreeView.PercentageY">
            <summary>
            纵向滚动百分比0-1
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.DefultItemClick(huqiang.UIEvent.UserEvent,huqiang.UIEvent.UserAction)">
            <summary>
            项目的默认单击事件
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.SetItemUpdate``2(System.Action{``0,``1})">
            <summary>
            设置项目更新函数
            </summary>
            <typeparam name="T">ui模型</typeparam>
            <typeparam name="U">数据模型</typeparam>
            <param name="action">更新函数委托</param>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.SetItemUpdate(huqiang.UIComposite.HotTVMiddleware)">
            <summary>
            设置项目更新,用于热更新
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:huqiang.UIComposite.TreeView.Clear">
            <summary>
            清除缓存资源
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Linker.enityModel">
            <summary>
            实体模型,用于计算实体尺寸
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.Linker.ElementCount">
            <summary>
            元素个数
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.Linker.buffer">
            <summary>
            连接模型缓存
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.Linker.CreateUI">
            <summary>
            创建一个连接模型
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.Linker.GetItemSize(System.Object)">
            <summary>
            获取项目尺寸,如果没有则返回默认高度40
            </summary>
            <param name="u">模型实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.Linker.RefreshItem(System.Object,System.Object,System.Int32)">
            <summary>
            刷新项目内容
            </summary>
            <param name="t">项目UI实例</param>
            <param name="u">数据实例</param>
            <param name="index">数据索引</param>
        </member>
        <member name="M:huqiang.UIComposite.Linker.RecycleItem(huqiang.UIComposite.LinkerMod)">
            <summary>
            回收项目连接器
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:huqiang.UIComposite.Linker.PopItem(System.Int32)">
            <summary>
            弹出一个项目连接器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.Linker.ClearIndex">
            <summary>
            清除索引
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.Linker.GetElementCount(UnityEngine.Transform)">
            <summary>
            获取子元素计数
            </summary>
            <param name="trans"></param>
        </member>
        <member name="T:huqiang.UIComposite.UILinker`2">
            <summary>
            泛型连接器
            </summary>
            <typeparam name="T">模型</typeparam>
            <typeparam name="U">数据</typeparam>
        </member>
        <member name="M:huqiang.UIComposite.UILinker`2.#ctor(huqiang.UIComposite.UIContainer,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="container">容器实例</param>
            <param name="mod">模型名称</param>
        </member>
        <member name="M:huqiang.UIComposite.UILinker`2.#ctor(huqiang.UIComposite.UIContainer,huqiang.Data.FakeStruct)">
            <summary>
            构造函数
            </summary>
            <param name="container">模型名称</param>
            <param name="mod">模式数据</param>
        </member>
        <member name="M:huqiang.UIComposite.UILinker`2.InsertData(`1)">
            <summary>
            插入数据
            </summary>
            <param name="dat"></param>
        </member>
        <member name="M:huqiang.UIComposite.UILinker`2.AddData(`1)">
            <summary>
            添加数据
            </summary>
            <param name="dat"></param>
        </member>
        <member name="M:huqiang.UIComposite.UILinker`2.AddAndMove(`1,System.Single)">
            <summary>
            添加数据并移动指定长度
            </summary>
            <param name="dat">数据</param>
            <param name="h">数据UI高度</param>
        </member>
        <member name="M:huqiang.UIComposite.UILinker`2.AddAndMoveEnd(`1,System.Single)">
            <summary>
            添加数据并移动到底部
            </summary>
            <param name="dat">数据</param>
            <param name="h">数据UI高度</param>
        </member>
        <member name="M:huqiang.UIComposite.UILinker`2.CreateUI">
            <summary>
            创建项目连接器
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.UILinker`2.GetItemSize(System.Object)">
            <summary>
            获取项目尺寸
            </summary>
            <param name="u">项目实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.UILinker`2.RefreshItem(System.Object,System.Object,System.Int32)">
            <summary>
            刷新项目显示内容
            </summary>
            <param name="t">项目UI实例</param>
            <param name="u">数据实例</param>
            <param name="index">数据索引</param>
        </member>
        <member name="T:huqiang.UIComposite.ObjectLinker">
            <summary>
            对象型连接器，用用于热更新块
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ObjectLinker.ItemUpdate">
            <summary>
            项目更新委托
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ObjectLinker.ItemCreate">
            <summary>
            项目连接器创建委托
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.ObjectLinker.CalculItemHigh">
            <summary>
            项目高度计算委托
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.ObjectLinker.#ctor(huqiang.UIComposite.UIContainer)">
            <summary>
            构造函数
            </summary>
            <param name="container">容器实例</param>
        </member>
        <member name="M:huqiang.UIComposite.ObjectLinker.AddData(System.Object)">
            <summary>
            添加一条数据
            </summary>
            <param name="dat"></param>
        </member>
        <member name="M:huqiang.UIComposite.ObjectLinker.CreateUI">
            <summary>
            创建UI项目连接器
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.ObjectLinker.RefreshItem(System.Object,System.Object,System.Int32)">
            <summary>
            刷新项目内容
            </summary>
            <param name="t">项目实例</param>
            <param name="u">数据实例</param>
            <param name="index">数据索引</param>
        </member>
        <member name="T:huqiang.UIComposite.BindingData">
            <summary>
            绑定数据
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.BindingData.offset">
            <summary>
            容器中的偏移位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.BindingData.width">
            <summary>
            内容宽度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.BindingData.high">
            <summary>
            内容高度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.BindingData.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.BindingData.linker">
            <summary>
            连接器
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.BindingData.layouts">
            <summary>
            布局数据缓存
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.BindingData.ApplayLayout(UnityEngine.Transform)">
            <summary>
            应用布局数据
            </summary>
            <param name="trans"></param>
        </member>
        <member name="M:huqiang.UIComposite.BindingData.LoadLayout(UnityEngine.Transform)">
            <summary>
            保存实例的布局数据
            </summary>
            <param name="trans"></param>
        </member>
        <member name="T:huqiang.UIComposite.UIContainer">
            <summary>
            UI容器
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.linker">
            <summary>
            连接器
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.mod">
            <summary>
            连接器模型
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.UI">
            <summary>
            UI实例
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.Data">
            <summary>
            数据实例
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.binding">
            <summary>
            绑定数据
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.Index">
            <summary>
            在容器中的索引
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.pos">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.size">
            <summary>
            当前尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.main">
            <summary>
            主体实例对象
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.offset">
            <summary>
            容器中的偏移位置
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.Item.high">
            <summary>
            内容高度
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.eventCall">
            <summary>
            主体事件
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.UIContainer.OutRatio">
            <summary>
            最大值滚动框的0.5倍
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.ScrollOutDown">
            <summary>
            用于上拉刷新
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.ScrollOutTop">
            <summary>
            用于下拉刷新
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.model">
            <summary>
            模型集合
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIContainer.linkers">
            <summary>
            连接器列表
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.UIContainer.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="fake">数据模型</param>
            <param name="script">元素主体</param>
        </member>
        <member name="P:huqiang.UIComposite.UIContainer.DataCount">
            <summary>
            数据计数
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.UIContainer.InsertData(huqiang.UIComposite.Linker,System.Object)">
            <summary>
            插入数据
            </summary>
            <param name="linker">连接器</param>
            <param name="data">数据实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.UIContainer.AddData(huqiang.UIComposite.Linker,System.Object)">
            <summary>
            添加数据
            </summary>
            <param name="linker">连接器</param>
            <param name="data">数据实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.UIContainer.AddAndMove(huqiang.UIComposite.Linker,System.Object,System.Single)">
            <summary>
            添加数据并移动指定长度
            </summary>
            <param name="linker">连接器</param>
            <param name="data">数据实例</param>
            <param name="h">高度</param>
        </member>
        <member name="M:huqiang.UIComposite.UIContainer.AddAndMoveEnd(huqiang.UIComposite.Linker,System.Object,System.Single)">
            <summary>
            添加数据并移动到底部
            </summary>
            <param name="linker">连接器</param>
            <param name="data">数据实例</param>
            <param name="h">数据高度</param>
        </member>
        <member name="M:huqiang.UIComposite.UIContainer.MoveBack(System.Single)">
            <summary>
            向起点滚动
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:huqiang.UIComposite.UIContainer.MoveForward(System.Single)">
            <summary>
            向终点滚动
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:huqiang.UIComposite.UIContainer.BounceBack(huqiang.UIEvent.UserEvent,UnityEngine.Vector2@)">
            <summary>
            滚动回弹限定
            </summary>
            <param name="eventCall">用户事件</param>
            <param name="v">参考移动量</param>
        </member>
        <member name="M:huqiang.UIComposite.UICreator.CreateElement(UnityEngine.Vector3,UnityEngine.Vector2,System.String,UnityEngine.Transform)">
            <summary>
            创建一个元素
            </summary>
            <param name="pos">位置</param>
            <param name="size">尺寸</param>
            <param name="name">名称</param>
            <param name="parent">父坐标变换</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.UICreator.CreateHImage(UnityEngine.Vector3,UnityEngine.Vector2,System.String,UnityEngine.Transform)">
            <summary>
            创建一个图像
            </summary>
            <param name="pos">位置</param>
            <param name="size">尺寸</param>
            <param name="name">名称</param>
            <param name="parent">父坐标变换</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.UICreator.CreateHText(UnityEngine.Vector3,UnityEngine.Vector2,System.String,UnityEngine.Transform)">
            <summary>
            创建一个文本
            </summary>
            <param name="pos">位置</param>
            <param name="size">尺寸</param>
            <param name="name">名称</param>
            <param name="parent">父坐标变换</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIComposite.UICreator.CreateHLine(UnityEngine.Vector3,UnityEngine.Vector2,System.String,UnityEngine.Transform)">
            <summary>
            创建一个画线面板
            </summary>
            <param name="pos">位置</param>
            <param name="size">尺寸</param>
            <param name="name">名称</param>
            <param name="parent">父坐标变换</param>
            <returns></returns>
        </member>
        <member name="T:huqiang.UIComposite.UIDate">
            <summary>
            日历组件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIDate.StartYear">
            <summary>
            开始的年份
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIDate.EndYear">
            <summary>
            结束的年份
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.UIDate.YearUnit">
            <summary>
            年份的单位
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.UIDate.MonUnit">
            <summary>
            月份的单位
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.UIDate.DayUnit">
            <summary>
            日的单位
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.UIDate.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">数据模型</param>
            <param name="element">元素主体</param>
        </member>
        <member name="F:huqiang.UIComposite.UIDate.year">
            <summary>
            年
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIDate.month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIDate.day">
            <summary>
            日
            </summary>
        </member>
        <member name="T:huqiang.UIComposite.UIPalette">
            <summary>
            调色板
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIPalette.SelectColor">
            <summary>
            选中颜色值
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIPalette.ColorChanged">
            <summary>
            选中色被改变事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIPalette.TemplateChanged">
            <summary>
            模板改变事件
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.UIPalette.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="fake">模型数据</param>
            <param name="element">元素主体</param>
        </member>
        <member name="T:huqiang.UIComposite.UIRocker">
            <summary>
            摇杆
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIRocker.Nob">
            <summary>
            握柄坐标变换
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIRocker.callBack">
            <summary>
            主体事件
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.UIRocker.Radius">
            <summary>
            握柄移动半径
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.UIRocker.Slider">
            <summary>
            握柄与中心的距离
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.UIRocker.Angle">
            <summary>
            顺时针握柄角度
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.UIRocker.direction">
            <summary>
            设置或者获取握柄方位
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIRocker.vector">
            <summary>
            握柄的方向向量
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UIRocker.Rocking">
            <summary>
            握柄转动事件
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.UIRocker.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="fake">模型数据</param>
            <param name="script">元素主体</param>
        </member>
        <member name="T:huqiang.UIComposite.SliderInfo">
            <summary>
            滑块条
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.SliderInfo.StartOffset">
            <summary>
            前位置的偏移量
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.SliderInfo.EndOffset">
            <summary>
            终点位置的偏移量
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.SliderInfo.MinScale">
            <summary>
            起点位置的握柄缩放
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.SliderInfo.MaxScale">
            <summary>
            终点位置的握柄缩放
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.SliderInfo.direction">
            <summary>
            方向
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UISlider.FillImage">
            <summary>
            填充的图像主体
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UISlider.Nob">
            <summary>
            握柄,可空
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UISlider.info">
            <summary>
            附加信息
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.UISlider.SetFillSize(System.Single)">
            <summary>
            设置填充值
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:huqiang.UIComposite.UISlider.OnValueChanged">
            <summary>
            滑块值被改变事件
            </summary>
        </member>
        <member name="F:huqiang.UIComposite.UISlider.ValueEndChange">
            <summary>
            滑块值改变完毕事件
            </summary>
        </member>
        <member name="P:huqiang.UIComposite.UISlider.Percentage">
            <summary>
            滑块位置百分比,0-1
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.UISlider.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:huqiang.UIComposite.UISlider.Initial(huqiang.Data.FakeStruct,huqiang.Core.HGUI.UIElement)">
            <summary>
            初始化
            </summary>
            <param name="mod">模型数据</param>
            <param name="script">元素主体</param>
        </member>
        <member name="T:huqiang.UIEvent.EventCollider">
            <summary>
            事件碰撞器
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.EventCollider.Initial(huqiang.Data.FakeStruct)">
            <summary>
            初始化
            </summary>
            <param name="fake">数据缓存</param>
        </member>
        <member name="M:huqiang.UIEvent.EventCollider.InThere(huqiang.Core.HGUI.UIElement,huqiang.UIEvent.UserEvent,UnityEngine.Vector2)">
            <summary>
            检测点是否在碰撞器里面
            </summary>
            <param name="script">ui对象实例</param>
            <param name="user">用户时间</param>
            <param name="dot">检测点</param>
            <returns>返回真,则点在碰撞器里面</returns>
        </member>
        <member name="T:huqiang.UIEvent.UIBoxCollider">
            <summary>
            矩形碰撞器
            </summary>
        </member>
        <member name="T:huqiang.UIEvent.UICircleCollider">
            <summary>
            圆形碰撞器
            </summary>
        </member>
        <member name="T:huqiang.UIEvent.UIPolygonCollider">
            <summary>
            多边形碰撞器
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UIPolygonCollider.Points">
            <summary>
            多边形所有顶点
            </summary>
        </member>
        <member name="T:huqiang.UIEvent.GestureEvent">
            <summary>
            手势事件
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.actions">
            <summary>
            当前帧所有输入事件
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.GestureEvent.CurScale">
            <summary>
            当前缩放尺寸
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.GestureEvent.DeltaScale">
            <summary>
            当前帧与上一帧的缩放尺寸
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.GestureEvent.DirPix">
            <summary>
            双指的直线距离
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.GestureEvent.DeltaPix">
            <summary>
            双指的当前帧距离
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.GestureEvent.DirAngle">
            <summary>
            双指的角度
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.GestureEvent.DeltaAngle">
            <summary>
            双指的当前帧角度
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.RawPos0">
            <summary>
            触控1的开始位置
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.RawPos1">
            <summary>
            触控2的开始位置
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.LastPos0">
            <summary>
            触控1的上一帧位置
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.LastPos1">
            <summary>
            触控2的上一帧位置
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.TowFingerPressd">
            <summary>
            双指按压
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.ThreeFingerPressd">
            <summary>
            三指按压
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.FourFingerPressd">
            <summary>
            四指按压
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.FiveFingerPressd">
            <summary>
            五指按压
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.TowFingerMove">
            <summary>
            双指移动
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.ThreeFingerMove">
            <summary>
            三指移动
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.FourFingerMove">
            <summary>
            四指移动
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.FiveFingerMove">
            <summary>
            五指移动
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.TowFingerUp">
            <summary>
            双指弹起
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.ThreeFingerUp">
            <summary>
            三指弹起
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.FourFingerUp">
            <summary>
            四指弹起
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.FiveFingerUp">
            <summary>
            五指弹起
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.TowFingerClick">
            <summary>
            双指单击
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.ThreeFingerClick">
            <summary>
            三指单击
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.FourFingerClick">
            <summary>
            四指单击
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.GestureEvent.FiveFingerClick">
            <summary>
            五指单击
            </summary>
        </member>
        <member name="T:huqiang.UIEvent.InputBoxEvent">
            <summary>
            输入框事件
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.InputBoxEvent.input">
            <summary>
            输入框复合组件实例
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.InputBoxEvent.InputString">
            <summary>
            输入字符串
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.InputBoxEvent.Initial(huqiang.Data.FakeStruct)">
            <summary>
            初始化
            </summary>
            <param name="mod">数据缓存</param>
        </member>
        <member name="M:huqiang.UIEvent.InputBoxEvent.ChangeText(System.String)">
            <summary>
            替换字符串
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:huqiang.UIEvent.InputBoxEvent.CheckPointer(huqiang.UIEvent.UserAction,huqiang.Core.HGUI.PressInfo@)">
            <summary>
            检测当前光标按在哪两个字符中间了
            </summary>
            <param name="action"></param>
            <param name="press"></param>
        </member>
        <member name="M:huqiang.UIEvent.InputBoxEvent.GetPointer(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{huqiang.Core.HGUI.HVertex},UnityEngine.Color32@,huqiang.Core.HGUI.PressInfo@)">
            <summary>
            获取光标的显示网格
            </summary>
            <param name="tri">三角形列表</param>
            <param name="vert">顶点列表</param>
            <param name="color">填充颜色</param>
            <param name="start">按压信息</param>
        </member>
        <member name="M:huqiang.UIEvent.InputBoxEvent.SetCursorPos(huqiang.Core.HGUI.PressInfo@)">
            <summary>
            设置输入法显示位置,win平台
            </summary>
            <param name="start">光标按压位置</param>
        </member>
        <member name="M:huqiang.UIEvent.InputBoxEvent.GetSelectArea(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{huqiang.Core.HGUI.HVertex},UnityEngine.Color32@,huqiang.Core.HGUI.PressInfo@,huqiang.Core.HGUI.PressInfo@)">
            <summary>
            获取选中区域的网格
            </summary>
            <param name="tri">三角形列表</param>
            <param name="vert">顶点列表</param>
            <param name="color">填充颜色</param>
            <param name="start">开始按压位置信息</param>
            <param name="end">结束按压位置信息</param>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.KeyPress">
            <summary>
            当前帧所有按下键的列表
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.KeyDowns">
            <summary>
            当前帧所有按下状态的键的列表
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.KeyUps">
            <summary>
            当前帧所有弹起键的列表
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.InputString">
            <summary>
            输入字符串
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.TempString">
            <summary>
            IME临时字符串
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.CompositionString">
            <summary>
            Unity获取到的IME字符串
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.TempStringChanged">
            <summary>
            IME临时字符串当前帧改变了
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.CorrectionInput">
            <summary>
            受输入规则限定后的字符串
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.TouchString">
            <summary>
            移动端输入字符串
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.CorrectionTouch">
            <summary>
            移动端受输入规则限定后的字符串
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.InputChanged">
            <summary>
            输入字符串在当前帧改变了
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard._touch">
            <summary>
            软键盘
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.systemCopyBuffer">
            <summary>
            系统粘贴板
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.Keyboard.CursorPos">
            <summary>
            输入法位置
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.Keyboard.InfoCollection">
            <summary>
            键盘信息收集
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.Keyboard.OnInput(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            弹出软键盘输入
            </summary>
            <param name="str">初始字符串</param>
            <param name="type">键盘类型</param>
            <param name="multiLine">允许多行</param>
            <param name="passward">密码输入</param>
            <param name="limit">字符个数限制,为0则不限制</param>
        </member>
        <member name="M:huqiang.UIEvent.Keyboard.EndInput">
            <summary>
            结束输入
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.Keyboard.type">
            <summary>
            触摸键盘类型
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.Keyboard.status">
            <summary>
            触摸键盘状态
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.Keyboard.GetKey(UnityEngine.KeyCode)">
            <summary>
            获取键的当前帧按压状态
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIEvent.Keyboard.GetKeyDown(UnityEngine.KeyCode)">
            <summary>
            获取键的当前帧是否按下
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIEvent.Keyboard.Nokey">
            <summary>
            当前帧是否没有键输入
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIEvent.Keyboard.GetKeyUp(UnityEngine.KeyCode)">
            <summary>
            获取键的当前帧是否弹起
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.Accelerationtime">
            <summary>
            默认的加速时间,单位毫秒
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.TimeSlice">
            <summary>
            时间片,单位毫秒
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.LastTime">
            <summary>
            上一帧时间,单位毫秒
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.Ticks">
            <summary>
            当前时钟周期
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.Update">
            <summary>
            状态更新
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.Id">
            <summary>
            事件id
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.LastPosition">
            <summary>
            上一帧屏幕坐标
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.CanPosition">
            <summary>
            当前帧画布坐标
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.Position">
            <summary>
            当前帧画布坐标
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.Motion">
            <summary>
            当前帧与上一帧的运动距离
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.Velocities">
            <summary>
            10内移动平均速率
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.IsMoved">
            <summary>
            是否移动了
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.FingerStationary">
            <summary>
            手指在操作
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.IsLeftButtonDown">
            <summary>
            鼠标左键按下状态
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.isPressed">
            <summary>
            鼠标左键按下
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.IsLeftButtonUp">
            <summary>
            鼠标左键弹起
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.rawPosition">
            <summary>
            按下时的最初位置
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.tapCount">
            <summary>
            触控的tapCount
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.PressTime">
            <summary>
            鼠标按压世间
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserAction.EventTicks">
            <summary>
            当前事件时钟周期
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.CurrentEntry">
            <summary>
            当前包含鼠标的所有UI
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserAction.MultiFocus">
            <summary>
            当前拥有焦点的所有UI
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.Clear">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.ReleaseFocus">
            <summary>
            移除焦点所有UI
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.LoadFinger(UnityEngine.Touch@)">
            <summary>
            载入触摸信息
            </summary>
            <param name="touch"></param>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.LoadMouse">
            <summary>
            载入鼠标信息
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.CopyAction(huqiang.UIEvent.UserAction,UnityEngine.Vector2)">
            <summary>
            复制事件
            </summary>
            <param name="action"></param>
            <param name="FormSize"></param>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.Dispatch(huqiang.Core.HGUI.HGUIElement[])">
            <summary>
            派发事件
            </summary>
            <param name="pipeLine">ui流水线</param>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.ExistFocus(huqiang.UIEvent.UserEvent)">
            <summary>
            该用户事件是否存在焦点
            </summary>
            <param name="eve">用户事件实例</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.AddFocus(huqiang.UIEvent.UserEvent)">
            <summary>
            添加焦点
            </summary>
            <param name="eve">用户事件实例</param>
        </member>
        <member name="M:huqiang.UIEvent.UserAction.RemoveFocus(huqiang.UIEvent.UserEvent)">
            <summary>
            移除焦点
            </summary>
            <param name="eve">用户事件实例</param>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.ClickTime">
            <summary>
            单击事件触发时间间隔 默认1.8S
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.ClickArea">
            <summary>
            当按压和弹起的距离平方小于此距离时触发单击事件,否则判定为拖拽事件,默认为20:(20*20=400)
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.UserEvent.DispatchEvent(huqiang.UIEvent.UserAction,huqiang.Core.HGUI.HGUIElement[])">
            <summary>
            派发用户事件
            </summary>
            <param name="action"></param>
            <param name="pipeLine"></param>
        </member>
        <member name="M:huqiang.UIEvent.UserEvent.DispatchEvent(huqiang.Core.HGUI.HGUIElement[],System.Int32,huqiang.UIEvent.UserAction)">
            <summary>
            派发用户事件
            </summary>
            <param name="pipeLine">所有UI</param>
            <param name="index"></param>
            <param name="pos">父级位置</param>
            <param name="scale">父级大小</param>
            <param name="quate">父级旋转</param>
            <param name="action">用户操作指令</param>
            <returns></returns>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.pgs">
            <summary>
            父物体的全局缩放
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.GlobalScale">
            <summary>
            全局缩放
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.GlobalPosition">
            <summary>
            全局坐标
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.GlobalRotation">
            <summary>
            全局旋转
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserEvent.RawPosition">
            <summary>
            按压时的初始位置
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserEvent.HoverTime">
            <summary>
            鼠标悬停时间,单位毫秒
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserEvent.PressTime">
            <summary>
            按压时间
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserEvent.EntryTime">
            <summary>
            初次进入的时间
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserEvent.StayTime">
            <summary>
            静止不动时间
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserEvent.Pressed">
            <summary>
            按压状态
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserEvent.VelocityX">
            <summary>
            用户拖拽造成的速率X
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserEvent.VelocityY">
            <summary>
            用户拖拽造成的速率Y
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.forbid">
            <summary>
            禁止此用户事件
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.CutRect">
            <summary>
            开启此项,范围外不会把事件传给子组件
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.ForceEvent">
            <summary>
            强制事件不被子组件拦截
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.Penetrate">
            <summary>
            允许事件穿透
            </summary>
        </member>
        <member name="P:huqiang.UIEvent.UserEvent.entry">
            <summary>
            鼠标或触摸是否在UI里面
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.AutoColor">
            <summary>
            自动调色
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.DataContext">
            <summary>
            联系上下文
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.PointerDown">
            <summary>
            光标按下
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.PointerUp">
            <summary>
            光标弹起
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.Click">
            <summary>
            光标单击
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.PointerEntry">
            <summary>
            光标进入ui区域
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.PointerMove">
            <summary>
            光标移动
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.PointerLeave">
            <summary>
            光标离开此UI区域
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.PointerHover">
            <summary>
            光标悬停
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.MouseWheel">
            <summary>
            滚轮滚动
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.Drag">
            <summary>
            光标拖拽
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.DragEnd">
            <summary>
            光标拖拽完毕
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.Scrolling">
            <summary>
            拖拽后造成的持续滚动
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.ScrollEndX">
            <summary>
            当X轴滚动完毕
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.ScrollEndY">
            <summary>
            Y轴滚动完毕
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.LostFocus">
            <summary>
            失去焦点
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.Context">
            <summary>
            绑定的UI元素
            </summary>
        </member>
        <member name="F:huqiang.UIEvent.UserEvent.collider">
            <summary>
            碰撞器
            </summary>
        </member>
        <member name="M:huqiang.UIEvent.UserEvent.ScreenToLocal(UnityEngine.Vector3)">
            <summary>
            屏幕坐标转换到局部坐标
            </summary>
            <param name="v">屏幕坐标</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIEvent.UserEvent.GetOffset">
            <summary>
            获取与UI坐标表的相对位置
            </summary>
            <returns></returns>
        </member>
        <member name="T:huqiang.UIModel.HotConstructor`2">
            <summary>
            用于热更新滚动框的构造体
            </summary>
            <typeparam name="T">UI模型</typeparam>
            <typeparam name="U">数据模型</typeparam>
        </member>
        <member name="F:huqiang.UIModel.HotConstructor`2.middle">
            <summary>
            用于热更新滚动框的中间件实体
            </summary>
        </member>
        <member name="M:huqiang.UIModel.HotConstructor`2.#ctor(System.Action{`0,`1,System.Int32})">
            <summary>
            构造函数
            </summary>
            <param name="action">项更新委托</param>
        </member>
        <member name="F:huqiang.UIModel.HotConstructor`2.Invoke">
            <summary>
            项更新委托
            </summary>
        </member>
        <member name="M:huqiang.UIModel.HotConstructor`2.Create">
            <summary>
            创建一个UI实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.HotConstructor`2.Call(System.Object,System.Object,System.Int32)">
            <summary>
            更新项
            </summary>
            <param name="obj">UI实体</param>
            <param name="dat">数据实体</param>
            <param name="index">索引</param>
        </member>
        <member name="T:huqiang.UIModel.HotTVConstructor`2">
            <summary>
            用于热更新树形框的构造体
            </summary>
            <typeparam name="T">UI模型</typeparam>
            <typeparam name="U">数据模型</typeparam>
        </member>
        <member name="F:huqiang.UIModel.HotTVConstructor`2.middle">
            <summary>
            用于热更新树形框的中间件实体
            </summary>
        </member>
        <member name="M:huqiang.UIModel.HotTVConstructor`2.#ctor(System.Action{`0,`1})">
            <summary>
            构造函数
            </summary>
            <param name="action">项更新委托</param>
        </member>
        <member name="F:huqiang.UIModel.HotTVConstructor`2.Invoke">
            <summary>
            项更新委托
            </summary>
        </member>
        <member name="M:huqiang.UIModel.HotTVConstructor`2.Create">
            <summary>
            创建一个UI实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.HotTVConstructor`2.Call(huqiang.UIComposite.TreeViewItem,huqiang.UIComposite.TreeViewNode)">
            <summary>
            更新项
            </summary>
            <param name="obj">UI实体</param>
            <param name="dat">数据实体</param>
        </member>
        <member name="T:huqiang.UIModel.HotUILinker`2">
            <summary>
            用于热更新对话框的连接器
            </summary>
            <typeparam name="T">UI模型</typeparam>
            <typeparam name="U">数据模型</typeparam>
        </member>
        <member name="F:huqiang.UIModel.HotUILinker`2.middle">
            <summary>
            用于热更新对话框的对象连接器
            </summary>
        </member>
        <member name="F:huqiang.UIModel.HotUILinker`2.ItemUpdate">
            <summary>
            项更新委托
            </summary>
        </member>
        <member name="F:huqiang.UIModel.HotUILinker`2.CalculItemHigh">
            <summary>
            计算内容高度的委托
            </summary>
        </member>
        <member name="M:huqiang.UIModel.HotUILinker`2.#ctor(huqiang.UIComposite.UIContainer,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="container">容器实例</param>
            <param name="mod">UI模型名称</param>
        </member>
        <member name="M:huqiang.UIModel.HotUILinker`2.InsertData(`1)">
            <summary>
            插入数据
            </summary>
            <param name="dat">数据实例</param>
        </member>
        <member name="M:huqiang.UIModel.HotUILinker`2.AddData(`1)">
            <summary>
            添加数据
            </summary>
            <param name="dat">数据实例</param>
        </member>
        <member name="M:huqiang.UIModel.HotUILinker`2.AddAndMove(`1,System.Single)">
            <summary>
            添加一条数据,并向下滚动当前此数据高度
            </summary>
            <param name="dat">数据实例</param>
            <param name="h">数据高度</param>
        </member>
        <member name="M:huqiang.UIModel.HotUILinker`2.AddAndMoveEnd(`1,System.Single)">
            <summary>
            插入一条数据,并滚动到底部
            </summary>
            <param name="dat">数据实例</param>
            <param name="h">数据高度</param>
        </member>
        <member name="T:huqiang.UIModel.PopWindow">
            <summary>
            弹出式窗口,位于Page和Menu中间
            </summary>
        </member>
        <member name="F:huqiang.UIModel.PopWindow.UIContext">
            <summary>
            联系上下文的基础UI
            </summary>
        </member>
        <member name="M:huqiang.UIModel.PopWindow.Show(System.Object)">
            <summary>
            显示
            </summary>
            <param name="obj">附加内容</param>
        </member>
        <member name="M:huqiang.UIModel.PopWindow.Show(huqiang.UIModel.UIBase,System.Object)">
            <summary>
            显示
            </summary>
            <param name="context">联系上下文的基础UI</param>
            <param name="obj">附加内容</param>
        </member>
        <member name="M:huqiang.UIModel.PopWindow.Hide">
            <summary>
            隐藏窗口
            </summary>
        </member>
        <member name="M:huqiang.UIModel.PopWindow.Handling(System.String,System.Object)">
            <summary>
            处理消息
            </summary>
            <param name="cmd">指令</param>
            <param name="dat">数据</param>
            <returns>成功返回真</returns>
        </member>
        <member name="F:huqiang.UIModel.UIBase.LanName">
            <summary>
            当前语言
            </summary>
        </member>
        <member name="F:huqiang.UIModel.UIBase.Lan">
            <summary>
            语言数据
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIBase.SetLanguage(System.String,System.Byte[])">
            <summary>
            设置当前语言
            </summary>
            <param name="name">语言名称</param>
            <param name="iniData">语言数据</param>
        </member>
        <member name="F:huqiang.UIModel.UIBase.buff">
            <summary>
            ui缓存
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIBase.GetUI``1">
            <summary>
            获取某个UI
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIBase.PostMsg``1(System.String,System.Object)">
            <summary>
            向某个UI类投递消息
            </summary>
            <typeparam name="T">ui类型</typeparam>
            <param name="cmd">指令</param>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIBase.PostMsg``1(System.Int32,System.Object)">
            <summary>
            向某个UI类投递消息
            </summary>
            <typeparam name="T">ui类型</typeparam>
            <param name="cmd">指令</param>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIBase.GetUIs``1">
            <summary>
            获取某个类型的ui列表
            </summary>
            <typeparam name="T">ui类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIBase.ClearUI">
            <summary>
            清除所有UI
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:huqiang.UIModel.UIBase.DataContext">
            <summary>
            联系上下文
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UIBase.Parent">
            <summary>
            父坐标变换
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UIBase.Main">
            <summary>
            主游戏对象
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UIBase.model">
            <summary>
            UI模型
            </summary>
        </member>
        <member name="F:huqiang.UIModel.UIBase.UIParent">
            <summary>
            父UI对象
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIBase.ObjectFields(System.Type)">
            <summary>
            对象转换到反射列表
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="F:huqiang.UIModel.UIBase.uiInitializer">
            <summary>
            UI初始化器实例
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIBase.LoadUI``1(System.String,System.String)">
            <summary>
            载入UI模型并实例化
            </summary>
            <typeparam name="T">UI模型</typeparam>
            <param name="asset">资源包名</param>
            <param name="name">UI名</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIBase.Initial(UnityEngine.Transform,huqiang.UIModel.UIBase,System.Object)">
            <summary>
            初始化UI
            </summary>
            <param name="parent">父坐标变换</param>
            <param name="ui">父UI</param>
            <param name="obj">传递的数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIBase.Cmd(huqiang.Data.Msg,System.Object)">
            <summary>
            接受指令
            </summary>
            <param name="msg">指令</param>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIBase.Cmd(System.Int32,System.Object)">
            <summary>
            接受指令
            </summary>
            <param name="cmd">指令</param>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIBase.Cmd(System.String,System.Object)">
            <summary>
            接受指令
            </summary>
            <param name="cmd">指令</param>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIBase.Cmd(huqiang.Data.DataBuffer)">
            <summary>
            接受指令
            </summary>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIBase.ReSize">
            <summary>
            更新布局尺寸
            </summary>
        </member>
        <member name="F:huqiang.UIModel.UIBase.LanSection">
            <summary>
            当前UI的语言节点
            </summary>
        </member>
        <member name="F:huqiang.UIModel.UIBase.CurLan">
            <summary>
            当前语言
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIBase.ChangeLanguage">
            <summary>
            更换语言
            </summary>
            <returns></returns>
        </member>
        <member name="T:huqiang.UIModel.UIMenu">
            <summary>
            弹出式菜单,位于Window上层
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UIMenu.Root">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UIMenu.UIRoot">
            <summary>
            根元素
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UIMenu.Instance">
            <summary>
            当前菜单实例
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIMenu.Initial(UnityEngine.Transform)">
            <summary>
            初始化
            </summary>
            <param name="Canvas">主画布</param>
        </member>
        <member name="M:huqiang.UIModel.UIMenu.HideMenu">
            <summary>
            隐藏菜单
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIMenu.ReSize">
            <summary>
            更新尺寸
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UIMenu.CurrentMenu">
            <summary>
            当前菜单
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIMenu.ReleaseMenu">
            <summary>
            释放掉当前未激活的弹窗
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIMenu.ShowMenu``1(huqiang.UIModel.UIBase,UnityEngine.Rect,System.Int32,System.Object)">
            <summary>
            显示一个菜单
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="context">联系上下文</param>
            <param name="pos">弹出位置</param>
            <param name="dic">方位</param>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIMenu.GetMenu``1">
            <summary>
            获取某个菜单
            </summary>
            <typeparam name="T">菜单类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIMenu.Show(huqiang.UIModel.UIBase,UnityEngine.Rect,System.Int32,System.Object)">
            <summary>
            显示
            </summary>
            <param name="context">联系上下文</param>
            <param name="pos">位置</param>
            <param name="dic">方位</param>
            <param name="obj">数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIMenu.Hide">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIMenu.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:huqiang.UIModel.UINotify">
            <summary>
            通知UI,位于所有UI的顶层
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UINotify.Root">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UINotify.UIRoot">
            <summary>
            根元素
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UINotify.Instance">
            <summary>
            当前通知栏
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UINotify.Initial(UnityEngine.Transform)">
            <summary>
            初始化
            </summary>
            <param name="Canvas">主画布</param>
        </member>
        <member name="M:huqiang.UIModel.UINotify.UpdateAll(System.Single)">
            <summary>
            更新所有通知栏
            </summary>
            <param name="time">时间片</param>
        </member>
        <member name="P:huqiang.UIModel.UINotify.CurrentNotify">
            <summary>
            当前通知栏
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UINotify.ShowNotify``1(huqiang.UIModel.UIBase,System.Object)">
            <summary>
            显示某个通知栏
            </summary>
            <typeparam name="T">UI类型</typeparam>
            <param name="context">联系上下文</param>
            <param name="obj">数据对象</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UINotify.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UINotify.Show(huqiang.UIModel.UIBase,System.Object)">
            <summary>
            显示
            </summary>
            <param name="context">联系上下文</param>
            <param name="dat">数据对象</param>
        </member>
        <member name="M:huqiang.UIModel.UINotify.ReSize">
            <summary>
            更新尺寸
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UINotify.Hide">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="T:huqiang.UIModel.UIPage">
            <summary>
            UI页面,位于UI最下层
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UIPage.Root">
            <summary>
            根节点
            </summary>
        </member>
        <member name="F:huqiang.UIModel.UIPage.UIRoot">
            <summary>
            根元素
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIPage.Initial(UnityEngine.Transform)">
            <summary>
            初始化
            </summary>
            <param name="Canvas">主画布</param>
        </member>
        <member name="P:huqiang.UIModel.UIPage.CurrentPage">
            <summary>
            当前页面
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIPage.LoadPage``1(System.Object)">
            <summary>
            载入页面
            </summary>
            <typeparam name="T">页面类型</typeparam>
            <param name="dat">数据</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIPage.LoadPage(System.Type,System.Object)">
            <summary>
            载入页面
            </summary>
            <param name="type">页面类型</param>
            <param name="dat">数据</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIPage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:huqiang.UIModel.UIPage.currentPop">
            <summary>
            当前显示的窗口
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIPage.Initial(UnityEngine.Transform,System.Object)">
            <summary>
            初始化
            </summary>
            <param name="parent">父坐标变换</param>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIPage.Show(System.Object)">
            <summary>
            显示
            </summary>
            <param name="dat">数据</param>
        </member>
        <member name="M:huqiang.UIModel.UIPage.ReSize">
            <summary>
            更新尺寸
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIPage.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIPage.HidePopWindow">
            <summary>
            隐藏当前窗口
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIPage.ShowPopWindow``1(System.Object,UnityEngine.Transform)">
            <summary>
            显示一个窗口
            </summary>
            <typeparam name="T">窗口类型</typeparam>
            <param name="obj">数据</param>
            <param name="parent">父坐标变换,为空则默认为当前页的父坐标变换</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIPage.ShowPopWindow(System.Type,System.Object,UnityEngine.Transform)">
            <summary>
            显示一个窗口
            </summary>
            <param name="type">窗口类型</param>
            <param name="obj">数据</param>
            <param name="parent">父坐标变换,为空则默认为当前页的父坐标变换</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIPage.PopUpWindow``1(System.Object)">
            <summary>
            弹出一个窗口
            </summary>
            <typeparam name="T">窗口类型</typeparam>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIPage.ReleasePopWindow">
            <summary>
            释放掉当前未激活的弹窗
            </summary>
        </member>
        <member name="M:huqiang.UIModel.UIPage.ReleasePopWindow(huqiang.UIModel.PopWindow)">
            <summary>
            释放当前窗口
            </summary>
            <param name="window">窗口实例</param>
        </member>
        <member name="M:huqiang.UIModel.UIPage.ReleasePopWindow``1">
            <summary>
            移除窗口
            </summary>
            <typeparam name="T">窗口类型</typeparam>
        </member>
        <member name="M:huqiang.UIModel.UIPage.GetPopWindow``1">
            <summary>
            获取一个窗口
            </summary>
            <typeparam name="T">窗口类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:huqiang.UIModel.UIPage.Update(System.Single)">
            <summary>
            更新
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:huqiang.UIModel.UIPage.ChangeLanguage">
            <summary>
            更换语言
            </summary>
            <returns></returns>
        </member>
        <member name="T:huqiang.Unit.LineCollider">
            <summary>
            线碰撞器
            </summary>
        </member>
        <member name="F:huqiang.Unit.LineCollider.start">
            <summary>
            起点
            </summary>
        </member>
        <member name="F:huqiang.Unit.LineCollider.end">
            <summary>
            终点
            </summary>
        </member>
        <member name="T:huqiang.Unit.UCapsulesCollider">
            <summary>
            胶囊体碰撞器
            </summary>
        </member>
        <member name="F:huqiang.Unit.UCapsulesCollider.top">
            <summary>
            顶部
            </summary>
        </member>
        <member name="F:huqiang.Unit.UCapsulesCollider.down">
            <summary>
            底部
            </summary>
        </member>
        <member name="F:huqiang.Unit.UCapsulesCollider.buf">
            <summary>
            中间矩形
            </summary>
        </member>
        <member name="F:huqiang.Unit.UCapsulesCollider.size">
            <summary>
            总体尺寸
            </summary>
        </member>
        <member name="F:huqiang.Unit.UCapsulesCollider.offset">
            <summary>
            与实体的偏移位置
            </summary>
        </member>
        <member name="F:huqiang.Unit.UCapsulesCollider.radius">
            <summary>
            弧形半径
            </summary>
        </member>
        <member name="F:huqiang.Unit.UCapsulesCollider.circle">
            <summary>
            当x=y时,胶囊体为圆形
            </summary>
        </member>
        <member name="M:huqiang.Unit.UCapsulesCollider.Update">
            <summary>
            更新顶点数据
            </summary>
        </member>
        <member name="T:huqiang.Unit.UCircleCollider">
            <summary>
            圆形碰撞器
            </summary>
        </member>
        <member name="F:huqiang.Unit.UCircleCollider.radius">
            <summary>
            半径
            </summary>
        </member>
        <member name="F:huqiang.Unit.UCircleCollider.rad">
            <summary>
            
            </summary>
        </member>
        <member name="T:huqiang.Unit.Unit">
            <summary>
            网格单元
            </summary>
        </member>
        <member name="T:huqiang.Unit.HotUnit">
            <summary>
            热更新网格单元
            </summary>
        </member>
        <member name="T:huqiang.Unit.UnitCollision">
            <summary>
            单元碰撞检测器
            </summary>
        </member>
        <member name="T:huqiang.Unit.UnitFactory">
            <summary>
            单元工厂
            </summary>
        </member>
        <member name="T:huqiang.Unit.HotUnitManager">
            <summary>
            单元管理器
            </summary>
        </member>
        <member name="T:huqiang.Unit.UPolygonCollider">
            <summary>
            多边形碰撞器
            </summary>
        </member>
        <member name="M:huqiang.WebApi.BaiduMap.GPSToMercato(System.Double,System.Double,System.Action{huqiang.WebApi.LanLat})">
            <summary>
            GPS坐标转墨卡坐标
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="action"></param>
        </member>
        <member name="M:huqiang.WebApi.BaiduMap.MercatoToTile(huqiang.WebApi.LanLat,System.Int32)">
            <summary>
            墨卡坐标转瓦片坐标
            </summary>
            <param name="ll"></param>
            <param name="zoom">3-18</param>
        </member>
        <member name="M:huqiang.WebApi.BaiduMap.TileToMercato(huqiang.WebApi.TilePos@,System.Int32)">
            <summary>
            瓦片坐标转墨卡坐标
            </summary>
            <param name="tile"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:huqiang.WebApi.BaiduMap.GPSToTile(System.Double,System.Double,System.Int32,System.Action{huqiang.WebApi.LanLat})">
            <summary>
            GPS坐标转瓦片坐标
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="zoom"></param>
            <param name="action"></param>
        </member>
        <member name="M:huqiang.WebApi.BaiduMap.GetTileMap(System.Int32,System.Int32,System.Int32,System.String,System.Action{System.String,System.String,System.Object,System.Byte[]},System.Object)">
            <summary>
            获取瓦片图片
            </summary>
            <param name="tileX"></param>
            <param name="tileY"></param>
            <param name="zoom"></param>
            <param name="name"></param>
            <param name="action"></param>
            <param name="context"></param>
        </member>
        <member name="M:GifDecoder.AsyncDecode(System.Byte[],System.String,System.Action{GifDecoder.Mission})">
            <summary>
            异步解码gif图片
            </summary>
            <param name="dat"></param>
            <param name="tag"></param>
            <param name="callback">返回Mission</param>
        </member>
        <member name="T:MessagePack.LZ4.LZ4Codec">
            <summary>Safe LZ4 codec.</summary>
            <summary>Unsafe LZ4 codec.</summary>
        </member>
        <member name="F:MessagePack.LZ4.LZ4Codec.MEMORY_USAGE">
            <summary>
            Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.)
            Increasing memory usage improves compression ratio
            Reduced memory usage can improve speed, due to cache effect
            Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
            </summary>
        </member>
        <member name="F:MessagePack.LZ4.LZ4Codec.NOTCOMPRESSIBLE_DETECTIONLEVEL">
            <summary>
            Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
            This may decrease compression ratio dramatically, but will be faster on incompressible data
            Increasing this value will make the algorithm search more before declaring a segment "incompressible"
            This could improve compression a bit, but will be slower on incompressible data
            The default value (6) is recommended
            </summary>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Gets maximum the length of the output.</summary>
            <param name="inputLength">Length of the input.</param>
            <returns>Maximum number of bytes needed for compressed buffer.</returns>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.Encode32Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.Encode64Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.Decode32Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.Decode64Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.BlockCopy(System.Byte*,System.Byte*,System.Int32)">
            <summary>Copies block of memory.</summary>
            <param name="src">The source.</param>
            <param name="dst">The destination.</param>
            <param name="len">The length (in bytes).</param>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.Encode32Unsafe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.Decode32Unsafe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.Encode64Unsafe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:MessagePack.LZ4.LZ4Codec.Decode64Unsafe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Decode64s the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="F:Margin.left">
            <summary>
            pivot.x 0-1
            </summary>
        </member>
        <member name="F:Margin.down">
            <summary>
            pivot.y 0-1
            </summary>
        </member>
        <member name="F:Margin.right">
            <summary>
            size.x
            </summary>
        </member>
        <member name="F:Margin.top">
            <summary>
            size.y
            </summary>
        </member>
        <member name="M:Margin.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <param name="d"></param>
            <param name="t"></param>
        </member>
        <member name="F:Border.left">
            <summary>
            pivot.x 0-1
            </summary>
        </member>
        <member name="F:Border.down">
            <summary>
            pivot.y 0-1
            </summary>
        </member>
        <member name="F:Border.right">
            <summary>
            size.x
            </summary>
        </member>
        <member name="F:Border.top">
            <summary>
            size.y
            </summary>
        </member>
        <member name="F:BezierNode.NodePos">
            <summary>
            节点
            </summary>
        </member>
        <member name="F:BezierNode.LastDir">
            <summary>
            终点方向
            </summary>
        </member>
        <member name="F:BezierNode.NextDir">
            <summary>
            起点方向
            </summary>
        </member>
        <member name="T:CircleEventHelper">
            <summary>
            圆形事件区域帮助类
            </summary>
        </member>
        <member name="F:CircleEventHelper.Radius">
            <summary>
            半径
            </summary>
        </member>
        <member name="T:TestPageHelper">
            <summary>
            挂载在Canvas下
            </summary>
        </member>
        <member name="T:UICompositeHelp">
            <summary>
            ui帮助类,只存在Editor模式
            </summary>
        </member>
        <member name="M:UICompositeHelp.ToBufferData(huqiang.Data.DataBuffer)">
            <summary>
            将数据存储到FakeStrcut中
            </summary>
            <param name="data">数据缓存</param>
            <returns>FakeStruct数据</returns>
        </member>
        <member name="M:UICompositeHelp.Refresh">
            <summary>
            刷新
            </summary>
        </member>
        <member name="M:UICompositeHelp.ReSize">
            <summary>
            重新设置尺寸
            </summary>
        </member>
    </members>
</doc>
